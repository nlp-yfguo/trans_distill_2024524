+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.493 100.00
Initial model saved
Average loss over 21182358 tokens: 8.856, valid loss/error: 7.598 88.32
New best model saved
Average loss over 21251648 tokens: 7.020, valid loss/error: 6.571 82.52
New best model saved
Average loss over 21278497 tokens: 6.099, valid loss/error: 5.612 72.50
New best model saved
Average loss over 21314277 tokens: 5.196, valid loss/error: 4.617 57.87
New best model saved
Average loss over 21317447 tokens: 4.507, valid loss/error: 4.073 50.35
New best model saved
Average loss over 21326830 tokens: 4.153, valid loss/error: 3.785 46.57
New best model saved
Average loss over 11480445 tokens: 3.977
Epoch: 1, train loss: 5.804, valid loss/error: 3.673 45.01
New best model saved
Average loss over 21259795 tokens: 3.872, valid loss/error: 3.539 43.39
New best model saved
Average loss over 21255327 tokens: 3.783, valid loss/error: 3.458 42.37
New best model saved
Average loss over 21330787 tokens: 3.689, valid loss/error: 3.379 41.17
New best model saved
Average loss over 21313947 tokens: 3.647, valid loss/error: 3.318 40.10
New best model saved
Average loss over 21229896 tokens: 3.576, valid loss/error: 3.253 39.37
New best model saved
Average loss over 21303634 tokens: 3.526, valid loss/error: 3.235 38.93
New best model saved
Average loss over 11458116 tokens: 3.489
Epoch: 2, train loss: 3.666, valid loss/error: 3.196 38.49
New best model saved
Average loss over 21258912 tokens: 3.445, valid loss/error: 3.176 38.31
New best model saved
Average loss over 21292368 tokens: 3.439, valid loss/error: 3.130 37.39
New best model saved
Average loss over 21252344 tokens: 3.420, valid loss/error: 3.111 37.23
New best model saved
Average loss over 21257050 tokens: 3.404, valid loss/error: 3.084 36.71
New best model saved
Average loss over 21299809 tokens: 3.400, valid loss/error: 3.065 36.48
New best model saved
Average loss over 21297970 tokens: 3.358, valid loss/error: 3.042 36.09
New best model saved
Average loss over 11493049 tokens: 3.330
Epoch: 3, train loss: 3.404, valid loss/error: 3.042 36.05
New best model saved
Average loss over 21253646 tokens: 3.326, valid loss/error: 3.039 35.91
New best model saved
Average loss over 21269262 tokens: 3.319, valid loss/error: 3.014 35.71
New best model saved
Average loss over 21230361 tokens: 3.292, valid loss/error: 3.010 35.68
New best model saved
Average loss over 21286729 tokens: 3.305, valid loss/error: 2.994 35.32
New best model saved
Average loss over 21295205 tokens: 3.276, valid loss/error: 2.993 35.35
New best model saved
Average loss over 21271236 tokens: 3.280, valid loss/error: 2.983 35.23
New best model saved
Average loss over 11545063 tokens: 3.281
Epoch: 4, train loss: 3.298, valid loss/error: 2.979 35.10
New best model saved
Average loss over 21183266 tokens: 3.216, valid loss/error: 2.966 34.88
New best model saved
Average loss over 21275751 tokens: 3.246, valid loss/error: 2.959 34.75
New best model saved
Average loss over 21287960 tokens: 3.243, valid loss/error: 2.954 34.68
New best model saved
Average loss over 21270624 tokens: 3.241, valid loss/error: 2.964 34.79
Average loss over 21393630 tokens: 3.245, valid loss/error: 2.934 34.46
New best model saved
Average loss over 21272639 tokens: 3.239, valid loss/error: 2.938 34.48
Average loss over 11467632 tokens: 3.240
Epoch: 5, train loss: 3.238, valid loss/error: 2.930 34.42
New best model saved
Average loss over 21309007 tokens: 3.190, valid loss/error: 2.923 34.24
New best model saved
Average loss over 21271454 tokens: 3.196, valid loss/error: 2.926 34.36
Average loss over 21251066 tokens: 3.199, valid loss/error: 2.917 34.13
New best model saved
Average loss over 21187644 tokens: 3.193, valid loss/error: 2.910 34.16
New best model saved
Average loss over 21327023 tokens: 3.202, valid loss/error: 2.904 33.85
New best model saved
Average loss over 21307746 tokens: 3.201, valid loss/error: 2.901 33.95
New best model saved
Average loss over 11497562 tokens: 3.213
Epoch: 6, train loss: 3.198, valid loss/error: 2.899 33.92
New best model saved
Average loss over 21261657 tokens: 3.165, valid loss/error: 2.897 33.81
New best model saved
Average loss over 21198415 tokens: 3.162, valid loss/error: 2.902 33.96
Average loss over 21291412 tokens: 3.176, valid loss/error: 2.894 33.71
New best model saved
Average loss over 21287599 tokens: 3.168, valid loss/error: 2.887 33.68
New best model saved
Average loss over 21339678 tokens: 3.169, valid loss/error: 2.888 33.71
Average loss over 21279018 tokens: 3.170, valid loss/error: 2.888 33.71
Average loss over 11493723 tokens: 3.176
Epoch: 7, train loss: 3.169, valid loss/error: 2.881 33.46
New best model saved
Average loss over 21265040 tokens: 3.149, valid loss/error: 2.876 33.45
New best model saved
Average loss over 21258650 tokens: 3.137, valid loss/error: 2.876 33.54
New best model saved
Average loss over 21325033 tokens: 3.142, valid loss/error: 2.876 33.45
Average loss over 21287653 tokens: 3.146, valid loss/error: 2.869 33.40
New best model saved
Average loss over 21293991 tokens: 3.149, valid loss/error: 2.869 33.32
New best model saved
Average loss over 21277797 tokens: 3.166, valid loss/error: 2.866 33.39
New best model saved
Average loss over 11443338 tokens: 3.128
Epoch: 8, train loss: 3.146, valid loss/error: 2.860 33.29
New best model saved
Average loss over 21292954 tokens: 3.121, valid loss/error: 2.864 33.27
New best model saved
Average loss over 21310282 tokens: 3.127, valid loss/error: 2.859 33.22
New best model saved
Average loss over 21253288 tokens: 3.141, valid loss/error: 2.858 33.24
New best model saved
Average loss over 21202465 tokens: 3.126, valid loss/error: 2.860 33.13
New best model saved
Average loss over 21342961 tokens: 3.128, valid loss/error: 2.853 33.15
New best model saved
Average loss over 21255357 tokens: 3.128, valid loss/error: 2.859 33.25
Average loss over 11494195 tokens: 3.127
Epoch: 9, train loss: 3.128, valid loss/error: 2.850 33.09
New best model saved
Average loss over 21236151 tokens: 3.096, valid loss/error: 2.856 33.15
Average loss over 21258775 tokens: 3.115, valid loss/error: 2.857 33.38
Average loss over 21250522 tokens: 3.126, valid loss/error: 2.844 33.03
New best model saved
Average loss over 21283318 tokens: 3.113, valid loss/error: 2.851 33.04
Average loss over 21321522 tokens: 3.111, valid loss/error: 2.842 32.99
New best model saved
Average loss over 21320783 tokens: 3.128, valid loss/error: 2.839 32.89
New best model saved
Average loss over 11480431 tokens: 3.092
Epoch: 10, train loss: 3.113, valid loss/error: 2.843 32.92
Average loss over 21265807 tokens: 3.087, valid loss/error: 2.844 33.01
Average loss over 21241101 tokens: 3.088, valid loss/error: 2.842 32.94
Average loss over 21297489 tokens: 3.097, valid loss/error: 2.836 32.93
New best model saved
Average loss over 21356698 tokens: 3.115, valid loss/error: 2.831 32.72
New best model saved
Average loss over 21287726 tokens: 3.108, valid loss/error: 2.833 32.91
Average loss over 21253062 tokens: 3.096, valid loss/error: 2.829 32.80
New best model saved
Average loss over 11449619 tokens: 3.120
Epoch: 11, train loss: 3.100, valid loss/error: 2.824 32.77
New best model saved
Average loss over 21261708 tokens: 3.079, valid loss/error: 2.829 32.88
Average loss over 21314176 tokens: 3.088, valid loss/error: 2.836 32.85
Average loss over 21251199 tokens: 3.086, valid loss/error: 2.829 32.84
Average loss over 21302182 tokens: 3.096, valid loss/error: 2.821 32.76
New best model saved
Average loss over 21326749 tokens: 3.097, valid loss/error: 2.831 32.80
Average loss over 21273214 tokens: 3.096, valid loss/error: 2.824 32.68
New best model saved
Average loss over 11422274 tokens: 3.076
Epoch: 12, train loss: 3.089, valid loss/error: 2.822 32.62
New best model saved
Average loss over 21277897 tokens: 3.086, valid loss/error: 2.826 32.70
Average loss over 21318526 tokens: 3.063, valid loss/error: 2.819 32.71
New best model saved
Average loss over 21281817 tokens: 3.076, valid loss/error: 2.823 32.72
Average loss over 21241299 tokens: 3.095, valid loss/error: 2.818 32.63
New best model saved
Average loss over 21235092 tokens: 3.079, valid loss/error: 2.817 32.65
New best model saved
Average loss over 21282289 tokens: 3.071, valid loss/error: 2.817 32.63
New best model saved
Average loss over 11514582 tokens: 3.091
Epoch: 13, train loss: 3.080, valid loss/error: 2.818 32.67
Average loss over 21280309 tokens: 3.069, valid loss/error: 2.817 32.62
New best model saved
Average loss over 21199318 tokens: 3.053, valid loss/error: 2.811 32.55
New best model saved
Average loss over 21253076 tokens: 3.064, valid loss/error: 2.825 32.57
Average loss over 21336559 tokens: 3.068, valid loss/error: 2.814 32.46
New best model saved
Average loss over 21291430 tokens: 3.072, valid loss/error: 2.811 32.60
Average loss over 21235017 tokens: 3.085, valid loss/error: 2.808 32.44
New best model saved
Average loss over 11555793 tokens: 3.099
Epoch: 14, train loss: 3.071, valid loss/error: 2.810 32.45
Average loss over 21227014 tokens: 3.036, valid loss/error: 2.809 32.39
New best model saved
Average loss over 21283879 tokens: 3.063, valid loss/error: 2.816 32.55
Average loss over 21309771 tokens: 3.070, valid loss/error: 2.806 32.42
New best model saved
Average loss over 21324204 tokens: 3.073, valid loss/error: 2.817 32.53
Average loss over 21247472 tokens: 3.079, valid loss/error: 2.807 32.43
Average loss over 21268521 tokens: 3.055, valid loss/error: 2.815 32.41
Average loss over 11490641 tokens: 3.071
Epoch: 15, train loss: 3.064, valid loss/error: 2.807 32.32
New best model saved
Average loss over 21293185 tokens: 3.066, valid loss/error: 2.814 32.42
Average loss over 21292390 tokens: 3.038, valid loss/error: 2.808 32.38
Average loss over 21290687 tokens: 3.034, valid loss/error: 2.805 32.35
New best model saved
Average loss over 21251555 tokens: 3.072, valid loss/error: 2.806 32.35
Average loss over 21260237 tokens: 3.046, valid loss/error: 2.812 32.46
Average loss over 21244176 tokens: 3.070, valid loss/error: 2.800 32.26
New best model saved
Average loss over 11519272 tokens: 3.082
Epoch: 16, train loss: 3.057, valid loss/error: 2.804 32.34
Average loss over 21287781 tokens: 3.034, valid loss/error: 2.806 32.28
Average loss over 21354363 tokens: 3.050, valid loss/error: 2.803 32.35
Average loss over 21260857 tokens: 3.046, valid loss/error: 2.809 32.35
Average loss over 21221924 tokens: 3.045, valid loss/error: 2.800 32.31
Average loss over 21303031 tokens: 3.057, valid loss/error: 2.803 32.28
Average loss over 21211087 tokens: 3.058, valid loss/error: 2.800 32.30
Average loss over 11512459 tokens: 3.074
Epoch: 17, train loss: 3.050, valid loss/error: 2.802 32.31
Average loss over 21263062 tokens: 3.035, valid loss/error: 2.797 32.25
New best model saved
Average loss over 21266910 tokens: 3.034, valid loss/error: 2.799 32.20
New best model saved
Average loss over 21270478 tokens: 3.045, valid loss/error: 2.798 32.19
New best model saved
Average loss over 21183193 tokens: 3.038, valid loss/error: 2.796 32.18
New best model saved
Average loss over 21343084 tokens: 3.066, valid loss/error: 2.791 32.13
New best model saved
Average loss over 21309849 tokens: 3.040, valid loss/error: 2.793 32.12
New best model saved
Average loss over 11514926 tokens: 3.065
Epoch: 18, train loss: 3.045, valid loss/error: 2.793 32.13
Average loss over 21283876 tokens: 3.024, valid loss/error: 2.793 32.22
Average loss over 21213794 tokens: 3.033, valid loss/error: 2.798 32.19
Average loss over 21288307 tokens: 3.042, valid loss/error: 2.797 32.27
Average loss over 21305843 tokens: 3.046, valid loss/error: 2.793 32.28
Average loss over 21347329 tokens: 3.056, valid loss/error: 2.790 32.27
New best model saved
Average loss over 21220079 tokens: 3.038, valid loss/error: 2.796 32.26
Average loss over 11492274 tokens: 3.039
Epoch: 19, train loss: 3.040, valid loss/error: 2.792 32.13
Average loss over 21274768 tokens: 3.021, valid loss/error: 2.791 32.18
Average loss over 21291315 tokens: 3.028, valid loss/error: 2.794 32.13
Average loss over 12771487 tokens: 3.022
Epoch: 20, train loss: 3.024, valid loss/error: 2.793 32.11
New best model saved
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/train_finetune.py", line 210, in <module>
    use_cuda, cuda_device, cuda_devices, multi_gpu = parse_cuda(cnfg.use_cuda, cnfg.gpuid)
  File "/home/yfguo/transformer_924/utils/fmt/base4torch.py", line 20, in parse_cuda
    cuda_device = cuda_devices[0]
IndexError: tuple index out of range
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.773 31.94
Average loss over 21182358 tokens: 2.997, valid loss/error: 2.780 32.06
Average loss over 21251648 tokens: 3.018, valid loss/error: 2.781 32.01
Average loss over 21278497 tokens: 3.016, valid loss/error: 2.780 32.09
Average loss over 21314277 tokens: 3.017, valid loss/error: 2.776 32.03
Average loss over 21317447 tokens: 3.021, valid loss/error: 2.775 31.95
Average loss over 21326830 tokens: 3.024, valid loss/error: 2.776 32.04
Average loss over 11480445 tokens: 3.017
Epoch: 1, train loss: 3.016, valid loss/error: 2.777 32.01
Average loss over 21259795 tokens: 3.014, valid loss/error: 2.781 32.11
Average loss over 21255327 tokens: 3.022, valid loss/error: 2.778 31.98
Average loss over 21330787 tokens: 3.007, valid loss/error: 2.779 31.98
Average loss over 21313947 tokens: 3.020, valid loss/error: 2.777 31.92
New best model saved
Average loss over 21229896 tokens: 3.007, valid loss/error: 2.776 32.00
Average loss over 21303634 tokens: 3.008, valid loss/error: 2.778 32.04
Average loss over 11458116 tokens: 3.002
Epoch: 2, train loss: 3.012, valid loss/error: 2.771 32.01
New best model saved
Average loss over 21258912 tokens: 2.988, valid loss/error: 2.779 31.95
Average loss over 21292368 tokens: 3.006, valid loss/error: 2.775 31.91
New best model saved
Average loss over 21252344 tokens: 3.012, valid loss/error: 2.773 31.99
Average loss over 21257050 tokens: 3.016, valid loss/error: 2.776 31.92
Average loss over 21299809 tokens: 3.033, valid loss/error: 2.776 31.88
New best model saved
Average loss over 21297970 tokens: 3.008, valid loss/error: 2.774 31.92
Average loss over 11493049 tokens: 2.994
Epoch: 3, train loss: 3.009, valid loss/error: 2.773 32.00
Average loss over 21253646 tokens: 3.007, valid loss/error: 2.778 31.99
Average loss over 21269262 tokens: 3.010, valid loss/error: 2.772 32.00
Average loss over 21230361 tokens: 2.994, valid loss/error: 2.774 32.06
Average loss over 21286729 tokens: 3.015, valid loss/error: 2.779 32.03
Average loss over 21295205 tokens: 2.998, valid loss/error: 2.775 31.93
Average loss over 21271236 tokens: 3.010, valid loss/error: 2.776 32.08
Average loss over 11545063 tokens: 3.017
Epoch: 4, train loss: 3.006, valid loss/error: 2.776 32.00
Average loss over 21183266 tokens: 2.970, valid loss/error: 2.774 31.94
Average loss over 21275751 tokens: 3.001, valid loss/error: 2.776 32.03
Average loss over 21287960 tokens: 3.003, valid loss/error: 2.779 32.01
Average loss over 21270624 tokens: 3.007, valid loss/error: 2.778 32.00
Average loss over 21393630 tokens: 3.017, valid loss/error: 2.769 31.90
New best model saved
Average loss over 21272639 tokens: 3.016, valid loss/error: 2.770 31.91
Average loss over 11467632 tokens: 3.022
Epoch: 5, train loss: 3.004, valid loss/error: 2.773 31.93
Average loss over 21309007 tokens: 2.986, valid loss/error: 2.773 31.89
Average loss over 21271454 tokens: 2.994, valid loss/error: 2.773 31.99
Average loss over 21251066 tokens: 3.000, valid loss/error: 2.772 31.98
Average loss over 21187644 tokens: 2.997, valid loss/error: 2.773 31.91
Average loss over 21327023 tokens: 3.009, valid loss/error: 2.770 31.91
Average loss over 21307746 tokens: 3.013, valid loss/error: 2.772 31.89
Average loss over 11497562 tokens: 3.027
Epoch: 6, train loss: 3.002, valid loss/error: 2.774 31.98
Average loss over 21261657 tokens: 2.991, valid loss/error: 2.773 31.86
New best model saved
Average loss over 21198415 tokens: 2.989, valid loss/error: 2.775 31.96
Average loss over 21291412 tokens: 3.003, valid loss/error: 2.774 32.00
Average loss over 21287599 tokens: 2.999, valid loss/error: 2.768 31.77
New best model saved
Average loss over 21339678 tokens: 3.003, valid loss/error: 2.770 31.93
Average loss over 21279018 tokens: 3.006, valid loss/error: 2.775 31.94
Average loss over 11493723 tokens: 3.015
Epoch: 7, train loss: 3.000, valid loss/error: 2.772 31.88
Average loss over 21265040 tokens: 2.998, valid loss/error: 2.773 31.96
Average loss over 21258650 tokens: 2.985, valid loss/error: 2.775 31.86
Average loss over 21325033 tokens: 2.992, valid loss/error: 2.765 31.82
New best model saved
Average loss over 21287653 tokens: 2.996, valid loss/error: 2.768 31.93
Average loss over 21293991 tokens: 3.002, valid loss/error: 2.771 31.80
Average loss over 21277797 tokens: 3.021, valid loss/error: 2.768 31.91
Average loss over 11443338 tokens: 2.987
Epoch: 8, train loss: 2.998, valid loss/error: 2.764 31.83
New best model saved
Average loss over 21292954 tokens: 2.987, valid loss/error: 2.772 31.90
Average loss over 21310282 tokens: 2.993, valid loss/error: 2.773 31.91
Average loss over 21253288 tokens: 3.006, valid loss/error: 2.771 31.86
Average loss over 21202465 tokens: 2.994, valid loss/error: 2.769 31.83
Average loss over 21342961 tokens: 2.997, valid loss/error: 2.770 31.82
Average loss over 21255357 tokens: 2.999, valid loss/error: 2.769 31.85
Average loss over 11494195 tokens: 3.000
Epoch: 9, train loss: 2.996, valid loss/error: 2.769 31.90
Average loss over 21236151 tokens: 2.976, valid loss/error: 2.772 31.88
Average loss over 21258775 tokens: 2.995, valid loss/error: 2.776 31.97
Average loss over 21250522 tokens: 3.005, valid loss/error: 2.770 31.91
Average loss over 21283318 tokens: 2.995, valid loss/error: 2.769 31.81
Average loss over 21321522 tokens: 2.994, valid loss/error: 2.772 31.86
Average loss over 21320783 tokens: 3.012, valid loss/error: 2.763 31.81
New best model saved
Average loss over 11480431 tokens: 2.978
Epoch: 10, train loss: 2.995, valid loss/error: 2.769 31.82
Average loss over 21265807 tokens: 2.980, valid loss/error: 2.769 31.85
Average loss over 21241101 tokens: 2.980, valid loss/error: 2.774 31.78
Average loss over 21297489 tokens: 2.989, valid loss/error: 2.768 31.80
Average loss over 21356698 tokens: 3.007, valid loss/error: 2.767 31.81
Average loss over 21287726 tokens: 3.001, valid loss/error: 2.773 32.03
Average loss over 21253062 tokens: 2.990, valid loss/error: 2.766 31.88
Average loss over 11449619 tokens: 3.016
Epoch: 11, train loss: 2.993, valid loss/error: 2.762 31.78
New best model saved
Average loss over 21261708 tokens: 2.981, valid loss/error: 2.770 31.96
Average loss over 21314176 tokens: 2.990, valid loss/error: 2.766 31.87
Average loss over 21251199 tokens: 2.987, valid loss/error: 2.768 31.82
Average loss over 21302182 tokens: 2.998, valid loss/error: 2.762 31.88
Average loss over 21326749 tokens: 3.000, valid loss/error: 2.764 31.79
Average loss over 21273214 tokens: 2.999, valid loss/error: 2.770 31.86
Average loss over 11422274 tokens: 2.981
Epoch: 12, train loss: 2.991, valid loss/error: 2.766 31.89
Average loss over 21277897 tokens: 2.997, valid loss/error: 2.769 31.84
Average loss over 21318526 tokens: 2.973, valid loss/error: 2.769 31.76
New best model saved
Average loss over 21281817 tokens: 2.986, valid loss/error: 2.769 31.83
Average loss over 21241299 tokens: 3.005, valid loss/error: 2.761 31.79
New best model saved
Average loss over 21235092 tokens: 2.990, valid loss/error: 2.764 31.78
Average loss over 21282289 tokens: 2.983, valid loss/error: 2.763 31.89
Average loss over 11514582 tokens: 3.003
Epoch: 13, train loss: 2.990, valid loss/error: 2.768 31.80
Average loss over 21280309 tokens: 2.987, valid loss/error: 2.765 31.83
Average loss over 21199318 tokens: 2.970, valid loss/error: 2.766 31.81
Average loss over 21253076 tokens: 2.981, valid loss/error: 2.770 31.75
New best model saved
Average loss over 21336559 tokens: 2.986, valid loss/error: 2.767 31.77
Average loss over 21291430 tokens: 2.990, valid loss/error: 2.763 31.77
Average loss over 21235017 tokens: 3.003, valid loss/error: 2.764 31.74
New best model saved
Average loss over 11555793 tokens: 3.017
Epoch: 14, train loss: 2.989, valid loss/error: 2.763 31.76
Average loss over 21227014 tokens: 2.961, valid loss/error: 2.764 31.78
Average loss over 21283879 tokens: 2.987, valid loss/error: 2.768 31.84
Average loss over 21309771 tokens: 2.994, valid loss/error: 2.764 31.80
Average loss over 21324204 tokens: 2.997, valid loss/error: 2.768 31.80
Average loss over 21247472 tokens: 3.003, valid loss/error: 2.766 31.73
New best model saved
Average loss over 21268521 tokens: 2.980, valid loss/error: 2.768 31.84
Average loss over 11490641 tokens: 2.996
Epoch: 15, train loss: 2.988, valid loss/error: 2.761 31.76
New best model saved
Average loss over 21293185 tokens: 2.995, valid loss/error: 2.771 31.81
Average loss over 21292390 tokens: 2.968, valid loss/error: 2.761 31.81
New best model saved
Average loss over 21290687 tokens: 2.964, valid loss/error: 2.769 31.79
Average loss over 21251555 tokens: 3.001, valid loss/error: 2.762 31.65
New best model saved
Average loss over 21260237 tokens: 2.976, valid loss/error: 2.768 31.86
Average loss over 21244176 tokens: 3.000, valid loss/error: 2.760 31.78
New best model saved
Average loss over 11519272 tokens: 3.012
Epoch: 16, train loss: 2.986, valid loss/error: 2.769 31.76
Average loss over 21287781 tokens: 2.969, valid loss/error: 2.764 31.83
Average loss over 21354363 tokens: 2.984, valid loss/error: 2.766 31.81
Average loss over 21260857 tokens: 2.980, valid loss/error: 2.768 31.74
Average loss over 21221924 tokens: 2.979, valid loss/error: 2.761 31.69
Average loss over 21303031 tokens: 2.991, valid loss/error: 2.766 31.71
Average loss over 21211087 tokens: 2.994, valid loss/error: 2.763 31.77
Average loss over 11512459 tokens: 3.009
Epoch: 17, train loss: 2.985, valid loss/error: 2.762 31.68
Average loss over 21263062 tokens: 2.975, valid loss/error: 2.766 31.83
Average loss over 21266910 tokens: 2.973, valid loss/error: 2.759 31.73
New best model saved
Average loss over 21270478 tokens: 2.984, valid loss/error: 2.761 31.76
Average loss over 21183193 tokens: 2.976, valid loss/error: 2.760 31.66
Average loss over 21343084 tokens: 3.004, valid loss/error: 2.759 31.68
Average loss over 21309849 tokens: 2.980, valid loss/error: 2.761 31.83
Average loss over 11514926 tokens: 3.004
Epoch: 18, train loss: 2.984, valid loss/error: 2.762 31.70
Average loss over 21283876 tokens: 2.967, valid loss/error: 2.762 31.78
Average loss over 21213794 tokens: 2.976, valid loss/error: 2.763 31.79
Average loss over 21288307 tokens: 2.986, valid loss/error: 2.767 31.88
Average loss over 21305843 tokens: 2.991, valid loss/error: 2.762 31.79
Average loss over 21347329 tokens: 3.001, valid loss/error: 2.757 31.72
New best model saved
Average loss over 21220079 tokens: 2.985, valid loss/error: 2.766 31.75
Average loss over 11492274 tokens: 2.987
Epoch: 19, train loss: 2.985, valid loss/error: 2.763 31.74
Average loss over 21274768 tokens: 2.971, valid loss/error: 2.760 31.78
Average loss over 21291315 tokens: 2.979, valid loss/error: 2.767 31.85
Average loss over 12771487 tokens: 2.973
Epoch: 20, train loss: 2.975, valid loss/error: 2.761 31.71
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.773 31.95
Average loss over 10539209 tokens: 3.325, valid loss/error: 2.790 32.36
Average loss over 10568350 tokens: 3.346, valid loss/error: 2.793 32.37
Average loss over 10569308 tokens: 3.338, valid loss/error: 2.790 32.33
Average loss over 10538491 tokens: 3.320, valid loss/error: 2.791 32.37
Average loss over 4549813 tokens: 3.352
Epoch: 1, train loss: 3.334, valid loss/error: 2.794 32.48
Average loss over 10537237 tokens: 3.289, valid loss/error: 2.795 32.38
Average loss over 10559262 tokens: 3.301, valid loss/error: 2.800 32.55
Average loss over 10549136 tokens: 3.322, valid loss/error: 2.800 32.45
Average loss over 10584851 tokens: 3.328, valid loss/error: 2.798 32.50
Average loss over 4534685 tokens: 3.333
Epoch: 2, train loss: 3.312, valid loss/error: 2.802 32.55
Average loss over 10520020 tokens: 3.288, valid loss/error: 2.806 32.59
Average loss over 10562429 tokens: 3.297, valid loss/error: 2.806 32.52
Average loss over 10578986 tokens: 3.302, valid loss/error: 2.807 32.66
Average loss over 10571442 tokens: 3.302, valid loss/error: 2.804 32.51
Average loss over 4532294 tokens: 3.302
Epoch: 3, train loss: 3.298, valid loss/error: 2.806 32.63
Average loss over 10558405 tokens: 3.267, valid loss/error: 2.811 32.64
Average loss over 10587270 tokens: 3.297, valid loss/error: 2.815 32.79
Average loss over 10533659 tokens: 3.287, valid loss/error: 2.813 32.68
Average loss over 10541936 tokens: 3.294, valid loss/error: 2.810 32.65
Average loss over 4543901 tokens: 3.292
Epoch: 4, train loss: 3.287, valid loss/error: 2.810 32.57
Average loss over 10540185 tokens: 3.265, valid loss/error: 2.815 32.78
Average loss over 10554966 tokens: 3.267, valid loss/error: 2.822 32.82
Average loss over 10605620 tokens: 3.293, valid loss/error: 2.817 32.63
Average loss over 10551693 tokens: 3.280, valid loss/error: 2.817 32.64
Average loss over 4512707 tokens: 3.290
Epoch: 5, train loss: 3.277, valid loss/error: 2.818 32.68
Average loss over 10552274 tokens: 3.273, valid loss/error: 2.821 32.79
Average loss over 10579994 tokens: 3.236, valid loss/error: 2.825 32.86
Average loss over 10553794 tokens: 3.292, valid loss/error: 2.822 32.69
Average loss over 10546277 tokens: 3.268, valid loss/error: 2.825 32.87
Average loss over 4532832 tokens: 3.293
Epoch: 6, train loss: 3.270, valid loss/error: 2.824 32.75
Average loss over 10550413 tokens: 3.250, valid loss/error: 2.825 32.77
Average loss over 10564421 tokens: 3.266, valid loss/error: 2.828 32.70
Average loss over 10570590 tokens: 3.251, valid loss/error: 2.824 32.81
Average loss over 10539538 tokens: 3.269, valid loss/error: 2.829 32.86
Average loss over 4540209 tokens: 3.301
Epoch: 7, train loss: 3.263, valid loss/error: 2.828 32.84
Average loss over 10556606 tokens: 3.250, valid loss/error: 2.831 32.78
Average loss over 10562438 tokens: 3.238, valid loss/error: 2.833 32.99
Average loss over 10528533 tokens: 3.273, valid loss/error: 2.830 32.84
Average loss over 10594415 tokens: 3.263, valid loss/error: 2.830 32.92
Average loss over 4523179 tokens: 3.261
Epoch: 8, train loss: 3.257, valid loss/error: 2.831 32.90
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.001, Dev Loss/Error: 2.773 31.95
Average loss over 10539209 tokens: 3.606, valid loss/error: 3.015 36.07
Average loss over 10568350 tokens: 3.685, valid loss/error: 3.037 36.45
Average loss over 10569308 tokens: 3.695, valid loss/error: 3.063 36.73
Average loss over 10538491 tokens: 3.683, valid loss/error: 3.060 36.76
Average loss over 4549813 tokens: 3.719
Epoch: 1, train loss: 3.672, valid loss/error: 3.073 37.02
Average loss over 10537237 tokens: 3.629, valid loss/error: 3.074 36.90
Average loss over 10559262 tokens: 3.658, valid loss/error: 3.085 37.20
Average loss over 10549136 tokens: 3.685, valid loss/error: 3.079 37.07
Average loss over 10584851 tokens: 3.692, valid loss/error: 3.075 36.78
Average loss over 4534685 tokens: 3.695
Epoch: 2, train loss: 3.669, valid loss/error: 3.082 37.14
Average loss over 10520020 tokens: 3.625, valid loss/error: 3.088 37.16
Average loss over 10562429 tokens: 3.647, valid loss/error: 3.086 37.23
Average loss over 10578986 tokens: 3.657, valid loss/error: 3.087 36.99

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_directly/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.751 31.56
Average loss over 10539209 tokens: 3.284, valid loss/error: 2.773 32.07
Average loss over 10568350 tokens: 3.306, valid loss/error: 2.778 32.12
Average loss over 10569308 tokens: 3.299, valid loss/error: 2.771 32.09
Average loss over 10538491 tokens: 3.283, valid loss/error: 2.774 32.10
Average loss over 4549813 tokens: 3.314
Epoch: 1, train loss: 3.295, valid loss/error: 2.776 32.15
Average loss over 10537237 tokens: 3.251, valid loss/error: 2.778 32.13
Average loss over 10559262 tokens: 3.263, valid loss/error: 2.783 32.26
Average loss over 10549136 tokens: 3.285, valid loss/error: 2.783 32.22
Average loss over 10584851 tokens: 3.292, valid loss/error: 2.779 32.25
Average loss over 4534685 tokens: 3.297
Epoch: 2, train loss: 3.275, valid loss/error: 2.784 32.24
Average loss over 10520020 tokens: 3.251, valid loss/error: 2.789 32.29
Average loss over 10562429 tokens: 3.262, valid loss/error: 2.788 32.24
Average loss over 10578986 tokens: 3.267, valid loss/error: 2.791 32.39
Average loss over 10571442 tokens: 3.268, valid loss/error: 2.787 32.36
Average loss over 4532294 tokens: 3.268
Epoch: 3, train loss: 3.263, valid loss/error: 2.789 32.36
Average loss over 10558405 tokens: 3.232, valid loss/error: 2.796 32.52
Average loss over 10587270 tokens: 3.263, valid loss/error: 2.798 32.52
Average loss over 10533659 tokens: 3.253, valid loss/error: 2.798 32.44
Average loss over 10541936 tokens: 3.261, valid loss/error: 2.797 32.45
Average loss over 4543901 tokens: 3.258
Epoch: 4, train loss: 3.253, valid loss/error: 2.796 32.32
Average loss over 10540185 tokens: 3.232, valid loss/error: 2.800 32.37
Average loss over 10554966 tokens: 3.234, valid loss/error: 2.810 32.66
Average loss over 10605620 tokens: 3.260, valid loss/error: 2.803 32.40
Average loss over 10551693 tokens: 3.248, valid loss/error: 2.802 32.45
Average loss over 4512707 tokens: 3.258
Epoch: 5, train loss: 3.245, valid loss/error: 2.802 32.39
Average loss over 10552274 tokens: 3.240, valid loss/error: 2.807 32.53
Average loss over 10579994 tokens: 3.205, valid loss/error: 2.811 32.56
Average loss over 10553794 tokens: 3.260, valid loss/error: 2.807 32.46
Average loss over 10546277 tokens: 3.237, valid loss/error: 2.812 32.70
Average loss over 4532832 tokens: 3.263
Epoch: 6, train loss: 3.238, valid loss/error: 2.811 32.55
Average loss over 10550413 tokens: 3.219, valid loss/error: 2.812 32.60
Average loss over 10564421 tokens: 3.236, valid loss/error: 2.815 32.49
Average loss over 10570590 tokens: 3.220, valid loss/error: 2.810 32.56
Average loss over 10539538 tokens: 3.239, valid loss/error: 2.816 32.69
Average loss over 4540209 tokens: 3.271
Epoch: 7, train loss: 3.233, valid loss/error: 2.814 32.63
Average loss over 10556606 tokens: 3.220, valid loss/error: 2.818 32.65
Average loss over 10562438 tokens: 3.208, valid loss/error: 2.820 32.76
Average loss over 10528533 tokens: 3.244, valid loss/error: 2.816 32.66
Average loss over 10594415 tokens: 3.235, valid loss/error: 2.815 32.63
Average loss over 4523179 tokens: 3.233
Epoch: 8, train loss: 3.227, valid loss/error: 2.817 32.73
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.773 31.94
Average loss over 21182358 tokens: 2.997, valid loss/error: 2.780 32.06
Average loss over 21251648 tokens: 3.018, valid loss/error: 2.781 32.01
Average loss over 21278497 tokens: 3.016, valid loss/error: 2.780 32.09
Average loss over 21314277 tokens: 3.017, valid loss/error: 2.776 32.03
Average loss over 21317447 tokens: 3.021, valid loss/error: 2.775 31.95
Average loss over 21326830 tokens: 3.024, valid loss/error: 2.776 32.04
Average loss over 11480445 tokens: 3.017
Epoch: 1, train loss: 3.016, valid loss/error: 2.777 32.01
Average loss over 21259795 tokens: 3.014, valid loss/error: 2.781 32.11
Average loss over 21255327 tokens: 3.022, valid loss/error: 2.778 31.98
Average loss over 21330787 tokens: 3.007, valid loss/error: 2.779 31.98
Average loss over 21313947 tokens: 3.020, valid loss/error: 2.777 31.92
New best model saved
Average loss over 21229896 tokens: 3.007, valid loss/error: 2.776 32.00
Average loss over 21303634 tokens: 3.008, valid loss/error: 2.778 32.04
Average loss over 11458116 tokens: 3.002
Epoch: 2, train loss: 3.012, valid loss/error: 2.771 32.01
New best model saved
Average loss over 21258912 tokens: 2.988, valid loss/error: 2.779 31.95
Average loss over 21292368 tokens: 3.006, valid loss/error: 2.775 31.91
New best model saved
Average loss over 21252344 tokens: 3.012, valid loss/error: 2.773 31.99
Average loss over 21257050 tokens: 3.016, valid loss/error: 2.776 31.92
Average loss over 21299809 tokens: 3.033, valid loss/error: 2.776 31.88
New best model saved
Average loss over 21297970 tokens: 3.008, valid loss/error: 2.774 31.92
Average loss over 11493049 tokens: 2.994
Epoch: 3, train loss: 3.009, valid loss/error: 2.773 32.00
Average loss over 21253646 tokens: 3.007, valid loss/error: 2.778 31.99
Average loss over 21269262 tokens: 3.010, valid loss/error: 2.772 32.00
Average loss over 21230361 tokens: 2.994, valid loss/error: 2.774 32.06
Average loss over 21286729 tokens: 3.015, valid loss/error: 2.779 32.03
Average loss over 21295205 tokens: 2.998, valid loss/error: 2.775 31.93
Average loss over 21271236 tokens: 3.010, valid loss/error: 2.776 32.08
Average loss over 11545063 tokens: 3.017
Epoch: 4, train loss: 3.006, valid loss/error: 2.776 32.00
Average loss over 21183266 tokens: 2.970, valid loss/error: 2.774 31.94
Average loss over 21275751 tokens: 3.001, valid loss/error: 2.776 32.03
Average loss over 21287960 tokens: 3.003, valid loss/error: 2.779 32.01
Average loss over 21270624 tokens: 3.007, valid loss/error: 2.778 32.00
Average loss over 21393630 tokens: 3.017, valid loss/error: 2.769 31.90
New best model saved
Average loss over 21272639 tokens: 3.016, valid loss/error: 2.770 31.91
Average loss over 11467632 tokens: 3.022
Epoch: 5, train loss: 3.004, valid loss/error: 2.773 31.93
Average loss over 21309007 tokens: 2.986, valid loss/error: 2.773 31.89
Average loss over 21271454 tokens: 2.994, valid loss/error: 2.773 31.99
Average loss over 21251066 tokens: 3.000, valid loss/error: 2.772 31.98
Average loss over 21187644 tokens: 2.997, valid loss/error: 2.773 31.91
Average loss over 21327023 tokens: 3.009, valid loss/error: 2.770 31.91
Average loss over 21307746 tokens: 3.013, valid loss/error: 2.772 31.89
Average loss over 11497562 tokens: 3.027
Epoch: 6, train loss: 3.002, valid loss/error: 2.774 31.98
Average loss over 21261657 tokens: 2.991, valid loss/error: 2.773 31.86
New best model saved
Average loss over 21198415 tokens: 2.989, valid loss/error: 2.775 31.96
Average loss over 21291412 tokens: 3.003, valid loss/error: 2.774 32.00
Average loss over 21287599 tokens: 2.999, valid loss/error: 2.768 31.77
New best model saved
Average loss over 21339678 tokens: 3.003, valid loss/error: 2.770 31.93
Average loss over 21279018 tokens: 3.006, valid loss/error: 2.775 31.94
Average loss over 11493723 tokens: 3.015
Epoch: 7, train loss: 3.000, valid loss/error: 2.772 31.88
Average loss over 21265040 tokens: 2.998, valid loss/error: 2.773 31.96
Average loss over 21258650 tokens: 2.985, valid loss/error: 2.775 31.86
Average loss over 21325033 tokens: 2.992, valid loss/error: 2.765 31.82
New best model saved
Average loss over 21287653 tokens: 2.996, valid loss/error: 2.768 31.93
Average loss over 21293991 tokens: 3.002, valid loss/error: 2.771 31.80
Average loss over 21277797 tokens: 3.021, valid loss/error: 2.768 31.91
Average loss over 11443338 tokens: 2.987
Epoch: 8, train loss: 2.998, valid loss/error: 2.764 31.83
New best model saved
Average loss over 21292954 tokens: 2.987, valid loss/error: 2.772 31.90
Average loss over 21310282 tokens: 2.993, valid loss/error: 2.773 31.91
Average loss over 21253288 tokens: 3.006, valid loss/error: 2.771 31.86
Average loss over 21202465 tokens: 2.994, valid loss/error: 2.769 31.83
Average loss over 21342961 tokens: 2.997, valid loss/error: 2.770 31.82
Average loss over 21255357 tokens: 2.999, valid loss/error: 2.769 31.85
Average loss over 11494195 tokens: 3.000
Epoch: 9, train loss: 2.996, valid loss/error: 2.769 31.90
Average loss over 21236151 tokens: 2.976, valid loss/error: 2.772 31.88
Average loss over 21258775 tokens: 2.995, valid loss/error: 2.776 31.97
Average loss over 21250522 tokens: 3.005, valid loss/error: 2.770 31.91
Average loss over 21283318 tokens: 2.995, valid loss/error: 2.769 31.81
Average loss over 21321522 tokens: 2.994, valid loss/error: 2.772 31.86
Average loss over 21320783 tokens: 3.012, valid loss/error: 2.763 31.81
New best model saved
Average loss over 11480431 tokens: 2.978
Epoch: 10, train loss: 2.995, valid loss/error: 2.769 31.82
Average loss over 21265807 tokens: 2.980, valid loss/error: 2.769 31.85
Average loss over 21241101 tokens: 2.980, valid loss/error: 2.774 31.78
Average loss over 21297489 tokens: 2.989, valid loss/error: 2.768 31.80
Average loss over 21356698 tokens: 3.007, valid loss/error: 2.767 31.81
Average loss over 21287726 tokens: 3.001, valid loss/error: 2.773 32.03
Average loss over 21253062 tokens: 2.990, valid loss/error: 2.766 31.88
Average loss over 11449619 tokens: 3.016
Epoch: 11, train loss: 2.993, valid loss/error: 2.762 31.78
New best model saved
Average loss over 21261708 tokens: 2.981, valid loss/error: 2.770 31.96
Average loss over 21314176 tokens: 2.990, valid loss/error: 2.766 31.87
Average loss over 21251199 tokens: 2.987, valid loss/error: 2.768 31.82
Average loss over 21302182 tokens: 2.998, valid loss/error: 2.762 31.88
Average loss over 21326749 tokens: 3.000, valid loss/error: 2.764 31.79
Average loss over 21273214 tokens: 2.999, valid loss/error: 2.770 31.86
Average loss over 11422274 tokens: 2.981
Epoch: 12, train loss: 2.991, valid loss/error: 2.766 31.89
Average loss over 21277897 tokens: 2.997, valid loss/error: 2.769 31.84
Average loss over 21318526 tokens: 2.973, valid loss/error: 2.769 31.76
New best model saved
Average loss over 21281817 tokens: 2.986, valid loss/error: 2.769 31.83
Average loss over 21241299 tokens: 3.005, valid loss/error: 2.761 31.79
New best model saved
Average loss over 21235092 tokens: 2.990, valid loss/error: 2.764 31.78
Average loss over 21282289 tokens: 2.983, valid loss/error: 2.763 31.89
Average loss over 11514582 tokens: 3.003
Epoch: 13, train loss: 2.990, valid loss/error: 2.768 31.80
Average loss over 21280309 tokens: 2.987, valid loss/error: 2.765 31.83
Average loss over 21199318 tokens: 2.970, valid loss/error: 2.766 31.81
Average loss over 21253076 tokens: 2.981, valid loss/error: 2.770 31.75
New best model saved
Average loss over 21336559 tokens: 2.986, valid loss/error: 2.767 31.77
Average loss over 21291430 tokens: 2.990, valid loss/error: 2.763 31.77
Average loss over 21235017 tokens: 3.003, valid loss/error: 2.764 31.74
New best model saved
Average loss over 11555793 tokens: 3.017
Epoch: 14, train loss: 2.989, valid loss/error: 2.763 31.76
Average loss over 21227014 tokens: 2.961, valid loss/error: 2.764 31.78
Average loss over 21283879 tokens: 2.987, valid loss/error: 2.768 31.84
Average loss over 21309771 tokens: 2.994, valid loss/error: 2.764 31.80
Average loss over 21324204 tokens: 2.997, valid loss/error: 2.768 31.80
Average loss over 21247472 tokens: 3.003, valid loss/error: 2.766 31.73
New best model saved
Average loss over 21268521 tokens: 2.980, valid loss/error: 2.768 31.84
Average loss over 11490641 tokens: 2.996
Epoch: 15, train loss: 2.988, valid loss/error: 2.761 31.76
New best model saved
Average loss over 21293185 tokens: 2.995, valid loss/error: 2.771 31.81
Average loss over 21292390 tokens: 2.968, valid loss/error: 2.761 31.81
New best model saved
Average loss over 21290687 tokens: 2.964, valid loss/error: 2.769 31.79
Average loss over 21251555 tokens: 3.001, valid loss/error: 2.762 31.65
New best model saved
Average loss over 21260237 tokens: 2.976, valid loss/error: 2.768 31.86
Average loss over 21244176 tokens: 3.000, valid loss/error: 2.760 31.78
New best model saved
Average loss over 11519272 tokens: 3.012
Epoch: 16, train loss: 2.986, valid loss/error: 2.769 31.76
Average loss over 21287781 tokens: 2.969, valid loss/error: 2.764 31.83
Average loss over 21354363 tokens: 2.984, valid loss/error: 2.766 31.81
Average loss over 21260857 tokens: 2.980, valid loss/error: 2.768 31.74
Average loss over 21221924 tokens: 2.979, valid loss/error: 2.761 31.69
Average loss over 21303031 tokens: 2.991, valid loss/error: 2.766 31.71
Average loss over 21211087 tokens: 2.994, valid loss/error: 2.763 31.77
Average loss over 11512459 tokens: 3.009
Epoch: 17, train loss: 2.985, valid loss/error: 2.762 31.68
Average loss over 21263062 tokens: 2.975, valid loss/error: 2.766 31.83
Average loss over 21266910 tokens: 2.973, valid loss/error: 2.759 31.73
New best model saved
Average loss over 21270478 tokens: 2.984, valid loss/error: 2.761 31.76
Average loss over 21183193 tokens: 2.976, valid loss/error: 2.760 31.66
Average loss over 21343084 tokens: 3.004, valid loss/error: 2.759 31.68
Average loss over 21309849 tokens: 2.980, valid loss/error: 2.761 31.83
Average loss over 11514926 tokens: 3.004
Epoch: 18, train loss: 2.984, valid loss/error: 2.762 31.70
Average loss over 21283876 tokens: 2.967, valid loss/error: 2.762 31.78
Average loss over 21213794 tokens: 2.976, valid loss/error: 2.763 31.79
Average loss over 21288307 tokens: 2.986, valid loss/error: 2.767 31.88
Average loss over 21305843 tokens: 2.991, valid loss/error: 2.762 31.79
Average loss over 21347329 tokens: 3.001, valid loss/error: 2.757 31.72
New best model saved
Average loss over 21220079 tokens: 2.985, valid loss/error: 2.766 31.75
Average loss over 11492274 tokens: 2.987
Epoch: 19, train loss: 2.985, valid loss/error: 2.763 31.74
Average loss over 21274768 tokens: 2.971, valid loss/error: 2.760 31.78
Average loss over 21291315 tokens: 2.979, valid loss/error: 2.767 31.85
Average loss over 21326917 tokens: 2.985, valid loss/error: 2.763 31.73
Average loss over 21257120 tokens: 2.982, valid loss/error: 2.759 31.76
Average loss over 21294256 tokens: 2.985, valid loss/error: 2.761 31.73
Average loss over 21256620 tokens: 3.008, valid loss/error: 2.759 31.73
Average loss over 11450506 tokens: 3.008
Epoch: 20, train loss: 2.987, valid loss/error: 2.759 31.73
Average loss over 21305682 tokens: 2.989, valid loss/error: 2.763 31.75
Average loss over 21188081 tokens: 2.960, valid loss/error: 2.763 31.80
Average loss over 21295608 tokens: 3.005, valid loss/error: 2.763 31.73
Average loss over 21285324 tokens: 2.981, valid loss/error: 2.762 31.71
Average loss over 21321519 tokens: 2.997, valid loss/error: 2.759 31.79
Average loss over 21280844 tokens: 2.976, valid loss/error: 2.761 31.81
Average loss over 11474444 tokens: 3.002
Epoch: 21, train loss: 2.986, valid loss/error: 2.768 31.79
Average loss over 21199810 tokens: 2.976, valid loss/error: 2.760 31.75
Average loss over 21356291 tokens: 2.986, valid loss/error: 2.762 31.86
Average loss over 21286525 tokens: 2.982, valid loss/error: 2.763 31.80
Average loss over 21235877 tokens: 2.975, valid loss/error: 2.757 31.74
Average loss over 21243081 tokens: 2.985, valid loss/error: 2.758 31.76
Average loss over 21328339 tokens: 2.999, valid loss/error: 2.754 31.70
New best model saved
Average loss over 11501579 tokens: 2.999
Epoch: 22, train loss: 2.985, valid loss/error: 2.762 31.73
Average loss over 21289957 tokens: 2.970, valid loss/error: 2.760 31.71
Average loss over 21259164 tokens: 2.974, valid loss/error: 2.756 31.72
Average loss over 21294587 tokens: 2.974, valid loss/error: 2.759 31.81
Average loss over 21238074 tokens: 2.979, valid loss/error: 2.760 31.80
Average loss over 21322775 tokens: 2.998, valid loss/error: 2.767 31.90
Average loss over 21239706 tokens: 2.995, valid loss/error: 2.756 31.63
New best model saved
Average loss over 11507239 tokens: 3.009
Epoch: 23, train loss: 2.984, valid loss/error: 2.756 31.63
New best model saved
Average loss over 21316500 tokens: 2.959, valid loss/error: 2.759 31.72
Average loss over 21282281 tokens: 2.971, valid loss/error: 2.761 31.66
Average loss over 21218449 tokens: 2.998, valid loss/error: 2.761 31.67
Average loss over 21252797 tokens: 2.978, valid loss/error: 2.758 31.69
Average loss over 21345151 tokens: 2.994, valid loss/error: 2.756 31.68
Average loss over 21240975 tokens: 2.995, valid loss/error: 2.757 31.69
Average loss over 11495349 tokens: 2.987
Epoch: 24, train loss: 2.983, valid loss/error: 2.758 31.74
Average loss over 21273933 tokens: 2.977, valid loss/error: 2.754 31.65
Average loss over 21310635 tokens: 2.966, valid loss/error: 2.760 31.74
Average loss over 21206511 tokens: 2.981, valid loss/error: 2.758 31.67
Average loss over 21233462 tokens: 2.981, valid loss/error: 2.755 31.75
Average loss over 21357428 tokens: 2.991, valid loss/error: 2.758 31.74
Average loss over 21312694 tokens: 2.982, valid loss/error: 2.757 31.75
Average loss over 11456839 tokens: 3.009
Epoch: 25, train loss: 2.982, valid loss/error: 2.755 31.63
New best model saved
Average loss over 21297719 tokens: 2.980, valid loss/error: 2.760 31.60
New best model saved
Average loss over 21283931 tokens: 2.970, valid loss/error: 2.758 31.66
Average loss over 21258119 tokens: 2.968, valid loss/error: 2.754 31.66
New best model saved
Average loss over 21337340 tokens: 2.999, valid loss/error: 2.761 31.68
Average loss over 21220462 tokens: 2.992, valid loss/error: 2.757 31.61
Average loss over 21259986 tokens: 2.978, valid loss/error: 2.753 31.65
New best model saved
Average loss over 11493945 tokens: 2.981
Epoch: 26, train loss: 2.981, valid loss/error: 2.756 31.65
Average loss over 21355855 tokens: 2.975, valid loss/error: 2.758 31.66
Average loss over 21253541 tokens: 2.964, valid loss/error: 2.761 31.75
Average loss over 21261960 tokens: 2.971, valid loss/error: 2.755 31.57
New best model saved
Average loss over 21210581 tokens: 2.988, valid loss/error: 2.759 31.67
Average loss over 21298988 tokens: 2.986, valid loss/error: 2.757 31.63
Average loss over 21262491 tokens: 2.997, valid loss/error: 2.750 31.60
New best model saved
Average loss over 11508086 tokens: 2.979
Epoch: 27, train loss: 2.980, valid loss/error: 2.755 31.60
Average loss over 21245925 tokens: 2.980, valid loss/error: 2.749 31.57
New best model saved
Average loss over 21260976 tokens: 2.969, valid loss/error: 2.755 31.65
Average loss over 21334709 tokens: 2.971, valid loss/error: 2.758 31.67
Average loss over 21277888 tokens: 2.984, valid loss/error: 2.757 31.68
Average loss over 21280113 tokens: 3.001, valid loss/error: 2.756 31.63
Average loss over 21317520 tokens: 2.970, valid loss/error: 2.759 31.59
Average loss over 11434371 tokens: 2.978
Epoch: 28, train loss: 2.979, valid loss/error: 2.750 31.57
Average loss over 21307608 tokens: 2.954, valid loss/error: 2.756 31.65
Average loss over 21233769 tokens: 2.979, valid loss/error: 2.754 31.53
New best model saved
Average loss over 21267293 tokens: 2.982, valid loss/error: 2.755 31.57
Average loss over 21282803 tokens: 2.985, valid loss/error: 2.759 31.62
Average loss over 21239782 tokens: 2.977, valid loss/error: 2.756 31.57
Average loss over 21355569 tokens: 2.980, valid loss/error: 2.757 31.62
Average loss over 11464678 tokens: 3.002
Epoch: 29, train loss: 2.978, valid loss/error: 2.752 31.57
Average loss over 21295049 tokens: 2.972, valid loss/error: 2.756 31.59
Average loss over 21319022 tokens: 2.981, valid loss/error: 2.754 31.70
Average loss over 21257285 tokens: 2.972, valid loss/error: 2.757 31.60
Average loss over 21266070 tokens: 2.980, valid loss/error: 2.754 31.72
Average loss over 21272973 tokens: 2.984, valid loss/error: 2.755 31.57
Average loss over 21289148 tokens: 2.969, valid loss/error: 2.751 31.63
Average loss over 11451955 tokens: 2.991
Epoch: 30, train loss: 2.977, valid loss/error: 2.756 31.55
Average loss over 21320420 tokens: 2.959, valid loss/error: 2.755 31.61
Average loss over 21308677 tokens: 2.993, valid loss/error: 2.753 31.52
New best model saved
Average loss over 21207895 tokens: 2.981, valid loss/error: 2.753 31.60
Average loss over 21221391 tokens: 2.969, valid loss/error: 2.755 31.63
Average loss over 21303941 tokens: 2.984, valid loss/error: 2.752 31.60
Average loss over 21304618 tokens: 2.969, valid loss/error: 2.751 31.52
New best model saved
Average loss over 11484560 tokens: 2.982
Epoch: 31, train loss: 2.977, valid loss/error: 2.749 31.51
New best model saved
Average loss over 21235191 tokens: 2.968, valid loss/error: 2.759 31.64
Average loss over 21320537 tokens: 2.969, valid loss/error: 2.755 31.67
Average loss over 21194896 tokens: 2.974, valid loss/error: 2.754 31.61
Average loss over 21311756 tokens: 2.983, valid loss/error: 2.754 31.53
Average loss over 21283676 tokens: 2.980, valid loss/error: 2.752 31.57
Average loss over 21283806 tokens: 2.979, valid loss/error: 2.751 31.62
Average loss over 11521640 tokens: 2.979
Epoch: 32, train loss: 2.976, valid loss/error: 2.754 31.59
Average loss over 21297635 tokens: 2.961, valid loss/error: 2.752 31.62
Average loss over 21232288 tokens: 2.977, valid loss/error: 2.753 31.55
Average loss over 21322633 tokens: 2.978, valid loss/error: 2.759 31.55
Average loss over 21273019 tokens: 2.962, valid loss/error: 2.752 31.57
Average loss over 21296170 tokens: 2.984, valid loss/error: 2.755 31.61
Average loss over 21245970 tokens: 2.985, valid loss/error: 2.753 31.66
Average loss over 11483787 tokens: 2.978
Epoch: 33, train loss: 2.975, valid loss/error: 2.750 31.54
Average loss over 21271063 tokens: 2.966, valid loss/error: 2.756 31.65
Average loss over 21292255 tokens: 2.971, valid loss/error: 2.756 31.62
Average loss over 21338343 tokens: 2.970, valid loss/error: 2.752 31.58
Average loss over 21214130 tokens: 2.981, valid loss/error: 2.748 31.54
New best model saved
Average loss over 21188614 tokens: 2.960, valid loss/error: 2.749 31.59
Average loss over 21363506 tokens: 2.989, valid loss/error: 2.751 31.54
Average loss over 11483591 tokens: 2.986
Epoch: 34, train loss: 2.974, valid loss/error: 2.747 31.52
New best model saved
Average loss over 21247616 tokens: 2.968, valid loss/error: 2.750 31.53
Average loss over 21258253 tokens: 2.963, valid loss/error: 2.755 31.56
Average loss over 21303654 tokens: 2.975, valid loss/error: 2.752 31.55
Average loss over 21283326 tokens: 2.975, valid loss/error: 2.753 31.53
Average loss over 21273814 tokens: 2.972, valid loss/error: 2.743 31.62
New best model saved
Average loss over 21269827 tokens: 2.981, valid loss/error: 2.743 31.45
New best model saved
Average loss over 11515012 tokens: 2.987
Epoch: 35, train loss: 2.973, valid loss/error: 2.750 31.57
Average loss over 21316857 tokens: 2.969, valid loss/error: 2.752 31.53
Average loss over 21164269 tokens: 2.979, valid loss/error: 2.750 31.66
Average loss over 21247705 tokens: 2.956, valid loss/error: 2.751 31.49
Average loss over 21360310 tokens: 2.972, valid loss/error: 2.748 31.45
Average loss over 21280403 tokens: 2.985, valid loss/error: 2.746 31.50
Average loss over 21292431 tokens: 2.966, valid loss/error: 2.747 31.53
Average loss over 11489527 tokens: 2.987
Epoch: 36, train loss: 2.973, valid loss/error: 2.744 31.49
Average loss over 21321732 tokens: 2.960, valid loss/error: 2.751 31.57
Average loss over 21276096 tokens: 2.973, valid loss/error: 2.753 31.52
Average loss over 21286713 tokens: 2.969, valid loss/error: 2.749 31.55
Average loss over 21218289 tokens: 2.970, valid loss/error: 2.750 31.41
New best model saved
Average loss over 21297261 tokens: 2.984, valid loss/error: 2.754 31.49
Average loss over 21265265 tokens: 2.973, valid loss/error: 2.751 31.55
Average loss over 11486146 tokens: 2.977
Epoch: 37, train loss: 2.972, valid loss/error: 2.748 31.54
Average loss over 21277135 tokens: 2.954, valid loss/error: 2.752 31.52
Average loss over 21274093 tokens: 2.979, valid loss/error: 2.758 31.61
Average loss over 21279069 tokens: 2.972, valid loss/error: 2.748 31.44
Average loss over 21250595 tokens: 2.961, valid loss/error: 2.747 31.52
Average loss over 21311685 tokens: 2.993, valid loss/error: 2.751 31.48
Average loss over 21301583 tokens: 2.967, valid loss/error: 2.747 31.48
Average loss over 11457342 tokens: 2.974
Epoch: 38, train loss: 2.971, valid loss/error: 2.750 31.59
Average loss over 21176834 tokens: 2.946, valid loss/error: 2.751 31.52
Average loss over 21277339 tokens: 2.969, valid loss/error: 2.749 31.57
Average loss over 21309071 tokens: 2.970, valid loss/error: 2.749 31.49
Average loss over 21291585 tokens: 2.970, valid loss/error: 2.753 31.58
Average loss over 21320867 tokens: 2.981, valid loss/error: 2.748 31.49
Average loss over 21241666 tokens: 2.970, valid loss/error: 2.745 31.45
Average loss over 11534140 tokens: 3.003
Epoch: 39, train loss: 2.971, valid loss/error: 2.744 31.46
Average loss over 21216368 tokens: 2.934, valid loss/error: 2.746 31.46
Average loss over 21235797 tokens: 2.967, valid loss/error: 2.752 31.51
Average loss over 21302560 tokens: 2.974, valid loss/error: 2.746 31.53
Average loss over 21303235 tokens: 2.972, valid loss/error: 2.749 31.45
Average loss over 21333500 tokens: 2.984, valid loss/error: 2.750 31.46
Average loss over 21300198 tokens: 2.981, valid loss/error: 2.746 31.59
Average loss over 11459844 tokens: 2.983
Epoch: 40, train loss: 2.970, valid loss/error: 2.749 31.37
New best model saved
Average loss over 21315805 tokens: 2.968, valid loss/error: 2.749 31.46
Average loss over 21286477 tokens: 2.958, valid loss/error: 2.747 31.48
Average loss over 21227755 tokens: 2.960, valid loss/error: 2.750 31.48
Average loss over 21273744 tokens: 2.961, valid loss/error: 2.748 31.57
Average loss over 21254441 tokens: 2.984, valid loss/error: 2.752 31.50
Average loss over 21313670 tokens: 2.975, valid loss/error: 2.749 31.60
Average loss over 11479610 tokens: 2.985
Epoch: 41, train loss: 2.969, valid loss/error: 2.741 31.41
New best model saved
Average loss over 21233467 tokens: 2.964, valid loss/error: 2.752 31.50
Average loss over 21300004 tokens: 2.956, valid loss/error: 2.749 31.51
Average loss over 21239518 tokens: 2.980, valid loss/error: 2.749 31.50
Average loss over 21304880 tokens: 2.972, valid loss/error: 2.747 31.48
Average loss over 21336459 tokens: 2.968, valid loss/error: 2.749 31.47
Average loss over 21229164 tokens: 2.966, valid loss/error: 2.745 31.55
Average loss over 11508010 tokens: 2.979
Epoch: 42, train loss: 2.969, valid loss/error: 2.747 31.41
Average loss over 21230868 tokens: 2.945, valid loss/error: 2.751 31.52
Average loss over 21235873 tokens: 2.952, valid loss/error: 2.754 31.55
Average loss over 21247636 tokens: 2.962, valid loss/error: 2.749 31.44
Average loss over 21294472 tokens: 2.984, valid loss/error: 2.751 31.54
Average loss over 21304311 tokens: 2.975, valid loss/error: 2.750 31.48
Average loss over 21374753 tokens: 2.985, valid loss/error: 2.745 31.42
Average loss over 11463589 tokens: 2.974
Epoch: 43, train loss: 2.968, valid loss/error: 2.745 31.43
Average loss over 21303954 tokens: 2.965, valid loss/error: 2.748 31.42
Average loss over 21227879 tokens: 2.954, valid loss/error: 2.745 31.51
Average loss over 21282401 tokens: 2.962, valid loss/error: 2.746 31.43
Average loss over 21225153 tokens: 2.962, valid loss/error: 2.750 31.62
Average loss over 21355293 tokens: 2.980, valid loss/error: 2.746 31.50
Average loss over 21291736 tokens: 2.979, valid loss/error: 2.741 31.45
New best model saved
Average loss over 11465086 tokens: 2.969
Epoch: 44, train loss: 2.967, valid loss/error: 2.750 31.48
Average loss over 21298582 tokens: 2.952, valid loss/error: 2.749 31.46
Average loss over 21239583 tokens: 2.960, valid loss/error: 2.753 31.43
Average loss over 21274465 tokens: 2.971, valid loss/error: 2.750 31.50
Average loss over 21275646 tokens: 2.966, valid loss/error: 2.752 31.47
Average loss over 21322163 tokens: 2.968, valid loss/error: 2.753 31.57
Average loss over 21211728 tokens: 2.976, valid loss/error: 2.741 31.41
New best model saved
Average loss over 11529335 tokens: 2.981
Epoch: 45, train loss: 2.967, valid loss/error: 2.750 31.50
Average loss over 21233784 tokens: 2.969, valid loss/error: 2.747 31.41
Average loss over 21324854 tokens: 2.951, valid loss/error: 2.743 31.41
Average loss over 21330835 tokens: 2.968, valid loss/error: 2.741 31.42
Average loss over 21223526 tokens: 2.966, valid loss/error: 2.743 31.36
New best model saved
Average loss over 21227383 tokens: 2.974, valid loss/error: 2.746 31.57
Average loss over 21303366 tokens: 2.969, valid loss/error: 2.741 31.39
New best model saved
Average loss over 11507754 tokens: 2.967
Epoch: 46, train loss: 2.966, valid loss/error: 2.746 31.38
Average loss over 21225184 tokens: 2.943, valid loss/error: 2.748 31.50
Average loss over 21257656 tokens: 2.969, valid loss/error: 2.752 31.51
Average loss over 21300546 tokens: 2.956, valid loss/error: 2.743 31.42
Average loss over 21256886 tokens: 2.964, valid loss/error: 2.748 31.46
Average loss over 21307586 tokens: 2.968, valid loss/error: 2.744 31.36
Average loss over 21248971 tokens: 2.975, valid loss/error: 2.742 31.52
Average loss over 11554673 tokens: 3.000
Epoch: 47, train loss: 2.966, valid loss/error: 2.747 31.45
Average loss over 21307859 tokens: 2.963, valid loss/error: 2.747 31.45
Average loss over 21212856 tokens: 2.947, valid loss/error: 2.745 31.42
Average loss over 21273266 tokens: 2.967, valid loss/error: 2.750 31.47
Average loss over 21318650 tokens: 2.967, valid loss/error: 2.750 31.53
Average loss over 21246148 tokens: 2.952, valid loss/error: 2.741 31.34
New best model saved
Average loss over 21274086 tokens: 2.971, valid loss/error: 2.742 31.35
Average loss over 11518637 tokens: 3.009
Epoch: 48, train loss: 2.965, valid loss/error: 2.748 31.51
Average loss over 21281284 tokens: 2.960, valid loss/error: 2.748 31.53
Average loss over 21284215 tokens: 2.961, valid loss/error: 2.745 31.40
Average loss over 21246439 tokens: 2.964, valid loss/error: 2.742 31.43
Average loss over 21189620 tokens: 2.967, valid loss/error: 2.749 31.53
Average loss over 21373702 tokens: 2.956, valid loss/error: 2.742 31.38
Average loss over 21276926 tokens: 2.981, valid loss/error: 2.747 31.43
Average loss over 11499316 tokens: 2.960
Epoch: 49, train loss: 2.964, valid loss/error: 2.747 31.58
Average loss over 21254376 tokens: 2.938, valid loss/error: 2.751 31.39
Average loss over 21272711 tokens: 2.960, valid loss/error: 2.749 31.48
Average loss over 21326383 tokens: 2.968, valid loss/error: 2.740 31.40
New best model saved
Average loss over 21316981 tokens: 2.974, valid loss/error: 2.747 31.49
Average loss over 21228166 tokens: 2.973, valid loss/error: 2.747 31.49
Average loss over 21279528 tokens: 2.973, valid loss/error: 2.752 31.55
Average loss over 11473357 tokens: 2.961
Epoch: 50, train loss: 2.964, valid loss/error: 2.742 31.40
Average loss over 21328174 tokens: 2.959, valid loss/error: 2.750 31.46
Average loss over 21258932 tokens: 2.965, valid loss/error: 2.753 31.47
Average loss over 21221537 tokens: 2.946, valid loss/error: 2.748 31.34
Average loss over 21368503 tokens: 2.949, valid loss/error: 2.742 31.46
Average loss over 21258092 tokens: 2.963, valid loss/error: 2.749 31.44
Average loss over 21257630 tokens: 2.982, valid loss/error: 2.745 31.40
Average loss over 11458634 tokens: 2.996
Epoch: 51, train loss: 2.964, valid loss/error: 2.744 31.43
Average loss over 21276482 tokens: 2.950, valid loss/error: 2.748 31.42
Average loss over 21235413 tokens: 2.972, valid loss/error: 2.747 31.39
Average loss over 21263026 tokens: 2.960, valid loss/error: 2.744 31.48
Average loss over 21274583 tokens: 2.955, valid loss/error: 2.739 31.42
New best model saved
Average loss over 21271704 tokens: 2.974, valid loss/error: 2.746 31.45
Average loss over 21309089 tokens: 2.960, valid loss/error: 2.749 31.39
Average loss over 11521205 tokens: 2.974
Epoch: 52, train loss: 2.963, valid loss/error: 2.745 31.34
New best model saved
Average loss over 21300230 tokens: 2.951, valid loss/error: 2.739 31.36
New best model saved
Average loss over 21278645 tokens: 2.951, valid loss/error: 2.743 31.37
Average loss over 21338063 tokens: 2.969, valid loss/error: 2.744 31.51
Average loss over 21324605 tokens: 2.947, valid loss/error: 2.745 31.32
New best model saved
Average loss over 21248042 tokens: 2.974, valid loss/error: 2.746 31.40
Average loss over 21211593 tokens: 2.982, valid loss/error: 2.740 31.38
Average loss over 11450324 tokens: 2.964
Epoch: 53, train loss: 2.962, valid loss/error: 2.739 31.44
Average loss over 21328706 tokens: 2.951, valid loss/error: 2.744 31.50
Average loss over 21308233 tokens: 2.970, valid loss/error: 2.749 31.42
Average loss over 21271442 tokens: 2.970, valid loss/error: 2.743 31.32
Average loss over 21262084 tokens: 2.964, valid loss/error: 2.741 31.33
Average loss over 21208165 tokens: 2.956, valid loss/error: 2.740 31.35
Average loss over 21261622 tokens: 2.945, valid loss/error: 2.740 31.41
Average loss over 11511250 tokens: 2.990
Epoch: 54, train loss: 2.962, valid loss/error: 2.740 31.42
Average loss over 21245235 tokens: 2.947, valid loss/error: 2.746 31.38
Average loss over 21244887 tokens: 2.954, valid loss/error: 2.741 31.31
New best model saved
Average loss over 21279653 tokens: 2.967, valid loss/error: 2.740 31.40
Average loss over 21312600 tokens: 2.967, valid loss/error: 2.743 31.32
Average loss over 21240048 tokens: 2.960, valid loss/error: 2.744 31.43
Average loss over 21349590 tokens: 2.973, valid loss/error: 2.740 31.38
Average loss over 11479489 tokens: 2.964
Epoch: 55, train loss: 2.962, valid loss/error: 2.741 31.29
New best model saved
Average loss over 21207888 tokens: 2.949, valid loss/error: 2.741 31.36
Average loss over 21368690 tokens: 2.957, valid loss/error: 2.742 31.37
Average loss over 21260822 tokens: 2.952, valid loss/error: 2.744 31.41
Average loss over 21313316 tokens: 2.956, valid loss/error: 2.739 31.32
Average loss over 21251228 tokens: 2.961, valid loss/error: 2.742 31.44
Average loss over 21335887 tokens: 2.987, valid loss/error: 2.740 31.29
New best model saved
Average loss over 11413671 tokens: 2.967
Epoch: 56, train loss: 2.961, valid loss/error: 2.741 31.38
Average loss over 21287638 tokens: 2.944, valid loss/error: 2.744 31.39
Average loss over 21272670 tokens: 2.951, valid loss/error: 2.742 31.43
Average loss over 21317334 tokens: 2.970, valid loss/error: 2.746 31.35
Average loss over 21224229 tokens: 2.962, valid loss/error: 2.738 31.32
New best model saved
Average loss over 21314695 tokens: 2.977, valid loss/error: 2.741 31.37
Average loss over 21270422 tokens: 2.968, valid loss/error: 2.742 31.42
Average loss over 11464514 tokens: 2.945
Epoch: 57, train loss: 2.961, valid loss/error: 2.745 31.46
Average loss over 21220230 tokens: 2.930, valid loss/error: 2.742 31.31
Average loss over 21320672 tokens: 2.957, valid loss/error: 2.746 31.34
Average loss over 21284130 tokens: 2.954, valid loss/error: 2.744 31.35
Average loss over 21304414 tokens: 2.974, valid loss/error: 2.743 31.34
Average loss over 21311890 tokens: 2.974, valid loss/error: 2.744 31.44
Average loss over 21207939 tokens: 2.962, valid loss/error: 2.744 31.38
Average loss over 11502227 tokens: 2.977
Epoch: 58, train loss: 2.960, valid loss/error: 2.742 31.24
New best model saved
Average loss over 21225993 tokens: 2.935, valid loss/error: 2.742 31.36
Average loss over 5057565 tokens: 2.989
Epoch: 59, train loss: 2.946, valid loss/error: 2.742 31.37
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/baseFT_finetuning/std_finetuning_1div3data/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 3.264 31.95
Average loss over 10519707 tokens: 2.584, valid loss/error: 1.917 32.25
New best model saved
Average loss over 10507990 tokens: 2.571, valid loss/error: 1.935 32.25
Average loss over 10521054 tokens: 2.564, valid loss/error: 2.037 32.21
Average loss over 10489363 tokens: 2.573, valid loss/error: 1.904 32.23
New best model saved
Average loss over 1574409 tokens: 2.552
Epoch: 1, train loss: 2.572, valid loss/error: 1.859 32.22
New best model saved
Average loss over 10515910 tokens: 2.529, valid loss/error: 1.819 32.23
New best model saved
Average loss over 10513663 tokens: 2.557, valid loss/error: 1.897 32.33
Average loss over 10509833 tokens: 2.538, valid loss/error: 1.930 32.29
Average loss over 10495049 tokens: 2.567, valid loss/error: 1.923 32.27
Average loss over 1566022 tokens: 2.551
Epoch: 2, train loss: 2.548, valid loss/error: 1.928 32.30
Average loss over 10514577 tokens: 2.515, valid loss/error: 1.949 32.23
Average loss over 10528644 tokens: 2.529, valid loss/error: 1.926 32.37
Average loss over 10479668 tokens: 2.541, valid loss/error: 1.844 32.36
Average loss over 10511291 tokens: 2.547, valid loss/error: 1.958 32.29
Average loss over 1559286 tokens: 2.516
Epoch: 3, train loss: 2.532, valid loss/error: 1.876 32.32
Average loss over 10516265 tokens: 2.514, valid loss/error: 1.929 32.32
Average loss over 10508167 tokens: 2.533, valid loss/error: 1.919 32.37
Average loss over 10513439 tokens: 2.515, valid loss/error: 1.863 32.31
Average loss over 10497777 tokens: 2.536, valid loss/error: 2.032 32.32
Average loss over 1578777 tokens: 2.494
Epoch: 4, train loss: 2.523, valid loss/error: 1.789 32.31
New best model saved
Average loss over 10485320 tokens: 2.510, valid loss/error: 1.954 32.16
Average loss over 10511463 tokens: 2.513, valid loss/error: 1.911 32.38
Average loss over 10496928 tokens: 2.515, valid loss/error: 1.850 32.30
Average loss over 10520507 tokens: 2.519, valid loss/error: 1.857 32.37
Average loss over 1575688 tokens: 2.507
Epoch: 5, train loss: 2.514, valid loss/error: 2.071 32.41
Average loss over 10491720 tokens: 2.500, valid loss/error: 2.029 32.46
Average loss over 10497837 tokens: 2.512, valid loss/error: 1.940 32.37
Average loss over 10512486 tokens: 2.509, valid loss/error: 1.904 32.50
Average loss over 10544952 tokens: 2.510, valid loss/error: 1.881 32.35
Average loss over 1578679 tokens: 2.532
Epoch: 6, train loss: 2.509, valid loss/error: 1.887 32.28
Average loss over 10483317 tokens: 2.486, valid loss/error: 1.872 32.39
Average loss over 10496966 tokens: 2.507, valid loss/error: 1.826 32.52
Average loss over 10534113 tokens: 2.515, valid loss/error: 2.018 32.37
Average loss over 10540179 tokens: 2.504, valid loss/error: 1.941 32.27
Average loss over 1560659 tokens: 2.509
Epoch: 7, train loss: 2.503, valid loss/error: 1.945 32.41
Average loss over 10537972 tokens: 2.488, valid loss/error: 1.926 32.41
Average loss over 10529333 tokens: 2.499, valid loss/error: 1.911 32.38
Average loss over 10512708 tokens: 2.500, valid loss/error: 1.981 32.36
Average loss over 10491465 tokens: 2.492, valid loss/error: 1.899 32.45
Average loss over 1574608 tokens: 2.521
Epoch: 8, train loss: 2.496, valid loss/error: 1.944 32.42
Average loss over 10512364 tokens: 2.482, valid loss/error: 2.013 32.44
Average loss over 10495269 tokens: 2.474, valid loss/error: 1.875 32.37
Average loss over 10513417 tokens: 2.496, valid loss/error: 1.899 32.28
Average loss over 10519416 tokens: 2.507, valid loss/error: 1.779 32.33
New best model saved
Average loss over 1602731 tokens: 2.514
Epoch: 9, train loss: 2.491, valid loss/error: 2.012 32.42
Average loss over 10483167 tokens: 2.461, valid loss/error: 1.930 32.34
Average loss over 10504288 tokens: 2.501, valid loss/error: 1.857 32.38
Average loss over 10540358 tokens: 2.491, valid loss/error: 1.947 32.44
Average loss over 10524296 tokens: 2.502, valid loss/error: 1.995 32.41
Average loss over 1582103 tokens: 2.495
Epoch: 10, train loss: 2.489, valid loss/error: 2.007 32.46
Average loss over 10498876 tokens: 2.473, valid loss/error: 2.000 32.38
Average loss over 10509674 tokens: 2.481, valid loss/error: 1.882 32.41
Average loss over 10519741 tokens: 2.476, valid loss/error: 1.865 32.44
Average loss over 10499996 tokens: 2.497, valid loss/error: 1.870 32.51
Average loss over 1581476 tokens: 2.491
Epoch: 11, train loss: 2.482, valid loss/error: 1.978 32.41
Average loss over 10529868 tokens: 2.479, valid loss/error: 1.753 32.35
New best model saved
Average loss over 10475136 tokens: 2.476, valid loss/error: 1.927 32.56
Average loss over 10505940 tokens: 2.484, valid loss/error: 1.809 32.52
Average loss over 10489162 tokens: 2.476, valid loss/error: 1.825 32.54
Average loss over 1572891 tokens: 2.487
Epoch: 12, train loss: 2.479, valid loss/error: 1.909 32.44
Average loss over 10491614 tokens: 2.463, valid loss/error: 1.964 32.48
Average loss over 10542501 tokens: 2.478, valid loss/error: 1.844 32.43
Average loss over 10502296 tokens: 2.482, valid loss/error: 1.927 32.35
Average loss over 10512995 tokens: 2.476, valid loss/error: 1.911 32.34
Average loss over 1569569 tokens: 2.469
Epoch: 13, train loss: 2.475, valid loss/error: 2.035 32.42
Average loss over 10489099 tokens: 2.462, valid loss/error: 2.001 32.43
Average loss over 10499903 tokens: 2.484, valid loss/error: 1.774 32.57
Average loss over 10516532 tokens: 2.473, valid loss/error: 2.064 32.46
Average loss over 10524429 tokens: 2.479, valid loss/error: 1.886 32.35
Average loss over 1578721 tokens: 2.487
Epoch: 14, train loss: 2.475, valid loss/error: 1.872 32.47
Average loss over 10491436 tokens: 2.455, valid loss/error: 1.838 32.43
Average loss over 10491552 tokens: 2.463, valid loss/error: 1.823 32.49
Average loss over 10506904 tokens: 2.475, valid loss/error: 1.874 32.51
Average loss over 10526315 tokens: 2.484, valid loss/error: 1.791 32.41
Average loss over 1584990 tokens: 2.479
Epoch: 15, train loss: 2.470, valid loss/error: 1.875 32.38
Average loss over 10480170 tokens: 2.455, valid loss/error: 1.759 32.47
Average loss over 10494144 tokens: 2.479, valid loss/error: 1.892 32.49
Average loss over 10495036 tokens: 2.453, valid loss/error: 1.965 32.41
Average loss over 10570451 tokens: 2.468, valid loss/error: 1.931 32.34
Average loss over 1568641 tokens: 2.420
Epoch: 16, train loss: 2.462, valid loss/error: 1.916 32.38
Average loss over 10481876 tokens: 2.447, valid loss/error: 1.863 32.42
Average loss over 10548855 tokens: 2.462, valid loss/error: 1.784 32.53
Average loss over 10544781 tokens: 2.463, valid loss/error: 1.843 32.45
Average loss over 10480319 tokens: 2.471, valid loss/error: 1.727 32.40
New best model saved
Average loss over 1590783 tokens: 2.484
Epoch: 17, train loss: 2.462, valid loss/error: 1.863 32.53
Average loss over 10548530 tokens: 2.456, valid loss/error: 1.982 32.48
Average loss over 10522255 tokens: 2.455, valid loss/error: 1.919 32.43
Average loss over 10489607 tokens: 2.471, valid loss/error: 1.770 32.43
Average loss over 10466418 tokens: 2.462, valid loss/error: 2.004 32.38
Average loss over 1581960 tokens: 2.458
Epoch: 18, train loss: 2.461, valid loss/error: 1.976 32.33
Average loss over 10492001 tokens: 2.434, valid loss/error: 1.884 32.40
Average loss over 10520093 tokens: 2.454, valid loss/error: 1.974 32.43
Average loss over 10481148 tokens: 2.467, valid loss/error: 1.924 32.37
Average loss over 10552859 tokens: 2.464, valid loss/error: 1.952 32.44
Average loss over 1560325 tokens: 2.454
Epoch: 19, train loss: 2.455, valid loss/error: 1.950 32.40
Average loss over 10484256 tokens: 2.445, valid loss/error: 1.907 32.48
Average loss over 10511536 tokens: 2.454, valid loss/error: 1.960 32.36
Average loss over 10475583 tokens: 2.454, valid loss/error: 2.012 32.50
Average loss over 10536644 tokens: 2.466, valid loss/error: 1.943 32.35
Average loss over 1587898 tokens: 2.464
Epoch: 20, train loss: 2.455, valid loss/error: 1.915 32.45
Average loss over 10537131 tokens: 2.430, valid loss/error: 1.968 32.37
Average loss over 10483038 tokens: 2.443, valid loss/error: 1.899 32.46
Average loss over 10501709 tokens: 2.458, valid loss/error: 2.068 32.39
Average loss over 10511826 tokens: 2.457, valid loss/error: 1.874 32.44
Average loss over 1573406 tokens: 2.473
Epoch: 21, train loss: 2.448, valid loss/error: 1.973 32.38
Average loss over 10479207 tokens: 2.431, valid loss/error: 1.827 32.41
Average loss over 10523519 tokens: 2.457, valid loss/error: 1.865 32.50
Average loss over 10526342 tokens: 2.445, valid loss/error: 1.930 32.44
Average loss over 10543402 tokens: 2.459, valid loss/error: 1.722 32.46
New best model saved
Average loss over 1570764 tokens: 2.439
Epoch: 22, train loss: 2.448, valid loss/error: 1.866 32.49
Average loss over 10458797 tokens: 2.431, valid loss/error: 1.871 32.44
Average loss over 10534853 tokens: 2.450, valid loss/error: 1.782 32.44
Average loss over 10534877 tokens: 2.445, valid loss/error: 1.776 32.38
Average loss over 10530385 tokens: 2.451, valid loss/error: 1.931 32.39
Average loss over 1570869 tokens: 2.454
Epoch: 23, train loss: 2.445, valid loss/error: 1.904 32.38
Average loss over 10533545 tokens: 2.432, valid loss/error: 1.956 32.48
Average loss over 10489218 tokens: 2.427, valid loss/error: 1.704 32.44
New best model saved
Average loss over 10483420 tokens: 2.451, valid loss/error: 1.909 32.48
Average loss over 10530400 tokens: 2.452, valid loss/error: 2.014 32.37
Average loss over 1587247 tokens: 2.464
Epoch: 24, train loss: 2.441, valid loss/error: 1.811 32.44
Average loss over 10488835 tokens: 2.427, valid loss/error: 2.013 32.44
Average loss over 10538313 tokens: 2.451, valid loss/error: 1.908 32.51
Average loss over 10511547 tokens: 2.438, valid loss/error: 1.862 32.54
Average loss over 10521230 tokens: 2.455, valid loss/error: 1.890 32.51
Average loss over 1593221 tokens: 2.425
Epoch: 25, train loss: 2.442, valid loss/error: 2.042 32.49
Average loss over 10472549 tokens: 2.408, valid loss/error: 1.875 32.54
Average loss over 10543432 tokens: 2.447, valid loss/error: 1.906 32.62
Average loss over 10497830 tokens: 2.452, valid loss/error: 1.999 32.57
Average loss over 10530072 tokens: 2.447, valid loss/error: 1.961 32.41
Average loss over 1584057 tokens: 2.453
Epoch: 26, train loss: 2.439, valid loss/error: 1.854 32.43
Average loss over 10496264 tokens: 2.418, valid loss/error: 1.836 32.63
Average loss over 10517379 tokens: 2.451, valid loss/error: 1.874 32.47
Average loss over 10498850 tokens: 2.442, valid loss/error: 1.833 32.46
Average loss over 10512423 tokens: 2.423, valid loss/error: 1.912 32.36
Average loss over 1606441 tokens: 2.460
Epoch: 27, train loss: 2.434, valid loss/error: 1.933 32.37
Average loss over 10544800 tokens: 2.429, valid loss/error: 1.964 32.42
Average loss over 10513650 tokens: 2.431, valid loss/error: 1.822 32.60
Average loss over 10495052 tokens: 2.434, valid loss/error: 1.832 32.46
Average loss over 10502633 tokens: 2.450, valid loss/error: 1.893 32.45
Average loss over 1575947 tokens: 2.468
Epoch: 28, train loss: 2.437, valid loss/error: 1.875 32.41
Average loss over 10500374 tokens: 2.414, valid loss/error: 1.902 32.53
Average loss over 10499729 tokens: 2.428, valid loss/error: 1.807 32.52
Average loss over 10470476 tokens: 2.440, valid loss/error: 1.861 32.54
Average loss over 10537817 tokens: 2.434, valid loss/error: 1.801 32.37
Average loss over 1588276 tokens: 2.469
Epoch: 29, train loss: 2.431, valid loss/error: 2.026 32.50
Average loss over 10508134 tokens: 2.404, valid loss/error: 1.933 32.48
Average loss over 10553839 tokens: 2.448, valid loss/error: 1.832 32.61
Average loss over 10424835 tokens: 2.423, valid loss/error: 1.985 32.39
Average loss over 10525991 tokens: 2.443, valid loss/error: 1.985 32.51
Average loss over 1574010 tokens: 2.440
Epoch: 30, train loss: 2.430, valid loss/error: 1.811 32.49
Average loss over 10496297 tokens: 2.401, valid loss/error: 1.925 32.51
Average loss over 10512864 tokens: 2.431, valid loss/error: 1.883 32.46
Average loss over 10518456 tokens: 2.422, valid loss/error: 1.957 32.48
Average loss over 10473478 tokens: 2.440, valid loss/error: 1.921 32.46
Average loss over 1579765 tokens: 2.424
Epoch: 31, train loss: 2.424, valid loss/error: 1.701 32.46
New best model saved
Average loss over 10508584 tokens: 2.416, valid loss/error: 1.881 32.50
Average loss over 10531041 tokens: 2.411, valid loss/error: 1.871 32.50
Average loss over 10499296 tokens: 2.426, valid loss/error: 1.773 32.41
Average loss over 10530909 tokens: 2.443, valid loss/error: 1.965 32.44
Average loss over 1583997 tokens: 2.451
Epoch: 32, train loss: 2.425, valid loss/error: 1.903 32.49
Average loss over 10472528 tokens: 2.402, valid loss/error: 1.661 32.41
New best model saved
Average loss over 10521728 tokens: 2.410, valid loss/error: 2.005 32.38
Average loss over 10495493 tokens: 2.436, valid loss/error: 1.758 32.41
Average loss over 10515898 tokens: 2.431, valid loss/error: 2.012 32.46
Average loss over 1590099 tokens: 2.466
Epoch: 33, train loss: 2.422, valid loss/error: 1.945 32.48
Average loss over 10522450 tokens: 2.406, valid loss/error: 1.955 32.53
Average loss over 10507058 tokens: 2.428, valid loss/error: 1.966 32.41
Average loss over 10511746 tokens: 2.433, valid loss/error: 1.827 32.41
Average loss over 10472556 tokens: 2.426, valid loss/error: 1.834 32.52
Average loss over 1575741 tokens: 2.413
Epoch: 34, train loss: 2.423, valid loss/error: 1.852 32.47
Average loss over 10525588 tokens: 2.405, valid loss/error: 2.023 32.58
Average loss over 10486755 tokens: 2.408, valid loss/error: 1.871 32.41
Average loss over 10516940 tokens: 2.411, valid loss/error: 1.924 32.44
Average loss over 10472612 tokens: 2.440, valid loss/error: 1.732 32.44
Average loss over 1585897 tokens: 2.446
Epoch: 35, train loss: 2.417, valid loss/error: 1.824 32.50
Average loss over 10496106 tokens: 2.408, valid loss/error: 2.007 32.53
Average loss over 10514237 tokens: 2.426, valid loss/error: 1.795 32.46
Average loss over 10532268 tokens: 2.415, valid loss/error: 1.868 32.44
Average loss over 10499822 tokens: 2.440, valid loss/error: 2.000 32.52
Average loss over 1585001 tokens: 2.435
Epoch: 36, train loss: 2.422, valid loss/error: 1.919 32.46
Average loss over 10487202 tokens: 2.399, valid loss/error: 1.810 32.53
Average loss over 10522683 tokens: 2.421, valid loss/error: 1.859 32.50
Average loss over 10495591 tokens: 2.409, valid loss/error: 1.884 32.41
Average loss over 10510663 tokens: 2.426, valid loss/error: 1.997 32.50
Average loss over 1573876 tokens: 2.433
Epoch: 37, train loss: 2.414, valid loss/error: 1.967 32.51
Average loss over 10476508 tokens: 2.396, valid loss/error: 1.919 32.49
Average loss over 10550886 tokens: 2.421, valid loss/error: 1.804 32.51
Average loss over 10537528 tokens: 2.431, valid loss/error: 1.816 32.51
Average loss over 10491343 tokens: 2.411, valid loss/error: 1.832 32.47
Average loss over 1593288 tokens: 2.452
Epoch: 38, train loss: 2.416, valid loss/error: 1.889 32.53
Average loss over 10515336 tokens: 2.393, valid loss/error: 1.837 32.47
Average loss over 10481984 tokens: 2.402, valid loss/error: 1.820 32.47
Average loss over 10511155 tokens: 2.423, valid loss/error: 2.016 32.54
Average loss over 10529791 tokens: 2.431, valid loss/error: 1.979 32.51
Average loss over 1569396 tokens: 2.421
Epoch: 39, train loss: 2.413, valid loss/error: 1.897 32.59
Average loss over 10479860 tokens: 2.402, valid loss/error: 1.834 32.38
Average loss over 10546057 tokens: 2.405, valid loss/error: 1.798 32.46
Average loss over 10546319 tokens: 2.412, valid loss/error: 1.917 32.51
Average loss over 10487590 tokens: 2.426, valid loss/error: 1.935 32.50
Average loss over 1590750 tokens: 2.415
Epoch: 40, train loss: 2.411, valid loss/error: 1.863 32.47
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/baseFT_finetuning/std_finetuning_1div3data/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -1.548 31.95
Average loss over 10519707 tokens: -0.443, valid loss/error: -1.676 32.52
New best model saved
Average loss over 10507990 tokens: -0.457, valid loss/error: -1.726 32.51
New best model saved
Average loss over 10521054 tokens: -0.461, valid loss/error: -1.554 32.46
Average loss over 10489363 tokens: -0.457, valid loss/error: -1.828 32.43
New best model saved
Average loss over 1574409 tokens: -0.461
Epoch: 1, train loss: -0.455, valid loss/error: -1.960 32.44
New best model saved
Average loss over 10515910 tokens: -0.481, valid loss/error: -1.997 32.51
New best model saved
Average loss over 10513663 tokens: -0.477, valid loss/error: -1.783 32.54
Average loss over 10509833 tokens: -0.473, valid loss/error: -1.724 32.56
Average loss over 10495049 tokens: -0.473, valid loss/error: -1.719 32.50
Average loss over 1566022 tokens: -0.468
Epoch: 2, train loss: -0.476, valid loss/error: -1.774 32.48
Average loss over 10514577 tokens: -0.489, valid loss/error: -1.737 32.54
Average loss over 10528644 tokens: -0.488, valid loss/error: -1.658 32.59
Average loss over 10479668 tokens: -0.486, valid loss/error: -1.934 32.53
Average loss over 10511291 tokens: -0.482, valid loss/error: -1.709 32.56
Average loss over 1559286 tokens: -0.500
Epoch: 3, train loss: -0.487, valid loss/error: -1.809 32.55
Average loss over 10516265 tokens: -0.506, valid loss/error: -1.626 32.55
Average loss over 10508167 tokens: -0.497, valid loss/error: -1.703 32.62
Average loss over 10513439 tokens: -0.495, valid loss/error: -1.610 32.63
Average loss over 10497777 tokens: -0.492, valid loss/error: -1.486 32.58
Average loss over 1578777 tokens: -0.481
Epoch: 4, train loss: -0.497, valid loss/error: -2.064 32.56
New best model saved
Average loss over 10485320 tokens: -0.516, valid loss/error: -1.933 32.51
Average loss over 10511463 tokens: -0.502, valid loss/error: -1.817 32.66
Average loss over 10496928 tokens: -0.499, valid loss/error: -1.999 32.55
Average loss over 10520507 tokens: -0.498, valid loss/error: -1.919 32.59
Average loss over 1575688 tokens: -0.505
Epoch: 5, train loss: -0.504, valid loss/error: -1.593 32.65
Average loss over 10491720 tokens: -0.522, valid loss/error: -1.799 32.64
Average loss over 10497837 tokens: -0.507, valid loss/error: -1.801 32.66
Average loss over 10512486 tokens: -0.506, valid loss/error: -1.762 32.60
Average loss over 10544952 tokens: -0.501, valid loss/error: -2.003 32.61
Average loss over 1578679 tokens: -0.506
Epoch: 6, train loss: -0.509, valid loss/error: -1.968 32.56
Average loss over 10483317 tokens: -0.520, valid loss/error: -1.827 32.55
Average loss over 10496966 tokens: -0.519, valid loss/error: -1.878 32.71
Average loss over 10534113 tokens: -0.513, valid loss/error: -1.581 32.63
Average loss over 10540179 tokens: -0.510, valid loss/error: -1.732 32.52
Average loss over 1560659 tokens: -0.511
Epoch: 7, train loss: -0.515, valid loss/error: -1.611 32.57
Average loss over 10537972 tokens: -0.530, valid loss/error: -1.851 32.62
Average loss over 10529333 tokens: -0.523, valid loss/error: -1.748 32.62
Average loss over 10512708 tokens: -0.513, valid loss/error: -1.694 32.60
Average loss over 10491465 tokens: -0.516, valid loss/error: -1.881 32.60
Average loss over 1574608 tokens: -0.531
Epoch: 8, train loss: -0.521, valid loss/error: -1.714 32.63
Average loss over 10512364 tokens: -0.531, valid loss/error: -1.611 32.65
Average loss over 10495269 tokens: -0.529, valid loss/error: -1.829 32.53
Average loss over 10513417 tokens: -0.521, valid loss/error: -1.695 32.48
Average loss over 10519416 tokens: -0.520, valid loss/error: -1.978 32.50
Average loss over 1602731 tokens: -0.525
Epoch: 9, train loss: -0.525, valid loss/error: -1.879 32.64
Average loss over 10483167 tokens: -0.535, valid loss/error: -1.849 32.64
Average loss over 10504288 tokens: -0.533, valid loss/error: -1.950 32.54
Average loss over 10540358 tokens: -0.529, valid loss/error: -1.558 32.63
Average loss over 10524296 tokens: -0.521, valid loss/error: -1.810 32.58
Average loss over 1582103 tokens: -0.521
Epoch: 10, train loss: -0.529, valid loss/error: -1.520 32.61
Average loss over 10498876 tokens: -0.543, valid loss/error: -1.790 32.55
Average loss over 10509674 tokens: -0.534, valid loss/error: -1.889 32.55
Average loss over 10519741 tokens: -0.531, valid loss/error: -1.670 32.60
Average loss over 10499996 tokens: -0.523, valid loss/error: -1.877 32.67
Average loss over 1581476 tokens: -0.522
Epoch: 11, train loss: -0.532, valid loss/error: -1.675 32.59
Average loss over 10529868 tokens: -0.547, valid loss/error: -1.915 32.55
Average loss over 10475136 tokens: -0.536, valid loss/error: -1.808 32.70
Average loss over 10505940 tokens: -0.535, valid loss/error: -1.978 32.63
Average loss over 10489162 tokens: -0.528, valid loss/error: -2.054 32.66
Average loss over 1572891 tokens: -0.534
Epoch: 12, train loss: -0.536, valid loss/error: -1.753 32.63
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/baseFT_finetuning/std_finetuning_1div3data/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -0.624 31.95
Average loss over 10519707 tokens: 0.214, valid loss/error: -1.050 32.44
New best model saved
Average loss over 10507990 tokens: 0.200, valid loss/error: -1.018 32.40
Average loss over 10521054 tokens: 0.195, valid loss/error: -0.899 32.40
Average loss over 10489363 tokens: 0.200, valid loss/error: -1.070 32.39
New best model saved
Average loss over 1574409 tokens: 0.193
Epoch: 1, train loss: 0.202, valid loss/error: -1.268 32.44
New best model saved
Average loss over 10515910 tokens: 0.168, valid loss/error: -1.320 32.47
New best model saved
Average loss over 10513663 tokens: 0.178, valid loss/error: -1.044 32.48
Average loss over 10509833 tokens: 0.179, valid loss/error: -1.110 32.50
Average loss over 10495049 tokens: 0.185, valid loss/error: -1.185 32.44
Average loss over 1566022 tokens: 0.186
Epoch: 2, train loss: 0.178, valid loss/error: -1.161 32.48
Average loss over 10514577 tokens: 0.157, valid loss/error: -1.085 32.47
Average loss over 10528644 tokens: 0.161, valid loss/error: -0.932 32.58
Average loss over 10479668 tokens: 0.167, valid loss/error: -1.083 32.53
Average loss over 10511291 tokens: 0.171, valid loss/error: -1.079 32.51
Average loss over 1559286 tokens: 0.148
Epoch: 3, train loss: 0.164, valid loss/error: -1.125 32.45
Average loss over 10516265 tokens: 0.141, valid loss/error: -0.963 32.41
Average loss over 10508167 tokens: 0.154, valid loss/error: -1.128 32.58
Average loss over 10513439 tokens: 0.150, valid loss/error: -1.130 32.56
Average loss over 10497777 tokens: 0.160, valid loss/error: -0.769 32.57
Average loss over 1578777 tokens: 0.160
Epoch: 4, train loss: 0.152, valid loss/error: -1.417 32.45
New best model saved
Average loss over 10485320 tokens: 0.132, valid loss/error: -1.208 32.41
Average loss over 10511463 tokens: 0.144, valid loss/error: -1.143 32.58
Average loss over 10496928 tokens: 0.148, valid loss/error: -1.338 32.53
Average loss over 10520507 tokens: 0.149, valid loss/error: -1.144 32.51
Average loss over 1575688 tokens: 0.143
Epoch: 5, train loss: 0.143, valid loss/error: -0.822 32.59
Average loss over 10491720 tokens: 0.123, valid loss/error: -0.934 32.54
Average loss over 10497837 tokens: 0.139, valid loss/error: -1.206 32.60
Average loss over 10512486 tokens: 0.138, valid loss/error: -1.159 32.56
Average loss over 10544952 tokens: 0.144, valid loss/error: -1.327 32.58
Average loss over 1578679 tokens: 0.146
Epoch: 6, train loss: 0.137, valid loss/error: -1.290 32.55
Average loss over 10483317 tokens: 0.121, valid loss/error: -1.211 32.45
Average loss over 10496966 tokens: 0.127, valid loss/error: -1.212 32.64
Average loss over 10534113 tokens: 0.134, valid loss/error: -0.872 32.53
Average loss over 10540179 tokens: 0.135, valid loss/error: -0.963 32.40
Average loss over 1560659 tokens: 0.137
Epoch: 7, train loss: 0.130, valid loss/error: -1.008 32.57
Average loss over 10537972 tokens: 0.113, valid loss/error: -1.133 32.53
Average loss over 10529333 tokens: 0.123, valid loss/error: -1.066 32.55
Average loss over 10512708 tokens: 0.131, valid loss/error: -1.024 32.52
Average loss over 10491465 tokens: 0.127, valid loss/error: -1.216 32.55
Average loss over 1574608 tokens: 0.119
Epoch: 8, train loss: 0.123, valid loss/error: -1.014 32.55
Average loss over 10512364 tokens: 0.111, valid loss/error: -0.964 32.63
Average loss over 10495269 tokens: 0.111, valid loss/error: -1.203 32.52
Average loss over 10513417 tokens: 0.124, valid loss/error: -1.138 32.44
Average loss over 10519416 tokens: 0.126, valid loss/error: -1.216 32.40
Average loss over 1602731 tokens: 0.122
Epoch: 9, train loss: 0.118, valid loss/error: -1.246 32.55
Average loss over 10483167 tokens: 0.102, valid loss/error: -1.198 32.51
Average loss over 10504288 tokens: 0.112, valid loss/error: -1.273 32.50
Average loss over 10540358 tokens: 0.115, valid loss/error: -0.956 32.56
Average loss over 10524296 tokens: 0.124, valid loss/error: -1.152 32.52
Average loss over 1582103 tokens: 0.122
Epoch: 10, train loss: 0.113, valid loss/error: -0.905 32.61
Average loss over 10498876 tokens: 0.097, valid loss/error: -1.106 32.47
Average loss over 10509674 tokens: 0.108, valid loss/error: -1.252 32.51
Average loss over 10519741 tokens: 0.108, valid loss/error: -1.073 32.51
Average loss over 10499996 tokens: 0.120, valid loss/error: -1.246 32.64
Average loss over 1581476 tokens: 0.120
Epoch: 11, train loss: 0.109, valid loss/error: -1.069 32.56
Average loss over 10529868 tokens: 0.096, valid loss/error: -1.337 32.48
Average loss over 10475136 tokens: 0.104, valid loss/error: -1.187 32.70
Average loss over 10505940 tokens: 0.107, valid loss/error: -1.386 32.54
Average loss over 10489162 tokens: 0.111, valid loss/error: -1.396 32.62
Average loss over 1572891 tokens: 0.112
Epoch: 12, train loss: 0.105, valid loss/error: -1.087 32.62
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune_sample.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.773 31.95
Average loss over 10519707 tokens: 3.252, valid loss/error: 2.782 32.19
Average loss over 10507990 tokens: 3.259, valid loss/error: 2.780 32.19
Average loss over 10521054 tokens: 3.252, valid loss/error: 2.779 32.13
Average loss over 10489363 tokens: 3.264, valid loss/error: 2.785 32.11
Average loss over 1574409 tokens: 3.239
Epoch: 1, train loss: 3.256, valid loss/error: 2.782 32.16
Average loss over 10515910 tokens: 3.222, valid loss/error: 2.785 32.12
Average loss over 10513663 tokens: 3.254, valid loss/error: 2.791 32.27
Average loss over 10509833 tokens: 3.229, valid loss/error: 2.785 32.18
Average loss over 10495049 tokens: 3.262, valid loss/error: 2.785 32.18
Average loss over 1566022 tokens: 3.241
Epoch: 2, train loss: 3.241, valid loss/error: 2.789 32.25
Average loss over 10514577 tokens: 3.213, valid loss/error: 2.789 32.17
Average loss over 10528644 tokens: 3.225, valid loss/error: 2.792 32.32
Average loss over 10479668 tokens: 3.238, valid loss/error: 2.793 32.28
Average loss over 10511291 tokens: 3.243, valid loss/error: 2.788 32.22
Average loss over 1559286 tokens: 3.210
Epoch: 3, train loss: 3.229, valid loss/error: 2.788 32.21
Average loss over 10516265 tokens: 3.218, valid loss/error: 2.789 32.23
Average loss over 10508167 tokens: 3.234, valid loss/error: 2.797 32.23
Average loss over 10513439 tokens: 3.212, valid loss/error: 2.792 32.24
Average loss over 10497777 tokens: 3.236, valid loss/error: 2.790 32.19
Average loss over 1578777 tokens: 3.186
Epoch: 4, train loss: 3.224, valid loss/error: 2.795 32.23
Average loss over 10485320 tokens: 3.214, valid loss/error: 2.790 32.12
Average loss over 10511463 tokens: 3.217, valid loss/error: 2.797 32.31
Average loss over 10496928 tokens: 3.213, valid loss/error: 2.796 32.25
Average loss over 10520507 tokens: 3.220, valid loss/error: 2.796 32.32
Average loss over 1575688 tokens: 3.208
Epoch: 5, train loss: 3.216, valid loss/error: 2.791 32.34
Average loss over 10491720 tokens: 3.205, valid loss/error: 2.801 32.36
Average loss over 10497837 tokens: 3.218, valid loss/error: 2.796 32.30
Average loss over 10512486 tokens: 3.212, valid loss/error: 2.802 32.46
Average loss over 10544952 tokens: 3.212, valid loss/error: 2.798 32.33
Average loss over 1578679 tokens: 3.237
Epoch: 6, train loss: 3.213, valid loss/error: 2.795 32.22
Average loss over 10483317 tokens: 3.190, valid loss/error: 2.802 32.35
Average loss over 10496966 tokens: 3.215, valid loss/error: 2.805 32.41
Average loss over 10534113 tokens: 3.221, valid loss/error: 2.794 32.31
Average loss over 10540179 tokens: 3.206, valid loss/error: 2.793 32.25
Average loss over 1560659 tokens: 3.217
Epoch: 7, train loss: 3.208, valid loss/error: 2.797 32.31
Average loss over 10537972 tokens: 3.197, valid loss/error: 2.800 32.36
Average loss over 10529333 tokens: 3.208, valid loss/error: 2.798 32.31
Average loss over 10512708 tokens: 3.206, valid loss/error: 2.800 32.37
Average loss over 10491465 tokens: 3.193, valid loss/error: 2.800 32.35
Average loss over 1574608 tokens: 3.230
Epoch: 8, train loss: 3.202, valid loss/error: 2.798 32.34
early stop
model saved
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/train_finetune_sample.py", line 417, in <module>
    td.close()
NameError: name 'td' is not defined. Did you mean: 'vd'?
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/baseFT_finetuning/std_finetuning_1div3data/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -1.086 31.95
Average loss over 10519707 tokens: -0.115, valid loss/error: -1.443 32.47
New best model saved
Average loss over 10507990 tokens: -0.129, valid loss/error: -1.431 32.44
Average loss over 10521054 tokens: -0.133, valid loss/error: -1.233 32.42
Average loss over 10489363 tokens: -0.128, valid loss/error: -1.400 32.42
Average loss over 1574409 tokens: -0.135
Epoch: 1, train loss: -0.127, valid loss/error: -1.579 32.46
New best model saved
Average loss over 10515910 tokens: -0.157, valid loss/error: -1.638 32.49
New best model saved
Average loss over 10513663 tokens: -0.149, valid loss/error: -1.412 32.49
Average loss over 10509833 tokens: -0.148, valid loss/error: -1.375 32.52
Average loss over 10495049 tokens: -0.144, valid loss/error: -1.376 32.45
Average loss over 1566022 tokens: -0.141
Epoch: 2, train loss: -0.149, valid loss/error: -1.468 32.47
Average loss over 10514577 tokens: -0.166, valid loss/error: -1.437 32.45
Average loss over 10528644 tokens: -0.162, valid loss/error: -1.253 32.54
Average loss over 10479668 tokens: -0.160, valid loss/error: -1.534 32.49
Average loss over 10511291 tokens: -0.155, valid loss/error: -1.391 32.51
Average loss over 1559286 tokens: -0.177
Epoch: 3, train loss: -0.161, valid loss/error: -1.509 32.51
Average loss over 10516265 tokens: -0.182, valid loss/error: -1.316 32.42
Average loss over 10508167 tokens: -0.171, valid loss/error: -1.399 32.61
Average loss over 10513439 tokens: -0.172, valid loss/error: -1.328 32.57
Average loss over 10497777 tokens: -0.166, valid loss/error: -1.196 32.52
Average loss over 1578777 tokens: -0.160
Epoch: 4, train loss: -0.172, valid loss/error: -1.757 32.50
New best model saved
Average loss over 10485320 tokens: -0.192, valid loss/error: -1.559 32.47
Average loss over 10511463 tokens: -0.179, valid loss/error: -1.521 32.55
Average loss over 10496928 tokens: -0.176, valid loss/error: -1.662 32.54
Average loss over 10520507 tokens: -0.175, valid loss/error: -1.503 32.58
Average loss over 1575688 tokens: -0.181
Epoch: 5, train loss: -0.181, valid loss/error: -1.184 32.61
Average loss over 10491720 tokens: -0.199, valid loss/error: -1.309 32.60
Average loss over 10497837 tokens: -0.184, valid loss/error: -1.487 32.60
Average loss over 10512486 tokens: -0.183, valid loss/error: -1.393 32.57
Average loss over 10544952 tokens: -0.179, valid loss/error: -1.693 32.58
Average loss over 1578679 tokens: -0.181
Epoch: 6, train loss: -0.186, valid loss/error: -1.632 32.52
Average loss over 10483317 tokens: -0.199, valid loss/error: -1.519 32.49
Average loss over 10496966 tokens: -0.196, valid loss/error: -1.585 32.70
Average loss over 10534113 tokens: -0.189, valid loss/error: -1.187 32.56
Average loss over 10540179 tokens: -0.187, valid loss/error: -1.430 32.46
Average loss over 1560659 tokens: -0.187
Epoch: 7, train loss: -0.193, valid loss/error: -1.300 32.56
Average loss over 10537972 tokens: -0.208, valid loss/error: -1.516 32.54
Average loss over 10529333 tokens: -0.201, valid loss/error: -1.329 32.55
Average loss over 10512708 tokens: -0.191, valid loss/error: -1.353 32.54
Average loss over 10491465 tokens: -0.195, valid loss/error: -1.597 32.55
Average loss over 1574608 tokens: -0.202
Epoch: 8, train loss: -0.199, valid loss/error: -1.422 32.56
Average loss over 10512364 tokens: -0.210, valid loss/error: -1.272 32.62
Average loss over 10495269 tokens: -0.210, valid loss/error: -1.532 32.47
Average loss over 10513417 tokens: -0.198, valid loss/error: -1.399 32.41
Average loss over 10519416 tokens: -0.197, valid loss/error: -1.757 32.44
Average loss over 1602731 tokens: -0.201
Epoch: 9, train loss: -0.204, valid loss/error: -1.543 32.55
Average loss over 10483167 tokens: -0.216, valid loss/error: -1.557 32.59
Average loss over 10504288 tokens: -0.211, valid loss/error: -1.617 32.52
Average loss over 10540358 tokens: -0.207, valid loss/error: -1.263 32.56
Average loss over 10524296 tokens: -0.199, valid loss/error: -1.468 32.47
Average loss over 1582103 tokens: -0.200
Epoch: 10, train loss: -0.208, valid loss/error: -1.180 32.59
Average loss over 10498876 tokens: -0.223, valid loss/error: -1.358 32.49
Average loss over 10509674 tokens: -0.214, valid loss/error: -1.537 32.56
Average loss over 10519741 tokens: -0.211, valid loss/error: -1.521 32.54
Average loss over 10499996 tokens: -0.202, valid loss/error: -1.584 32.63
Average loss over 1581476 tokens: -0.200
Epoch: 11, train loss: -0.212, valid loss/error: -1.375 32.58
Average loss over 10529868 tokens: -0.225, valid loss/error: -1.668 32.54
Average loss over 10475136 tokens: -0.215, valid loss/error: -1.480 32.70
Average loss over 10505940 tokens: -0.215, valid loss/error: -1.690 32.56
Average loss over 10489162 tokens: -0.209, valid loss/error: -1.777 32.70
New best model saved
Average loss over 1572891 tokens: -0.211
Epoch: 12, train loss: -0.216, valid loss/error: -1.426 32.66
Average loss over 10491614 tokens: -0.228, valid loss/error: -1.445 32.57
Average loss over 10542501 tokens: -0.222, valid loss/error: -1.534 32.61
Average loss over 10502296 tokens: -0.221, valid loss/error: -1.609 32.54
Average loss over 10512995 tokens: -0.211, valid loss/error: -1.581 32.46
Average loss over 1569569 tokens: -0.203
Epoch: 13, train loss: -0.220, valid loss/error: -1.282 32.54
Average loss over 10489099 tokens: -0.232, valid loss/error: -1.198 32.56
Average loss over 10499903 tokens: -0.226, valid loss/error: -1.687 32.66
Average loss over 10516532 tokens: -0.220, valid loss/error: -1.112 32.54
Average loss over 10524429 tokens: -0.217, valid loss/error: -1.552 32.38
Average loss over 1578721 tokens: -0.218
Epoch: 14, train loss: -0.224, valid loss/error: -1.575 32.57
Average loss over 10491436 tokens: -0.239, valid loss/error: -1.668 32.60
Average loss over 10491552 tokens: -0.233, valid loss/error: -1.836 32.57
New best model saved
Average loss over 10506904 tokens: -0.223, valid loss/error: -1.675 32.66
Average loss over 10526315 tokens: -0.220, valid loss/error: -1.800 32.57
Average loss over 1584990 tokens: -0.215
Epoch: 15, train loss: -0.228, valid loss/error: -1.304 32.54
Average loss over 10480170 tokens: -0.240, valid loss/error: -1.749 32.60
Average loss over 10494144 tokens: -0.232, valid loss/error: -1.558 32.63
Average loss over 10495036 tokens: -0.225, valid loss/error: -1.394 32.53
Average loss over 10570451 tokens: -0.227, valid loss/error: -1.475 32.39
Average loss over 1568641 tokens: -0.228
Epoch: 16, train loss: -0.231, valid loss/error: -1.490 32.49
Average loss over 10481876 tokens: -0.250, valid loss/error: -1.870 32.50
New best model saved
Average loss over 10548855 tokens: -0.235, valid loss/error: -1.643 32.68
Average loss over 10544781 tokens: -0.230, valid loss/error: -1.527 32.53
Average loss over 10480319 tokens: -0.221, valid loss/error: -1.822 32.59
Average loss over 1590783 tokens: -0.216
Epoch: 17, train loss: -0.233, valid loss/error: -1.423 32.60
Average loss over 10548530 tokens: -0.244, valid loss/error: -1.544 32.55
Average loss over 10522255 tokens: -0.239, valid loss/error: -1.448 32.55
Average loss over 10489607 tokens: -0.231, valid loss/error: -1.809 32.56
Average loss over 10466418 tokens: -0.228, valid loss/error: -1.206 32.47
Average loss over 1581960 tokens: -0.237
Epoch: 18, train loss: -0.236, valid loss/error: -1.238 32.48
Average loss over 10492001 tokens: -0.250, valid loss/error: -1.561 32.63
Average loss over 10520093 tokens: -0.244, valid loss/error: -1.170 32.65
Average loss over 10481148 tokens: -0.232, valid loss/error: -1.442 32.54
Average loss over 10552859 tokens: -0.229, valid loss/error: -1.515 32.59
Average loss over 1560325 tokens: -0.230
Epoch: 19, train loss: -0.238, valid loss/error: -1.533 32.49
Average loss over 10484256 tokens: -0.252, valid loss/error: -1.412 32.50
Average loss over 10511536 tokens: -0.244, valid loss/error: -1.472 32.55
Average loss over 10475583 tokens: -0.235, valid loss/error: -1.298 32.57
Average loss over 10536644 tokens: -0.232, valid loss/error: -1.412 32.53
Average loss over 1587898 tokens: -0.226
Epoch: 20, train loss: -0.240, valid loss/error: -1.281 32.62
Average loss over 10537131 tokens: -0.257, valid loss/error: -1.461 32.54
Average loss over 10483038 tokens: -0.249, valid loss/error: -1.328 32.56
Average loss over 10501709 tokens: -0.242, valid loss/error: -1.120 32.55
Average loss over 10511826 tokens: -0.232, valid loss/error: -1.353 32.62
Average loss over 1573406 tokens: -0.231
Epoch: 21, train loss: -0.244, valid loss/error: -1.435 32.51
Average loss over 10479207 tokens: -0.255, valid loss/error: -1.557 32.58
Average loss over 10523519 tokens: -0.247, valid loss/error: -1.412 32.63
Average loss over 10526342 tokens: -0.243, valid loss/error: -1.654 32.59
Average loss over 10543402 tokens: -0.239, valid loss/error: -1.854 32.64
Average loss over 1570764 tokens: -0.239
Epoch: 22, train loss: -0.246, valid loss/error: -1.556 32.59
Average loss over 10458797 tokens: -0.258, valid loss/error: -1.709 32.59
Average loss over 10534853 tokens: -0.252, valid loss/error: -1.744 32.55
Average loss over 10534877 tokens: -0.241, valid loss/error: -1.946 32.54
New best model saved
Average loss over 10530385 tokens: -0.240, valid loss/error: -1.527 32.50
Average loss over 1570869 tokens: -0.241
Epoch: 23, train loss: -0.248, valid loss/error: -1.613 32.59
Average loss over 10533545 tokens: -0.261, valid loss/error: -1.306 32.63
Average loss over 10489218 tokens: -0.252, valid loss/error: -1.906 32.55
Average loss over 10483420 tokens: -0.248, valid loss/error: -1.488 32.51
Average loss over 10530400 tokens: -0.243, valid loss/error: -1.202 32.47
Average loss over 1587247 tokens: -0.232
Epoch: 24, train loss: -0.250, valid loss/error: -1.566 32.59
Average loss over 10488835 tokens: -0.261, valid loss/error: -1.334 32.55
Average loss over 10538313 tokens: -0.253, valid loss/error: -1.727 32.54
Average loss over 10511547 tokens: -0.254, valid loss/error: -1.546 32.62
Average loss over 10521230 tokens: -0.242, valid loss/error: -1.481 32.51
Average loss over 1593221 tokens: -0.234
Epoch: 25, train loss: -0.252, valid loss/error: -1.169 32.53
Average loss over 10472549 tokens: -0.263, valid loss/error: -1.629 32.56
Average loss over 10543432 tokens: -0.258, valid loss/error: -1.438 32.61
Average loss over 10497830 tokens: -0.250, valid loss/error: -1.307 32.62
Average loss over 10530072 tokens: -0.246, valid loss/error: -1.352 32.53
Average loss over 1584057 tokens: -0.242
Epoch: 26, train loss: -0.254, valid loss/error: -1.669 32.51
Average loss over 10496264 tokens: -0.267, valid loss/error: -1.546 32.64
Average loss over 10517379 tokens: -0.259, valid loss/error: -1.539 32.55
Average loss over 10498850 tokens: -0.252, valid loss/error: -1.627 32.51
Average loss over 10512423 tokens: -0.250, valid loss/error: -1.434 32.48
Average loss over 1606441 tokens: -0.236
Epoch: 27, train loss: -0.256, valid loss/error: -1.338 32.52
Average loss over 10544800 tokens: -0.267, valid loss/error: -1.301 32.47
Average loss over 10513650 tokens: -0.262, valid loss/error: -1.622 32.64
Average loss over 10495052 tokens: -0.257, valid loss/error: -1.631 32.54
Average loss over 10502633 tokens: -0.248, valid loss/error: -1.579 32.50
Average loss over 1575947 tokens: -0.244
Epoch: 28, train loss: -0.258, valid loss/error: -1.461 32.56
Average loss over 10500374 tokens: -0.268, valid loss/error: -1.524 32.61
Average loss over 10499729 tokens: -0.264, valid loss/error: -1.510 32.62
Average loss over 10470476 tokens: -0.259, valid loss/error: -1.770 32.56
Average loss over 10537817 tokens: -0.251, valid loss/error: -1.500 32.44
Average loss over 1588276 tokens: -0.247
Epoch: 29, train loss: -0.260, valid loss/error: -1.115 32.51
Average loss over 10508134 tokens: -0.272, valid loss/error: -1.544 32.52
Average loss over 10553839 tokens: -0.265, valid loss/error: -1.642 32.65
Average loss over 10424835 tokens: -0.261, valid loss/error: -1.382 32.54
Average loss over 10525991 tokens: -0.253, valid loss/error: -1.450 32.56
Average loss over 1574010 tokens: -0.240
Epoch: 30, train loss: -0.262, valid loss/error: -1.588 32.53
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.735 31.21
Average loss over 10539209 tokens: 3.249, valid loss/error: 2.753 31.71
Average loss over 10568350 tokens: 3.271, valid loss/error: 2.758 31.65
Average loss over 10569308 tokens: 3.264, valid loss/error: 2.751 31.61
Average loss over 10538491 tokens: 3.249, valid loss/error: 2.753 31.59
Average loss over 4549813 tokens: 3.280
Epoch: 1, train loss: 3.260, valid loss/error: 2.759 31.71
Average loss over 10537237 tokens: 3.217, valid loss/error: 2.760 31.80
Average loss over 10559262 tokens: 3.229, valid loss/error: 2.766 31.96
Average loss over 10549136 tokens: 3.252, valid loss/error: 2.764 31.89
Average loss over 10584851 tokens: 3.258, valid loss/error: 2.761 31.90
Average loss over 4534685 tokens: 3.264
Epoch: 2, train loss: 3.241, valid loss/error: 2.764 31.88
Average loss over 10520020 tokens: 3.217, valid loss/error: 2.771 32.00
Average loss over 10562429 tokens: 3.229, valid loss/error: 2.767 31.92
Average loss over 10578986 tokens: 3.234, valid loss/error: 2.773 32.04
Average loss over 10571442 tokens: 3.235, valid loss/error: 2.766 31.92
Average loss over 4532294 tokens: 3.235
Epoch: 3, train loss: 3.229, valid loss/error: 2.771 32.04
Average loss over 10558405 tokens: 3.199, valid loss/error: 2.776 32.04
Average loss over 10587270 tokens: 3.230, valid loss/error: 2.776 32.03
Average loss over 10533659 tokens: 3.221, valid loss/error: 2.779 32.00
Average loss over 10541936 tokens: 3.229, valid loss/error: 2.778 32.03
Average loss over 4543901 tokens: 3.226
Epoch: 4, train loss: 3.220, valid loss/error: 2.779 32.07
Average loss over 10540185 tokens: 3.199, valid loss/error: 2.781 32.05
Average loss over 10554966 tokens: 3.202, valid loss/error: 2.788 32.21
Average loss over 10605620 tokens: 3.229, valid loss/error: 2.781 32.09
Average loss over 10551693 tokens: 3.216, valid loss/error: 2.783 32.09
Average loss over 4512707 tokens: 3.227
Epoch: 5, train loss: 3.213, valid loss/error: 2.781 32.03
Average loss over 10552274 tokens: 3.208, valid loss/error: 2.785 32.13
Average loss over 10579994 tokens: 3.174, valid loss/error: 2.789 32.26
Average loss over 10553794 tokens: 3.229, valid loss/error: 2.789 32.09
Average loss over 10546277 tokens: 3.206, valid loss/error: 2.787 32.23
Average loss over 4532832 tokens: 3.232
Epoch: 6, train loss: 3.207, valid loss/error: 2.789 32.17
Average loss over 10550413 tokens: 3.187, valid loss/error: 2.792 32.20
Average loss over 10564421 tokens: 3.205, valid loss/error: 2.796 32.24
Average loss over 10570590 tokens: 3.190, valid loss/error: 2.790 32.16
Average loss over 10539538 tokens: 3.209, valid loss/error: 2.793 32.23
Average loss over 4540209 tokens: 3.240
Epoch: 7, train loss: 3.202, valid loss/error: 2.795 32.33
Average loss over 10556606 tokens: 3.189, valid loss/error: 2.799 32.33
Average loss over 10562438 tokens: 3.178, valid loss/error: 2.797 32.39
Average loss over 10528533 tokens: 3.214, valid loss/error: 2.794 32.21
Average loss over 10594415 tokens: 3.205, valid loss/error: 2.795 32.31
Average loss over 4523179 tokens: 3.203
Epoch: 8, train loss: 3.197, valid loss/error: 2.795 32.38
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -1.967 31.95
Average loss over 10519707 tokens: -0.739, valid loss/error: -2.023 32.54
New best model saved
Average loss over 10507990 tokens: -0.753, valid loss/error: -1.964 32.50
Average loss over 10521054 tokens: -0.758, valid loss/error: -1.937 32.47
Average loss over 10489363 tokens: -0.756, valid loss/error: -2.167 32.46
New best model saved
Average loss over 1574409 tokens: -0.757
Epoch: 1, train loss: -0.752, valid loss/error: -2.256 32.52
New best model saved
Average loss over 10515910 tokens: -0.776, valid loss/error: -2.190 32.51
Average loss over 10513663 tokens: -0.773, valid loss/error: -2.172 32.55
Average loss over 10509833 tokens: -0.770, valid loss/error: -2.039 32.53
Average loss over 10495049 tokens: -0.771, valid loss/error: -2.184 32.58
Average loss over 1566022 tokens: -0.766
Epoch: 2, train loss: -0.772, valid loss/error: -2.139 32.51
Average loss over 10514577 tokens: -0.783, valid loss/error: -2.020 32.51
Average loss over 10528644 tokens: -0.782, valid loss/error: -1.953 32.56
Average loss over 10479668 tokens: -0.783, valid loss/error: -2.161 32.60
Average loss over 10511291 tokens: -0.780, valid loss/error: -2.000 32.56
Average loss over 1559286 tokens: -0.795
Epoch: 3, train loss: -0.782, valid loss/error: -2.131 32.54
Average loss over 10516265 tokens: -0.800, valid loss/error: -1.980 32.53
Average loss over 10508167 tokens: -0.793, valid loss/error: -2.106 32.62
Average loss over 10513439 tokens: -0.790, valid loss/error: -2.090 32.58
Average loss over 10497777 tokens: -0.789, valid loss/error: -1.920 32.59
Average loss over 1578777 tokens: -0.773
Epoch: 4, train loss: -0.792, valid loss/error: -2.227 32.57
Average loss over 10485320 tokens: -0.809, valid loss/error: -2.135 32.57
Average loss over 10511463 tokens: -0.796, valid loss/error: -2.110 32.63
Average loss over 10496928 tokens: -0.795, valid loss/error: -2.261 32.54
New best model saved
Average loss over 10520507 tokens: -0.794, valid loss/error: -2.227 32.60
Average loss over 1575688 tokens: -0.797
Epoch: 5, train loss: -0.799, valid loss/error: -2.008 32.62
Average loss over 10491720 tokens: -0.816, valid loss/error: -2.141 32.64
Average loss over 10497837 tokens: -0.802, valid loss/error: -2.249 32.63
Average loss over 10512486 tokens: -0.801, valid loss/error: -2.027 32.61
Average loss over 10544952 tokens: -0.796, valid loss/error: -2.216 32.59
Average loss over 1578679 tokens: -0.802
Epoch: 6, train loss: -0.804, valid loss/error: -2.249 32.52
Average loss over 10483317 tokens: -0.813, valid loss/error: -2.176 32.55
Average loss over 10496966 tokens: -0.815, valid loss/error: -2.141 32.67
Average loss over 10534113 tokens: -0.809, valid loss/error: -1.977 32.53
Average loss over 10540179 tokens: -0.805, valid loss/error: -2.062 32.55
Average loss over 1560659 tokens: -0.808
Epoch: 7, train loss: -0.810, valid loss/error: -2.122 32.61
Average loss over 10537972 tokens: -0.823, valid loss/error: -2.158 32.67
Average loss over 10529333 tokens: -0.817, valid loss/error: -2.056 32.57
Average loss over 10512708 tokens: -0.808, valid loss/error: -2.190 32.55
Average loss over 10491465 tokens: -0.811, valid loss/error: -2.155 32.58
Average loss over 1574608 tokens: -0.828
Epoch: 8, train loss: -0.815, valid loss/error: -2.076 32.54
Average loss over 10512364 tokens: -0.824, valid loss/error: -2.095 32.62
Average loss over 10495269 tokens: -0.821, valid loss/error: -2.114 32.44
Average loss over 10513417 tokens: -0.814, valid loss/error: -2.046 32.48
Average loss over 10519416 tokens: -0.814, valid loss/error: -2.280 32.55
New best model saved
Average loss over 1602731 tokens: -0.819
Epoch: 9, train loss: -0.818, valid loss/error: -2.245 32.63
Average loss over 10483167 tokens: -0.826, valid loss/error: -2.232 32.55
Average loss over 10504288 tokens: -0.828, valid loss/error: -2.257 32.45
Average loss over 10540358 tokens: -0.823, valid loss/error: -1.901 32.58
Average loss over 10524296 tokens: -0.816, valid loss/error: -2.120 32.53
Average loss over 1582103 tokens: -0.816
Epoch: 10, train loss: -0.823, valid loss/error: -1.906 32.50
Average loss over 10498876 tokens: -0.835, valid loss/error: -2.110 32.50
Average loss over 10509674 tokens: -0.827, valid loss/error: -2.192 32.57
Average loss over 10519741 tokens: -0.823, valid loss/error: -2.156 32.57
Average loss over 10499996 tokens: -0.818, valid loss/error: -2.176 32.62
Average loss over 1581476 tokens: -0.819
Epoch: 11, train loss: -0.826, valid loss/error: -2.080 32.50
Average loss over 10529868 tokens: -0.841, valid loss/error: -2.268 32.48
Average loss over 10475136 tokens: -0.828, valid loss/error: -2.108 32.64
Average loss over 10505940 tokens: -0.829, valid loss/error: -2.288 32.62
New best model saved
Average loss over 10489162 tokens: -0.821, valid loss/error: -2.333 32.59
New best model saved
Average loss over 1572891 tokens: -0.827
Epoch: 12, train loss: -0.830, valid loss/error: -2.168 32.58
Average loss over 10491614 tokens: -0.838, valid loss/error: -2.187 32.58
Average loss over 10542501 tokens: -0.836, valid loss/error: -2.193 32.61
Average loss over 10502296 tokens: -0.836, valid loss/error: -2.068 32.54
Average loss over 10512995 tokens: -0.825, valid loss/error: -2.103 32.43
Average loss over 1569569 tokens: -0.811
Epoch: 13, train loss: -0.833, valid loss/error: -2.055 32.50
Average loss over 10489099 tokens: -0.843, valid loss/error: -1.937 32.53
Average loss over 10499903 tokens: -0.843, valid loss/error: -2.350 32.60
New best model saved
Average loss over 10516532 tokens: -0.833, valid loss/error: -1.798 32.54
Average loss over 10524429 tokens: -0.832, valid loss/error: -2.192 32.48
Average loss over 1578721 tokens: -0.837
Epoch: 14, train loss: -0.837, valid loss/error: -2.087 32.65
Average loss over 10491436 tokens: -0.848, valid loss/error: -2.182 32.64
Average loss over 10491552 tokens: -0.844, valid loss/error: -2.405 32.62
New best model saved
Average loss over 10506904 tokens: -0.837, valid loss/error: -2.272 32.59
Average loss over 10526315 tokens: -0.836, valid loss/error: -2.288 32.52
Average loss over 1584990 tokens: -0.834
Epoch: 15, train loss: -0.841, valid loss/error: -2.165 32.60
Average loss over 10480170 tokens: -0.849, valid loss/error: -2.259 32.51
Average loss over 10494144 tokens: -0.847, valid loss/error: -2.289 32.65
Average loss over 10495036 tokens: -0.835, valid loss/error: -2.261 32.49
Average loss over 10570451 tokens: -0.841, valid loss/error: -2.161 32.51
Average loss over 1568641 tokens: -0.825
Epoch: 16, train loss: -0.842, valid loss/error: -2.144 32.59
Average loss over 10481876 tokens: -0.859, valid loss/error: -2.354 32.44
Average loss over 10548855 tokens: -0.846, valid loss/error: -2.251 32.60
Average loss over 10544781 tokens: -0.842, valid loss/error: -2.258 32.54
Average loss over 10480319 tokens: -0.835, valid loss/error: -2.412 32.51
New best model saved
Average loss over 1590783 tokens: -0.829
Epoch: 17, train loss: -0.845, valid loss/error: -2.048 32.61
Average loss over 10548530 tokens: -0.855, valid loss/error: -2.176 32.60
Average loss over 10522255 tokens: -0.849, valid loss/error: -2.114 32.57
Average loss over 10489607 tokens: -0.846, valid loss/error: -2.344 32.59
Average loss over 10466418 tokens: -0.840, valid loss/error: -2.129 32.46
Average loss over 1581960 tokens: -0.848
Epoch: 18, train loss: -0.847, valid loss/error: -2.034 32.54
Average loss over 10492001 tokens: -0.857, valid loss/error: -2.287 32.52
Average loss over 10520093 tokens: -0.855, valid loss/error: -1.984 32.57
Average loss over 10481148 tokens: -0.845, valid loss/error: -2.110 32.56
Average loss over 10552859 tokens: -0.841, valid loss/error: -2.260 32.56
Average loss over 1560325 tokens: -0.841
Epoch: 19, train loss: -0.849, valid loss/error: -2.190 32.49
Average loss over 10484256 tokens: -0.861, valid loss/error: -2.128 32.52
Average loss over 10511536 tokens: -0.855, valid loss/error: -2.095 32.51
Average loss over 10475583 tokens: -0.847, valid loss/error: -1.932 32.54
Average loss over 10536644 tokens: -0.846, valid loss/error: -2.154 32.50
Average loss over 1587898 tokens: -0.838
Epoch: 20, train loss: -0.852, valid loss/error: -2.008 32.57
Average loss over 10537131 tokens: -0.862, valid loss/error: -2.225 32.49
Average loss over 10483038 tokens: -0.857, valid loss/error: -2.069 32.47
Average loss over 10501709 tokens: -0.853, valid loss/error: -1.847 32.50
Average loss over 10511826 tokens: -0.842, valid loss/error: -2.201 32.55
Average loss over 1573406 tokens: -0.848
Epoch: 21, train loss: -0.854, valid loss/error: -2.118 32.48
Average loss over 10479207 tokens: -0.861, valid loss/error: -2.110 32.45
Average loss over 10523519 tokens: -0.858, valid loss/error: -2.082 32.63
Average loss over 10526342 tokens: -0.853, valid loss/error: -2.148 32.56
Average loss over 10543402 tokens: -0.852, valid loss/error: -2.445 32.61
New best model saved
Average loss over 1570764 tokens: -0.846
Epoch: 22, train loss: -0.856, valid loss/error: -2.159 32.57
Average loss over 10458797 tokens: -0.864, valid loss/error: -2.391 32.53
Average loss over 10534853 tokens: -0.863, valid loss/error: -2.357 32.52
Average loss over 10534877 tokens: -0.850, valid loss/error: -2.412 32.52
Average loss over 10530385 tokens: -0.851, valid loss/error: -2.161 32.47
Average loss over 1570869 tokens: -0.851
Epoch: 23, train loss: -0.857, valid loss/error: -2.233 32.56
Average loss over 10533545 tokens: -0.869, valid loss/error: -1.964 32.51
Average loss over 10489218 tokens: -0.857, valid loss/error: -2.460 32.47
New best model saved
Average loss over 10483420 tokens: -0.859, valid loss/error: -2.166 32.41
Average loss over 10530400 tokens: -0.853, valid loss/error: -1.915 32.43
Average loss over 1587247 tokens: -0.844
Epoch: 24, train loss: -0.859, valid loss/error: -2.254 32.38
Average loss over 10488835 tokens: -0.868, valid loss/error: -2.202 32.34
Average loss over 10538313 tokens: -0.864, valid loss/error: -2.322 32.47
Average loss over 10511547 tokens: -0.863, valid loss/error: -2.271 32.50
Average loss over 10521230 tokens: -0.854, valid loss/error: -2.195 32.47
Average loss over 1593221 tokens: -0.839
Epoch: 25, train loss: -0.861, valid loss/error: -2.027 32.44
Average loss over 10472549 tokens: -0.865, valid loss/error: -2.259 32.50
Average loss over 10543432 tokens: -0.868, valid loss/error: -2.147 32.58
Average loss over 10497830 tokens: -0.863, valid loss/error: -1.987 32.53
Average loss over 10530072 tokens: -0.856, valid loss/error: -1.974 32.43
Average loss over 1584057 tokens: -0.854
Epoch: 26, train loss: -0.863, valid loss/error: -2.275 32.46
Average loss over 10496264 tokens: -0.872, valid loss/error: -2.120 32.58
Average loss over 10517379 tokens: -0.872, valid loss/error: -2.252 32.49
Average loss over 10498850 tokens: -0.862, valid loss/error: -2.240 32.52
Average loss over 10512423 tokens: -0.856, valid loss/error: -2.194 32.37
Average loss over 1606441 tokens: -0.847
Epoch: 27, train loss: -0.865, valid loss/error: -2.140 32.46
Average loss over 10544800 tokens: -0.876, valid loss/error: -1.872 32.43
Average loss over 10513650 tokens: -0.870, valid loss/error: -2.269 32.56
Average loss over 10495052 tokens: -0.866, valid loss/error: -2.343 32.49
Average loss over 10502633 tokens: -0.861, valid loss/error: -2.124 32.54
Average loss over 1575947 tokens: -0.859
Epoch: 28, train loss: -0.868, valid loss/error: -2.123 32.43
Average loss over 10500374 tokens: -0.873, valid loss/error: -2.044 32.47
Average loss over 10499729 tokens: -0.872, valid loss/error: -2.309 32.47
Average loss over 10470476 tokens: -0.871, valid loss/error: -2.407 32.45
Average loss over 10537817 tokens: -0.860, valid loss/error: -2.300 32.46
Average loss over 1588276 tokens: -0.866
Epoch: 29, train loss: -0.869, valid loss/error: -1.880 32.40
Average loss over 10508134 tokens: -0.875, valid loss/error: -2.417 32.45
Average loss over 10553839 tokens: -0.877, valid loss/error: -2.277 32.61
Average loss over 10424835 tokens: -0.867, valid loss/error: -2.119 32.41
Average loss over 10525991 tokens: -0.863, valid loss/error: -2.198 32.50
Average loss over 1574010 tokens: -0.847
Epoch: 30, train loss: -0.870, valid loss/error: -2.237 32.47
Average loss over 10496297 tokens: -0.878, valid loss/error: -2.160 32.55
Average loss over 10512864 tokens: -0.875, valid loss/error: -2.233 32.47
Average loss over 10518456 tokens: -0.867, valid loss/error: -1.971 32.46
Average loss over 10473478 tokens: -0.861, valid loss/error: -2.143 32.40
Average loss over 1579765 tokens: -0.855
Epoch: 31, train loss: -0.870, valid loss/error: -2.401 32.43
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Init lr: 0.0001, Dev Loss/Error: -1.505 31.95
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5

Session terminated, killing shell...
Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -1.505 31.95
Average loss over 10519707 tokens: -0.411, valid loss/error: -1.713 32.48
New best model saved
Average loss over 10507990 tokens: -0.426, valid loss/error: -1.781 32.45
New best model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: -1.042 31.95
Average loss over 10521054 tokens: -0.431, valid loss/error: -1.589 32.44
Average loss over 10519707 tokens: -0.083, valid loss/error: -1.381 32.48
New best model saved
Average loss over 10489363 tokens: -0.427, valid loss/error: -1.894 32.43
New best model saved
Average loss over 1574409 tokens: -0.435
Epoch: 1, train loss: -0.424, valid loss/error: -1.882 32.43
Average loss over 10507990 tokens: -0.098, valid loss/error: -1.381 32.46
Average loss over 10515910 tokens: -0.452, valid loss/error: -1.884 32.48
Average loss over 10521054 tokens: -0.105, valid loss/error: -1.327 32.41
Average loss over 10513663 tokens: -0.446, valid loss/error: -1.816 32.49
Average loss over 10489363 tokens: -0.099, valid loss/error: -1.508 32.44
New best model saved
Average loss over 1574409 tokens: -0.106
Epoch: 1, train loss: -0.097, valid loss/error: -1.591 32.40
New best model saved
Average loss over 10509833 tokens: -0.445, valid loss/error: -1.716 32.50
Average loss over 10515910 tokens: -0.128, valid loss/error: -1.582 32.44
Average loss over 10495049 tokens: -0.442, valid loss/error: -1.806 32.47
Average loss over 1566022 tokens: -0.438
Epoch: 2, train loss: -0.446, valid loss/error: -1.823 32.48
Average loss over 10513663 tokens: -0.119, valid loss/error: -1.432 32.46
Average loss over 10514577 tokens: -0.461, valid loss/error: -1.774 32.44
Average loss over 10509833 tokens: -0.120, valid loss/error: -1.383 32.50
Average loss over 10528644 tokens: -0.458, valid loss/error: -1.555 32.53
Average loss over 10495049 tokens: -0.114, valid loss/error: -1.515 32.51
Average loss over 1566022 tokens: -0.114
Epoch: 2, train loss: -0.120, valid loss/error: -1.498 32.49
Average loss over 10479668 tokens: -0.457, valid loss/error: -1.838 32.53
Average loss over 10514577 tokens: -0.137, valid loss/error: -1.451 32.44
Average loss over 10511291 tokens: -0.453, valid loss/error: -1.809 32.49
Average loss over 1559286 tokens: -0.473
Epoch: 3, train loss: -0.458, valid loss/error: -1.801 32.50
Average loss over 10528644 tokens: -0.134, valid loss/error: -1.279 32.52
Average loss over 10516265 tokens: -0.477, valid loss/error: -1.720 32.51
Average loss over 10479668 tokens: -0.132, valid loss/error: -1.591 32.51
New best model saved
Average loss over 10508167 tokens: -0.468, valid loss/error: -1.784 32.59
Average loss over 10511291 tokens: -0.127, valid loss/error: -1.513 32.47
Average loss over 1559286 tokens: -0.149
Epoch: 3, train loss: -0.133, valid loss/error: -1.495 32.48
Average loss over 10513439 tokens: -0.468, valid loss/error: -1.679 32.51
Average loss over 10516265 tokens: -0.154, valid loss/error: -1.351 32.46
Average loss over 10497777 tokens: -0.463, valid loss/error: -1.537 32.49
Average loss over 1578777 tokens: -0.453
Epoch: 4, train loss: -0.469, valid loss/error: -1.995 32.47
New best model saved
Average loss over 10508167 tokens: -0.143, valid loss/error: -1.401 32.55
Average loss over 10485320 tokens: -0.486, valid loss/error: -1.886 32.49
Average loss over 10513439 tokens: -0.145, valid loss/error: -1.499 32.47
Average loss over 10511463 tokens: -0.474, valid loss/error: -1.759 32.61
Average loss over 10497777 tokens: -0.138, valid loss/error: -1.194 32.47
Average loss over 1578777 tokens: -0.133
Epoch: 4, train loss: -0.144, valid loss/error: -1.670 32.46
New best model saved
Average loss over 10496928 tokens: -0.471, valid loss/error: -1.928 32.50
Average loss over 10485320 tokens: -0.163, valid loss/error: -1.538 32.43
Average loss over 10520507 tokens: -0.471, valid loss/error: -1.769 32.56
Average loss over 1575688 tokens: -0.476
Epoch: 5, train loss: -0.476, valid loss/error: -1.621 32.58
Average loss over 10511463 tokens: -0.152, valid loss/error: -1.455 32.54
Average loss over 10491720 tokens: -0.493, valid loss/error: -1.859 32.56
Average loss over 10496928 tokens: -0.148, valid loss/error: -1.659 32.47
Average loss over 10497837 tokens: -0.479, valid loss/error: -1.932 32.58
Average loss over 10520507 tokens: -0.147, valid loss/error: -1.522 32.57
Average loss over 1575688 tokens: -0.153
Epoch: 5, train loss: -0.152, valid loss/error: -1.324 32.57
Average loss over 10512486 tokens: -0.479, valid loss/error: -1.762 32.55
Average loss over 10491720 tokens: -0.172, valid loss/error: -1.509 32.59
Average loss over 10544952 tokens: -0.473, valid loss/error: -1.935 32.54
Average loss over 10497837 tokens: -0.156, valid loss/error: -1.575 32.54
Average loss over 1578679 tokens: -0.476
Epoch: 6, train loss: -0.481, valid loss/error: -1.936 32.52
Average loss over 10512486 tokens: -0.156, valid loss/error: -1.446 32.51
Average loss over 10483317 tokens: -0.492, valid loss/error: -1.824 32.52
Average loss over 10544952 tokens: -0.151, valid loss/error: -1.612 32.57
Average loss over 10496966 tokens: -0.491, valid loss/error: -1.788 32.62
Average loss over 1578679 tokens: -0.150
Epoch: 6, train loss: -0.158, valid loss/error: -1.555 32.48
Average loss over 10534113 tokens: -0.485, valid loss/error: -1.615 32.52
Average loss over 10483317 tokens: -0.172, valid loss/error: -1.623 32.43
Average loss over 10540179 tokens: -0.482, valid loss/error: -1.845 32.54
Average loss over 10496966 tokens: -0.168, valid loss/error: -1.497 32.63
Average loss over 1560659 tokens: -0.485
Epoch: 7, train loss: -0.488, valid loss/error: -1.857 32.59
Average loss over 10534113 tokens: -0.162, valid loss/error: -1.342 32.44
Average loss over 10537972 tokens: -0.501, valid loss/error: -1.840 32.58
Average loss over 10540179 tokens: -0.160, valid loss/error: -1.472 32.48
Average loss over 10529333 tokens: -0.495, valid loss/error: -1.734 32.58
Average loss over 1560659 tokens: -0.158
Epoch: 7, train loss: -0.165, valid loss/error: -1.419 32.49
Average loss over 10537972 tokens: -0.181, valid loss/error: -1.536 32.54
Average loss over 10512708 tokens: -0.485, valid loss/error: -1.805 32.56
Average loss over 10529333 tokens: -0.172, valid loss/error: -1.431 32.52
Average loss over 10491465 tokens: -0.489, valid loss/error: -1.865 32.52
Average loss over 1574608 tokens: -0.504
Epoch: 8, train loss: -0.493, valid loss/error: -1.767 32.49
Average loss over 10512708 tokens: -0.164, valid loss/error: -1.420 32.54
Average loss over 10512364 tokens: -0.503, valid loss/error: -1.727 32.62
Average loss over 10491465 tokens: -0.168, valid loss/error: -1.542 32.50
Average loss over 1574608 tokens: -0.172
Epoch: 8, train loss: -0.171, valid loss/error: -1.399 32.47
Average loss over 10495269 tokens: -0.501, valid loss/error: -1.801 32.50
Average loss over 10512364 tokens: -0.183, valid loss/error: -1.339 32.59
Average loss over 10513417 tokens: -0.492, valid loss/error: -1.736 32.42
Average loss over 10495269 tokens: -0.183, valid loss/error: -1.549 32.42
Average loss over 10519416 tokens: -0.492, valid loss/error: -1.910 32.44
Average loss over 1602731 tokens: -0.495
Epoch: 9, train loss: -0.497, valid loss/error: -1.908 32.62
Average loss over 10513417 tokens: -0.170, valid loss/error: -1.451 32.38
Average loss over 10483167 tokens: -0.508, valid loss/error: -1.877 32.51
Average loss over 10519416 tokens: -0.169, valid loss/error: -1.542 32.40
Average loss over 1602731 tokens: -0.172
Epoch: 9, train loss: -0.176, valid loss/error: -1.485 32.51
Average loss over 10504288 tokens: -0.505, valid loss/error: -1.933 32.52
Average loss over 10483167 tokens: -0.190, valid loss/error: -1.541 32.54
Average loss over 10540358 tokens: -0.501, valid loss/error: -1.590 32.61
Average loss over 10504288 tokens: -0.182, valid loss/error: -1.629 32.48
Average loss over 10524296 tokens: -0.494, valid loss/error: -1.827 32.60
Average loss over 1582103 tokens: -0.494
Epoch: 10, train loss: -0.502, valid loss/error: -1.547 32.48
Average loss over 10540358 tokens: -0.179, valid loss/error: -1.294 32.47
Average loss over 10498876 tokens: -0.515, valid loss/error: -1.751 32.52
Average loss over 10524296 tokens: -0.171, valid loss/error: -1.482 32.48
Average loss over 1582103 tokens: -0.174
Epoch: 10, train loss: -0.180, valid loss/error: -1.373 32.45
Average loss over 10509674 tokens: -0.507, valid loss/error: -1.869 32.56
Average loss over 10498876 tokens: -0.195, valid loss/error: -1.398 32.47
Average loss over 10519741 tokens: -0.504, valid loss/error: -1.798 32.50
Average loss over 10509674 tokens: -0.186, valid loss/error: -1.545 32.52
Average loss over 10499996 tokens: -0.496, valid loss/error: -1.821 32.61
Average loss over 1581476 tokens: -0.497
Epoch: 11, train loss: -0.505, valid loss/error: -1.739 32.52
Average loss over 10519741 tokens: -0.184, valid loss/error: -1.523 32.48
Average loss over 10529868 tokens: -0.520, valid loss/error: -1.969 32.50
Average loss over 10499996 tokens: -0.174, valid loss/error: -1.501 32.60
Average loss over 1581476 tokens: -0.176
Epoch: 11, train loss: -0.184, valid loss/error: -1.388 32.57
Average loss over 10475136 tokens: -0.509, valid loss/error: -1.779 32.68
Average loss over 10529868 tokens: -0.199, valid loss/error: -1.724 32.48
New best model saved
Average loss over 10505940 tokens: -0.508, valid loss/error: -1.975 32.57
Average loss over 10475136 tokens: -0.188, valid loss/error: -1.490 32.59
Average loss over 10489162 tokens: -0.502, valid loss/error: -2.030 32.54
New best model saved
Average loss over 1572891 tokens: -0.507
Epoch: 12, train loss: -0.510, valid loss/error: -1.821 32.57
Average loss over 10505940 tokens: -0.187, valid loss/error: -1.659 32.56
Average loss over 10491614 tokens: -0.520, valid loss/error: -1.798 32.54
Average loss over 10489162 tokens: -0.182, valid loss/error: -1.715 32.49
Average loss over 1572891 tokens: -0.185
Epoch: 12, train loss: -0.189, valid loss/error: -1.546 32.51
Average loss over 10542501 tokens: -0.515, valid loss/error: -1.885 32.59
Average loss over 10491614 tokens: -0.201, valid loss/error: -1.466 32.49
Average loss over 10502296 tokens: -0.514, valid loss/error: -1.810 32.47
Average loss over 10542501 tokens: -0.194, valid loss/error: -1.579 32.60
Average loss over 10512995 tokens: -0.505, valid loss/error: -1.710 32.39
Average loss over 1569569 tokens: -0.493
Epoch: 13, train loss: -0.513, valid loss/error: -1.685 32.50
Average loss over 10502296 tokens: -0.193, valid loss/error: -1.528 32.45
Average loss over 10489099 tokens: -0.524, valid loss/error: -1.698 32.52
Average loss over 10512995 tokens: -0.186, valid loss/error: -1.471 32.39
Average loss over 1569569 tokens: -0.177
Epoch: 13, train loss: -0.193, valid loss/error: -1.343 32.51
Average loss over 10499903 tokens: -0.521, valid loss/error: -2.004 32.63
Average loss over 10489099 tokens: -0.205, valid loss/error: -1.458 32.52
Average loss over 10516532 tokens: -0.513, valid loss/error: -1.498 32.52
Average loss over 10499903 tokens: -0.199, valid loss/error: -1.740 32.64
New best model saved
Average loss over 10524429 tokens: -0.510, valid loss/error: -1.868 32.40
Average loss over 1578721 tokens: -0.514
Epoch: 14, train loss: -0.517, valid loss/error: -1.843 32.59
Average loss over 10516532 tokens: -0.193, valid loss/error: -1.155 32.49
Average loss over 10491436 tokens: -0.530, valid loss/error: -1.839 32.63
Average loss over 10524429 tokens: -0.190, valid loss/error: -1.502 32.35
Average loss over 1578721 tokens: -0.193
Epoch: 14, train loss: -0.197, valid loss/error: -1.512 32.56
Average loss over 10491552 tokens: -0.526, valid loss/error: -2.037 32.53
New best model saved
Average loss over 10491436 tokens: -0.211, valid loss/error: -1.592 32.59
Average loss over 10506904 tokens: -0.517, valid loss/error: -1.916 32.55
Average loss over 10491552 tokens: -0.207, valid loss/error: -1.665 32.56
Average loss over 10526315 tokens: -0.514, valid loss/error: -1.963 32.53
Average loss over 1584990 tokens: -0.511
Epoch: 15, train loss: -0.521, valid loss/error: -1.680 32.64
Average loss over 10506904 tokens: -0.197, valid loss/error: -1.599 32.61
Average loss over 10480170 tokens: -0.531, valid loss/error: -1.925 32.57
Average loss over 10526315 tokens: -0.193, valid loss/error: -1.666 32.47
Average loss over 1584990 tokens: -0.191
Epoch: 15, train loss: -0.202, valid loss/error: -1.413 32.56
Average loss over 10494144 tokens: -0.525, valid loss/error: -1.918 32.60
Average loss over 10480170 tokens: -0.213, valid loss/error: -1.625 32.48
Average loss over 10495036 tokens: -0.518, valid loss/error: -1.888 32.51
Average loss over 10494144 tokens: -0.205, valid loss/error: -1.601 32.56
Average loss over 10570451 tokens: -0.521, valid loss/error: -1.769 32.47
Average loss over 1568641 tokens: -0.513
Epoch: 16, train loss: -0.523, valid loss/error: -1.848 32.55
Average loss over 10495036 tokens: -0.201, valid loss/error: -1.546 32.49
Average loss over 10481876 tokens: -0.542, valid loss/error: -1.879 32.43
Average loss over 10570451 tokens: -0.201, valid loss/error: -1.386 32.45
Average loss over 1568641 tokens: -0.201
Epoch: 16, train loss: -0.205, valid loss/error: -1.545 32.57
Average loss over 10548855 tokens: -0.527, valid loss/error: -1.977 32.65
Average loss over 10481876 tokens: -0.224, valid loss/error: -1.723 32.48
Average loss over 10544781 tokens: -0.523, valid loss/error: -1.968 32.53
Average loss over 10548855 tokens: -0.208, valid loss/error: -1.700 32.54
Average loss over 10480319 tokens: -0.516, valid loss/error: -2.064 32.55
New best model saved
Average loss over 1590783 tokens: -0.508
Epoch: 17, train loss: -0.526, valid loss/error: -1.747 32.64
Average loss over 10544781 tokens: -0.205, valid loss/error: -1.653 32.47
Average loss over 10480319 tokens: -0.196, valid loss/error: -1.861 32.48
New best model saved
Average loss over 10548530 tokens: -0.537, valid loss/error: -1.876 32.56
Average loss over 1590783 tokens: -0.186
Epoch: 17, train loss: -0.207, valid loss/error: -1.407 32.59
Average loss over 10522255 tokens: -0.531, valid loss/error: -1.739 32.53
Average loss over 10548530 tokens: -0.218, valid loss/error: -1.563 32.54
Average loss over 10489607 tokens: -0.525, valid loss/error: -2.056 32.51
Average loss over 10522255 tokens: -0.213, valid loss/error: -1.480 32.55
Average loss over 10466418 tokens: -0.521, valid loss/error: -1.717 32.40
Average loss over 10489607 tokens: -0.205, valid loss/error: -1.777 32.54
Average loss over 1581960 tokens: -0.530
Epoch: 18, train loss: -0.528, valid loss/error: -1.712 32.48
Average loss over 10466418 tokens: -0.203, valid loss/error: -1.335 32.42
Average loss over 10492001 tokens: -0.541, valid loss/error: -1.929 32.58
Average loss over 1581960 tokens: -0.211
Epoch: 18, train loss: -0.210, valid loss/error: -1.418 32.45
Average loss over 10520093 tokens: -0.537, valid loss/error: -1.648 32.53
Average loss over 10492001 tokens: -0.225, valid loss/error: -1.621 32.50
Average loss over 10481148 tokens: -0.526, valid loss/error: -1.759 32.53
Average loss over 10520093 tokens: -0.218, valid loss/error: -1.298 32.55
Average loss over 10552859 tokens: -0.522, valid loss/error: -1.952 32.53
Average loss over 10481148 tokens: -0.206, valid loss/error: -1.431 32.54
Average loss over 1560325 tokens: -0.523
Epoch: 19, train loss: -0.531, valid loss/error: -1.909 32.47
Average loss over 10552859 tokens: -0.203, valid loss/error: -1.579 32.51
Average loss over 1560325 tokens: -0.205
Epoch: 19, train loss: -0.213, valid loss/error: -1.518 32.45
Average loss over 10484256 tokens: -0.544, valid loss/error: -1.775 32.51
Average loss over 10484256 tokens: -0.226, valid loss/error: -1.458 32.43
Average loss over 10511536 tokens: -0.538, valid loss/error: -1.781 32.48
Average loss over 10511536 tokens: -0.218, valid loss/error: -1.478 32.41
Average loss over 10475583 tokens: -0.529, valid loss/error: -1.592 32.47
Average loss over 10475583 tokens: -0.211, valid loss/error: -1.240 32.47
Average loss over 10536644 tokens: -0.527, valid loss/error: -1.838 32.46
Average loss over 1587898 tokens: -0.518
Epoch: 20, train loss: -0.534, valid loss/error: -1.628 32.58
Average loss over 10536644 tokens: -0.208, valid loss/error: -1.492 32.43
Average loss over 1587898 tokens: -0.200
Epoch: 20, train loss: -0.215, valid loss/error: -1.355 32.52
Average loss over 10537131 tokens: -0.547, valid loss/error: -1.867 32.48
Average loss over 10537131 tokens: -0.232, valid loss/error: -1.513 32.43
Average loss over 10483038 tokens: -0.541, valid loss/error: -1.747 32.49
Average loss over 10483038 tokens: -0.224, valid loss/error: -1.399 32.47
Average loss over 10501709 tokens: -0.534, valid loss/error: -1.447 32.47
Average loss over 10501709 tokens: -0.217, valid loss/error: -1.111 32.47
Average loss over 10511826 tokens: -0.525, valid loss/error: -1.822 32.52
Average loss over 1573406 tokens: -0.528
Epoch: 21, train loss: -0.536, valid loss/error: -1.807 32.47
Average loss over 10511826 tokens: -0.207, valid loss/error: -1.518 32.46
Average loss over 1573406 tokens: -0.207
Epoch: 21, train loss: -0.219, valid loss/error: -1.444 32.41
Average loss over 10479207 tokens: -0.546, valid loss/error: -1.855 32.38
Average loss over 10479207 tokens: -0.230, valid loss/error: -1.558 32.40
Average loss over 10523519 tokens: -0.539, valid loss/error: -1.760 32.64
Average loss over 10523519 tokens: -0.221, valid loss/error: -1.438 32.53
Average loss over 10526342 tokens: -0.536, valid loss/error: -1.869 32.50
Average loss over 10526342 tokens: -0.219, valid loss/error: -1.541 32.48
Average loss over 10543402 tokens: -0.533, valid loss/error: -2.148 32.58
New best model saved
Average loss over 1570764 tokens: -0.529
Epoch: 22, train loss: -0.538, valid loss/error: -1.821 32.49
Average loss over 10543402 tokens: -0.214, valid loss/error: -1.631 32.54
Average loss over 1570764 tokens: -0.214
Epoch: 22, train loss: -0.221, valid loss/error: -1.509 32.49
Average loss over 10458797 tokens: -0.549, valid loss/error: -2.045 32.57
Average loss over 10458797 tokens: -0.232, valid loss/error: -1.727 32.45
Average loss over 10534853 tokens: -0.545, valid loss/error: -2.048 32.54
Average loss over 10534853 tokens: -0.227, valid loss/error: -1.732 32.54
Average loss over 10534877 tokens: -0.534, valid loss/error: -2.169 32.50
New best model saved
Average loss over 10534877 tokens: -0.217, valid loss/error: -1.827 32.38
Average loss over 10530385 tokens: -0.534, valid loss/error: -1.830 32.42
Average loss over 1570869 tokens: -0.532
Epoch: 23, train loss: -0.540, valid loss/error: -1.878 32.51
Average loss over 10530385 tokens: -0.216, valid loss/error: -1.475 32.36
Average loss over 1570869 tokens: -0.215
Epoch: 23, train loss: -0.223, valid loss/error: -1.577 32.49
Average loss over 10533545 tokens: -0.553, valid loss/error: -1.579 32.55
Average loss over 10533545 tokens: -0.237, valid loss/error: -1.322 32.52
Average loss over 10489218 tokens: -0.543, valid loss/error: -2.173 32.43
New best model saved
Average loss over 10489218 tokens: -0.228, valid loss/error: -1.885 32.37
New best model saved
Average loss over 10483420 tokens: -0.542, valid loss/error: -1.771 32.45
Average loss over 10483420 tokens: -0.223, valid loss/error: -1.516 32.38
Average loss over 10530400 tokens: -0.536, valid loss/error: -1.587 32.39
Average loss over 1587247 tokens: -0.525
Epoch: 24, train loss: -0.543, valid loss/error: -1.886 32.45
Average loss over 10530400 tokens: -0.217, valid loss/error: -1.239 32.34
Average loss over 1587247 tokens: -0.207
Epoch: 24, train loss: -0.225, valid loss/error: -1.642 32.41
Average loss over 10488835 tokens: -0.553, valid loss/error: -1.756 32.38
Average loss over 10488835 tokens: -0.238, valid loss/error: -1.551 32.34
Average loss over 10538313 tokens: -0.547, valid loss/error: -2.071 32.47
Average loss over 10538313 tokens: -0.228, valid loss/error: -1.738 32.42
Average loss over 10511547 tokens: -0.546, valid loss/error: -1.906 32.51
Average loss over 10511547 tokens: -0.230, valid loss/error: -1.492 32.50
Average loss over 10521230 tokens: -0.536, valid loss/error: -1.892 32.49
Average loss over 1593221 tokens: -0.525
Epoch: 25, train loss: -0.545, valid loss/error: -1.515 32.50
Average loss over 10521230 tokens: -0.218, valid loss/error: -1.546 32.38
Average loss over 1593221 tokens: -0.211
Epoch: 25, train loss: -0.228, valid loss/error: -1.148 32.38
Average loss over 10472549 tokens: -0.553, valid loss/error: -1.970 32.50
Average loss over 10472549 tokens: -0.240, valid loss/error: -1.601 32.41
Average loss over 10543432 tokens: -0.551, valid loss/error: -1.776 32.54
Average loss over 10543432 tokens: -0.232, valid loss/error: -1.462 32.49
Average loss over 10497830 tokens: -0.545, valid loss/error: -1.711 32.51
Average loss over 10497830 tokens: -0.227, valid loss/error: -1.383 32.49
Average loss over 10530072 tokens: -0.539, valid loss/error: -1.646 32.46
Average loss over 1584057 tokens: -0.537
Epoch: 26, train loss: -0.547, valid loss/error: -1.963 32.44
Average loss over 10530072 tokens: -0.221, valid loss/error: -1.324 32.42
Average loss over 1584057 tokens: -0.220
Epoch: 26, train loss: -0.230, valid loss/error: -1.717 32.40
Average loss over 10496264 tokens: -0.557, valid loss/error: -1.853 32.57
Average loss over 10496264 tokens: -0.244, valid loss/error: -1.523 32.44
Average loss over 10517379 tokens: -0.554, valid loss/error: -1.943 32.56
Average loss over 10517379 tokens: -0.236, valid loss/error: -1.588 32.49
Average loss over 10498850 tokens: -0.546, valid loss/error: -1.963 32.44
Average loss over 10498850 tokens: -0.229, valid loss/error: -1.640 32.45
Average loss over 10512423 tokens: -0.543, valid loss/error: -1.805 32.44
Average loss over 1606441 tokens: -0.530
Epoch: 27, train loss: -0.549, valid loss/error: -1.835 32.48
Average loss over 10512423 tokens: -0.228, valid loss/error: -1.554 32.37
Average loss over 1606441 tokens: -0.210
Epoch: 27, train loss: -0.233, valid loss/error: -1.495 32.42
Average loss over 10544800 tokens: -0.560, valid loss/error: -1.526 32.50
Average loss over 10544800 tokens: -0.244, valid loss/error: -1.179 32.45
Average loss over 10513650 tokens: -0.555, valid loss/error: -1.940 32.58
Average loss over 10513650 tokens: -0.239, valid loss/error: -1.588 32.54
Average loss over 10495052 tokens: -0.550, valid loss/error: -1.980 32.54
Average loss over 10495052 tokens: -0.234, valid loss/error: -1.645 32.55
Average loss over 10502633 tokens: -0.543, valid loss/error: -1.847 32.44
Average loss over 1575947 tokens: -0.539
Epoch: 28, train loss: -0.552, valid loss/error: -1.795 32.43
Average loss over 10502633 tokens: -0.225, valid loss/error: -1.560 32.43
Average loss over 1575947 tokens: -0.221
Epoch: 28, train loss: -0.235, valid loss/error: -1.475 32.34
Average loss over 10500374 tokens: -0.560, valid loss/error: -1.795 32.50
Average loss over 10500374 tokens: -0.246, valid loss/error: -1.419 32.44
Average loss over 10499729 tokens: -0.556, valid loss/error: -1.992 32.52
Average loss over 10499729 tokens: -0.241, valid loss/error: -1.691 32.49
Average loss over 10470476 tokens: -0.555, valid loss/error: -2.099 32.51
Average loss over 10470476 tokens: -0.238, valid loss/error: -1.748 32.44
Average loss over 10537817 tokens: -0.545, valid loss/error: -1.952 32.43
Average loss over 10537817 tokens: -0.229, valid loss/error: -1.568 32.36
Average loss over 1588276 tokens: -0.547
Epoch: 29, train loss: -0.554, valid loss/error: -1.550 32.47
Average loss over 1588276 tokens: -0.227
Epoch: 29, train loss: -0.238, valid loss/error: -1.224 32.37
Average loss over 10508134 tokens: -0.563, valid loss/error: -2.090 32.44
Average loss over 10508134 tokens: -0.250, valid loss/error: -1.692 32.43
Average loss over 10553839 tokens: -0.559, valid loss/error: -1.963 32.57
Average loss over 10553839 tokens: -0.240, valid loss/error: -1.645 32.51
Average loss over 10424835 tokens: -0.552, valid loss/error: -1.832 32.39
Average loss over 10424835 tokens: -0.238, valid loss/error: -1.529 32.37
Average loss over 10525991 tokens: -0.547, valid loss/error: -1.808 32.50
Average loss over 10525991 tokens: -0.229, valid loss/error: -1.432 32.47
Average loss over 1574010 tokens: -0.531
Epoch: 30, train loss: -0.554, valid loss/error: -1.922 32.46
Average loss over 1574010 tokens: -0.215
Epoch: 30, train loss: -0.239, valid loss/error: -1.621 32.43
Average loss over 10496297 tokens: -0.567, valid loss/error: -1.864 32.44
Average loss over 10496297 tokens: -0.253, valid loss/error: -1.551 32.40
Average loss over 10512864 tokens: -0.244, valid loss/error: -1.530 32.40
Average loss over 10512864 tokens: -0.560, valid loss/error: -2.003 32.47
Average loss over 10518456 tokens: -0.238, valid loss/error: -1.341 32.39
Average loss over 10518456 tokens: -0.553, valid loss/error: -1.635 32.48
Average loss over 10473478 tokens: -0.228, valid loss/error: -1.625 32.33
Average loss over 10473478 tokens: -0.545, valid loss/error: -1.863 32.44
Average loss over 1579765 tokens: -0.230
Epoch: 31, train loss: -0.240, valid loss/error: -1.715 32.43
early stop
model saved
Average loss over 1579765 tokens: -0.542
Epoch: 31, train loss: -0.555, valid loss/error: -2.086 32.47
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/baseFT_finetuning/std_finetuning_1div3data/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16base/avg.h5
Init lr: 0.0001, Dev Loss/Error: 1.882 31.95
Average loss over 10519707 tokens: 1.385, valid loss/error: 1.245 32.24
New best model saved
Average loss over 10507990 tokens: 1.379, valid loss/error: 1.243 32.25
New best model saved
Average loss over 10521054 tokens: 1.377, valid loss/error: 1.241 32.17
New best model saved
Average loss over 10489363 tokens: 1.383, valid loss/error: 1.245 32.21
Average loss over 1574409 tokens: 1.374
Epoch: 1, train loss: 1.381, valid loss/error: 1.246 32.20
Average loss over 10515910 tokens: 1.371, valid loss/error: 1.248 32.27
Average loss over 10513663 tokens: 1.387, valid loss/error: 1.252 32.33
Average loss over 10509833 tokens: 1.381, valid loss/error: 1.253 32.32
Average loss over 10495049 tokens: 1.399, valid loss/error: 1.252 32.27
Average loss over 1566022 tokens: 1.394
Epoch: 2, train loss: 1.385, valid loss/error: 1.255 32.34
Average loss over 10514577 tokens: 1.386, valid loss/error: 1.262 32.30
Average loss over 10528644 tokens: 1.398, valid loss/error: 1.268 32.44
Average loss over 10479668 tokens: 1.411, valid loss/error: 1.271 32.40
Average loss over 10511291 tokens: 1.421, valid loss/error: 1.276 32.36
Average loss over 1559286 tokens: 1.413
Epoch: 3, train loss: 1.404, valid loss/error: 1.276 32.39
Average loss over 10516265 tokens: 1.422, valid loss/error: 1.286 32.41
Average loss over 10508167 tokens: 1.440, valid loss/error: 1.299 32.50
Average loss over 10513439 tokens: 1.441, valid loss/error: 1.309 32.53
Average loss over 10497777 tokens: 1.463, valid loss/error: 1.315 32.50
Average loss over 1578777 tokens: 1.448
Epoch: 4, train loss: 1.442, valid loss/error: 1.322 32.49
Average loss over 10485320 tokens: 1.468, valid loss/error: 1.329 32.45
Average loss over 10511463 tokens: 1.481, valid loss/error: 1.341 32.47
Average loss over 10496928 tokens: 1.492, valid loss/error: 1.355 32.56
Average loss over 10520507 tokens: 1.505, valid loss/error: 1.363 32.59
Average loss over 1575688 tokens: 1.504
Epoch: 5, train loss: 1.487, valid loss/error: 1.354 32.52
Average loss over 10491720 tokens: 1.507, valid loss/error: 1.362 32.58
Average loss over 10497837 tokens: 1.517, valid loss/error: 1.372 32.46
Average loss over 10512486 tokens: 1.519, valid loss/error: 1.374 32.56
Average loss over 10544952 tokens: 1.517, valid loss/error: 1.381 32.54
Average loss over 1578679 tokens: 1.527
Epoch: 6, train loss: 1.515, valid loss/error: 1.375 32.41
Average loss over 10483317 tokens: 1.500, valid loss/error: 1.368 32.39
Average loss over 10496966 tokens: 1.505, valid loss/error: 1.363 32.56
Average loss over 10534113 tokens: 1.500, valid loss/error: 1.328 32.46
Average loss over 10540179 tokens: 1.486, valid loss/error: 1.317 32.44
Average loss over 1560659 tokens: 1.488
Epoch: 7, train loss: 1.498, valid loss/error: 1.308 32.61
Average loss over 10537972 tokens: 1.474, valid loss/error: 1.304 32.47
Average loss over 10529333 tokens: 1.477, valid loss/error: 1.293 32.51
Average loss over 10512708 tokens: 1.475, valid loss/error: 1.282 32.51
Average loss over 10491465 tokens: 1.471, valid loss/error: 1.285 32.49
Average loss over 1574608 tokens: 1.492
Epoch: 8, train loss: 1.475, valid loss/error: 1.280 32.53
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.454 99.99
Initial model saved
Average loss over 21351903 tokens: 8.471, valid loss/error: 7.371 86.48
New best model saved
Average loss over 21341623 tokens: 6.310, valid loss/error: 6.346 78.91
New best model saved
Average loss over 21353867 tokens: 5.326, valid loss/error: 5.303 66.74
New best model saved
Average loss over 21443009 tokens: 4.404, valid loss/error: 4.267 53.17
New best model saved
Average loss over 21449363 tokens: 3.797, valid loss/error: 3.761 47.03
New best model saved
Average loss over 21385277 tokens: 3.502, valid loss/error: 3.490 43.63
New best model saved
Average loss over 21383473 tokens: 3.315, valid loss/error: 3.332 41.34
New best model saved
Average loss over 21416798 tokens: 3.202, valid loss/error: 3.232 40.08
New best model saved
Average loss over 21385477 tokens: 3.122, valid loss/error: 3.148 38.75
New best model saved
Average loss over 18558662 tokens: 3.076
Epoch: 1, train loss: 4.469, valid loss/error: 3.090 37.81
New best model saved
Average loss over 21429024 tokens: 3.020, valid loss/error: 3.055 37.43
New best model saved
Average loss over 21372973 tokens: 2.970, valid loss/error: 2.984 36.23
New best model saved
Average loss over 21398845 tokens: 2.937, valid loss/error: 2.944 35.63
New best model saved
Average loss over 21417527 tokens: 2.902, valid loss/error: 2.902 34.97
New best model saved
Average loss over 21377926 tokens: 2.878, valid loss/error: 2.878 34.56
New best model saved
Average loss over 21381383 tokens: 2.846, valid loss/error: 2.854 34.09
New best model saved
Average loss over 21405321 tokens: 2.836, valid loss/error: 2.833 33.95
New best model saved
Average loss over 21351285 tokens: 2.811, valid loss/error: 2.815 33.69
New best model saved
Average loss over 21404312 tokens: 2.795, valid loss/error: 2.792 33.20
New best model saved
Average loss over 18530856 tokens: 2.788
Epoch: 2, train loss: 2.880, valid loss/error: 2.785 32.96
New best model saved
Average loss over 21394829 tokens: 2.754, valid loss/error: 2.776 33.03
New best model saved
Average loss over 21399397 tokens: 2.749, valid loss/error: 2.768 32.79
New best model saved
Average loss over 21354736 tokens: 2.735, valid loss/error: 2.752 32.57
New best model saved
Average loss over 21393044 tokens: 2.731, valid loss/error: 2.743 32.56
New best model saved
Average loss over 21377886 tokens: 2.722, valid loss/error: 2.733 32.22
New best model saved
Average loss over 21398712 tokens: 2.721, valid loss/error: 2.724 32.06
New best model saved
Average loss over 21408542 tokens: 2.712, valid loss/error: 2.720 31.94
New best model saved
Average loss over 21377701 tokens: 2.707, valid loss/error: 2.707 31.82
New best model saved
Average loss over 21403058 tokens: 2.700, valid loss/error: 2.699 31.57
New best model saved
Average loss over 18561547 tokens: 2.694
Epoch: 3, train loss: 2.723, valid loss/error: 2.688 31.44
New best model saved
Average loss over 21358363 tokens: 2.676, valid loss/error: 2.684 31.49
New best model saved
Average loss over 21426358 tokens: 2.668, valid loss/error: 2.685 31.38
New best model saved
Average loss over 21473729 tokens: 2.661, valid loss/error: 2.676 31.09
New best model saved
Average loss over 21395135 tokens: 2.661, valid loss/error: 2.671 31.29
New best model saved
Average loss over 21429861 tokens: 2.655, valid loss/error: 2.671 31.23
New best model saved
Average loss over 21319392 tokens: 2.657, valid loss/error: 2.663 31.12
New best model saved
Average loss over 21387644 tokens: 2.654, valid loss/error: 2.660 31.10
New best model saved
Average loss over 21412198 tokens: 2.651, valid loss/error: 2.653 30.97
New best model saved
Average loss over 21369877 tokens: 2.637, valid loss/error: 2.648 30.76
New best model saved
Average loss over 18496895 tokens: 2.645
Epoch: 4, train loss: 2.657, valid loss/error: 2.648 30.76
New best model saved
Average loss over 21381225 tokens: 2.623, valid loss/error: 2.645 30.75
New best model saved
Average loss over 21416023 tokens: 2.622, valid loss/error: 2.644 30.77
New best model saved
Average loss over 21443792 tokens: 2.618, valid loss/error: 2.636 30.59
New best model saved
Average loss over 21422829 tokens: 2.623, valid loss/error: 2.632 30.66
New best model saved
Average loss over 21389534 tokens: 2.616, valid loss/error: 2.627 30.43
New best model saved
Average loss over 21384102 tokens: 2.617, valid loss/error: 2.628 30.45
Average loss over 21396045 tokens: 2.619, valid loss/error: 2.625 30.37
New best model saved
Average loss over 21378545 tokens: 2.614, valid loss/error: 2.617 30.30
New best model saved
Average loss over 21354560 tokens: 2.608, valid loss/error: 2.619 30.37
Average loss over 18502797 tokens: 2.612
Epoch: 5, train loss: 2.617, valid loss/error: 2.613 30.36
New best model saved
Average loss over 21389888 tokens: 2.587, valid loss/error: 2.617 30.30
New best model saved
Average loss over 21446060 tokens: 2.595, valid loss/error: 2.618 30.25
New best model saved
Average loss over 21374956 tokens: 2.596, valid loss/error: 2.616 30.27
Average loss over 21391248 tokens: 2.585, valid loss/error: 2.609 30.26
New best model saved
Average loss over 21405651 tokens: 2.597, valid loss/error: 2.608 30.03
New best model saved
Average loss over 21381439 tokens: 2.591, valid loss/error: 2.603 29.97
New best model saved
Average loss over 21387330 tokens: 2.589, valid loss/error: 2.600 30.10
New best model saved
Average loss over 21349078 tokens: 2.588, valid loss/error: 2.603 30.12
Average loss over 21379735 tokens: 2.588, valid loss/error: 2.594 29.96
New best model saved
Average loss over 18564067 tokens: 2.579
Epoch: 6, train loss: 2.590, valid loss/error: 2.597 30.00
Average loss over 21372291 tokens: 2.573, valid loss/error: 2.596 29.98
Average loss over 21426721 tokens: 2.570, valid loss/error: 2.598 29.98
Average loss over 21383618 tokens: 2.571, valid loss/error: 2.590 29.93
New best model saved
Average loss over 21359421 tokens: 2.569, valid loss/error: 2.582 29.69
New best model saved
Average loss over 21379918 tokens: 2.568, valid loss/error: 2.586 29.83
Average loss over 21413727 tokens: 2.563, valid loss/error: 2.584 29.74
Average loss over 21381182 tokens: 2.570, valid loss/error: 2.582 29.76
New best model saved
Average loss over 21385581 tokens: 2.567, valid loss/error: 2.581 29.65
New best model saved
Average loss over 21464611 tokens: 2.574, valid loss/error: 2.580 29.71
New best model saved
Average loss over 18502382 tokens: 2.570
Epoch: 7, train loss: 2.570, valid loss/error: 2.578 29.66
New best model saved
Average loss over 21422195 tokens: 2.548, valid loss/error: 2.581 29.71
Average loss over 21422767 tokens: 2.553, valid loss/error: 2.580 29.67
Average loss over 21362668 tokens: 2.552, valid loss/error: 2.578 29.65
Average loss over 21400119 tokens: 2.554, valid loss/error: 2.575 29.60
New best model saved
Average loss over 21386556 tokens: 2.553, valid loss/error: 2.576 29.64
Average loss over 21369733 tokens: 2.561, valid loss/error: 2.573 29.48
New best model saved
Average loss over 21385466 tokens: 2.553, valid loss/error: 2.571 29.45
New best model saved
Average loss over 21404230 tokens: 2.552, valid loss/error: 2.570 29.63
New best model saved
Average loss over 21390866 tokens: 2.552, valid loss/error: 2.566 29.37
New best model saved
Average loss over 18524852 tokens: 2.559
Epoch: 8, train loss: 2.554, valid loss/error: 2.565 29.40
New best model saved
Average loss over 21365804 tokens: 2.541, valid loss/error: 2.568 29.53
Average loss over 21431645 tokens: 2.539, valid loss/error: 2.569 29.45
Average loss over 21404535 tokens: 2.543, valid loss/error: 2.564 29.37
New best model saved
Average loss over 21389212 tokens: 2.540, valid loss/error: 2.561 29.35
New best model saved
Average loss over 21375042 tokens: 2.537, valid loss/error: 2.564 29.42
Average loss over 21403713 tokens: 2.543, valid loss/error: 2.563 29.36
Average loss over 21395714 tokens: 2.538, valid loss/error: 2.559 29.28
New best model saved
Average loss over 21436529 tokens: 2.537, valid loss/error: 2.555 29.21
New best model saved
Average loss over 21343959 tokens: 2.545, valid loss/error: 2.556 29.37
Average loss over 18523299 tokens: 2.544
Epoch: 9, train loss: 2.541, valid loss/error: 2.560 29.41
Average loss over 21387689 tokens: 2.522, valid loss/error: 2.555 29.19
New best model saved
Average loss over 21371068 tokens: 2.533, valid loss/error: 2.559 29.41
Average loss over 21389403 tokens: 2.535, valid loss/error: 2.555 29.26
New best model saved
Average loss over 21335322 tokens: 2.527, valid loss/error: 2.558 29.21
Average loss over 21424581 tokens: 2.530, valid loss/error: 2.553 29.22
New best model saved
Average loss over 21373433 tokens: 2.533, valid loss/error: 2.553 29.24
Average loss over 21425041 tokens: 2.530, valid loss/error: 2.554 29.43
Average loss over 21418066 tokens: 2.528, valid loss/error: 2.553 29.33
Average loss over 21391345 tokens: 2.529, valid loss/error: 2.550 29.15
New best model saved
Average loss over 18553504 tokens: 2.532
Epoch: 10, train loss: 2.530, valid loss/error: 2.550 29.21
New best model saved
Average loss over 21366182 tokens: 2.517, valid loss/error: 2.550 29.18
Average loss over 21417257 tokens: 2.519, valid loss/error: 2.551 29.18
Average loss over 21404330 tokens: 2.521, valid loss/error: 2.546 29.12
New best model saved
Average loss over 21371675 tokens: 2.517, valid loss/error: 2.547 29.09
New best model saved
Average loss over 21364545 tokens: 2.519, valid loss/error: 2.549 29.21
Average loss over 21379506 tokens: 2.519, valid loss/error: 2.545 29.03
New best model saved
Average loss over 21413732 tokens: 2.525, valid loss/error: 2.544 29.04
New best model saved
Average loss over 21389639 tokens: 2.522, valid loss/error: 2.548 29.06
Average loss over 21410551 tokens: 2.520, valid loss/error: 2.545 29.21
Average loss over 18552035 tokens: 2.529
Epoch: 11, train loss: 2.521, valid loss/error: 2.540 29.07
New best model saved
Average loss over 21360838 tokens: 2.506, valid loss/error: 2.543 29.18
Average loss over 21377779 tokens: 2.508, valid loss/error: 2.542 29.16
Average loss over 21391920 tokens: 2.511, valid loss/error: 2.540 29.09
New best model saved
Average loss over 21443325 tokens: 2.510, valid loss/error: 2.541 29.11
Average loss over 21409037 tokens: 2.515, valid loss/error: 2.538 29.01
New best model saved
Average loss over 21401926 tokens: 2.514, valid loss/error: 2.536 29.04
New best model saved
Average loss over 21387050 tokens: 2.514, valid loss/error: 2.537 29.02
Average loss over 21359857 tokens: 2.518, valid loss/error: 2.541 29.15
Average loss over 21409483 tokens: 2.514, valid loss/error: 2.534 28.94
New best model saved
Average loss over 18528237 tokens: 2.519
Epoch: 12, train loss: 2.513, valid loss/error: 2.535 29.04
Average loss over 21388195 tokens: 2.502, valid loss/error: 2.541 29.12
Average loss over 21344515 tokens: 2.502, valid loss/error: 2.539 29.00
Average loss over 21464460 tokens: 2.501, valid loss/error: 2.537 28.93
New best model saved
Average loss over 21380154 tokens: 2.502, valid loss/error: 2.538 28.97
Average loss over 21409030 tokens: 2.507, valid loss/error: 2.534 28.91
New best model saved
Average loss over 21411197 tokens: 2.513, valid loss/error: 2.536 29.05
Average loss over 21400578 tokens: 2.509, valid loss/error: 2.531 28.83
New best model saved
Average loss over 21396682 tokens: 2.507, valid loss/error: 2.537 29.02
Average loss over 21384927 tokens: 2.509, valid loss/error: 2.531 28.92
New best model saved
Average loss over 18489714 tokens: 2.508
Epoch: 13, train loss: 2.506, valid loss/error: 2.531 28.93
Average loss over 21411235 tokens: 2.493, valid loss/error: 2.530 28.82
New best model saved
Average loss over 21376371 tokens: 2.495, valid loss/error: 2.536 28.97
Average loss over 21362839 tokens: 2.498, valid loss/error: 2.532 28.87
Average loss over 21394526 tokens: 2.502, valid loss/error: 2.532 28.84
Average loss over 21441341 tokens: 2.500, valid loss/error: 2.532 28.94
Average loss over 21354476 tokens: 2.506, valid loss/error: 2.529 28.83
New best model saved
Average loss over 21455457 tokens: 2.503, valid loss/error: 2.527 28.75
New best model saved
Average loss over 21367165 tokens: 2.504, valid loss/error: 2.527 28.81
Average loss over 21391219 tokens: 2.502, valid loss/error: 2.528 28.81
Average loss over 18514823 tokens: 2.494
Epoch: 14, train loss: 2.500, valid loss/error: 2.528 28.83
Average loss over 21395110 tokens: 2.489, valid loss/error: 2.531 28.92
Average loss over 21445570 tokens: 2.491, valid loss/error: 2.531 28.87
Average loss over 21367655 tokens: 2.490, valid loss/error: 2.526 28.80
New best model saved
Average loss over 21390964 tokens: 2.496, valid loss/error: 2.529 28.92
Average loss over 21401538 tokens: 2.494, valid loss/error: 2.532 28.87
Average loss over 21407416 tokens: 2.496, valid loss/error: 2.526 28.83
New best model saved
Average loss over 21383862 tokens: 2.499, valid loss/error: 2.526 28.87
New best model saved
Average loss over 21347695 tokens: 2.493, valid loss/error: 2.526 28.78
New best model saved
Average loss over 21445420 tokens: 2.501, valid loss/error: 2.524 28.74
New best model saved
Average loss over 18484222 tokens: 2.494
Epoch: 15, train loss: 2.494, valid loss/error: 2.524 28.78
New best model saved
Average loss over 21400203 tokens: 2.479, valid loss/error: 2.528 28.91
Average loss over 21416351 tokens: 2.482, valid loss/error: 2.529 28.78
Average loss over 21384525 tokens: 2.484, valid loss/error: 2.523 28.77
New best model saved
Average loss over 21365275 tokens: 2.492, valid loss/error: 2.524 28.65
New best model saved
Average loss over 21373693 tokens: 2.490, valid loss/error: 2.524 28.66
Average loss over 21418806 tokens: 2.488, valid loss/error: 2.525 28.74
Average loss over 21345600 tokens: 2.492, valid loss/error: 2.522 28.66
New best model saved
Average loss over 21466997 tokens: 2.498, valid loss/error: 2.519 28.64
New best model saved
Average loss over 21365250 tokens: 2.494, valid loss/error: 2.523 28.83
Average loss over 18532752 tokens: 2.494
Epoch: 16, train loss: 2.489, valid loss/error: 2.522 28.67
Average loss over 21404237 tokens: 2.478, valid loss/error: 2.525 28.76
Average loss over 21415937 tokens: 2.479, valid loss/error: 2.525 28.73
Average loss over 21372052 tokens: 2.482, valid loss/error: 2.525 28.69
Average loss over 21421980 tokens: 2.482, valid loss/error: 2.521 28.69
Average loss over 21388698 tokens: 2.488, valid loss/error: 2.522 28.69
Average loss over 21385723 tokens: 2.483, valid loss/error: 2.520 28.58
New best model saved
Average loss over 21436878 tokens: 2.488, valid loss/error: 2.522 28.64

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.454 99.99
Initial model saved
Average loss over 21351903 tokens: 8.471, valid loss/error: 7.371 86.48
New best model saved
Average loss over 21341623 tokens: 6.310, valid loss/error: 6.346 78.91
New best model saved
Average loss over 21353867 tokens: 5.326, valid loss/error: 5.303 66.74
New best model saved
Average loss over 21443009 tokens: 4.404, valid loss/error: 4.267 53.17
New best model saved
Average loss over 21449363 tokens: 3.797, valid loss/error: 3.761 47.03
New best model saved
Average loss over 21385277 tokens: 3.502, valid loss/error: 3.490 43.63
New best model saved
Average loss over 21383473 tokens: 3.315, valid loss/error: 3.332 41.34
New best model saved
Average loss over 21416798 tokens: 3.202, valid loss/error: 3.232 40.08
New best model saved
Average loss over 21385477 tokens: 3.122, valid loss/error: 3.148 38.75
New best model saved
Average loss over 18558662 tokens: 3.076
Epoch: 1, train loss: 4.469, valid loss/error: 3.090 37.81
New best model saved
Average loss over 21429024 tokens: 3.020, valid loss/error: 3.055 37.43
New best model saved
Average loss over 21372973 tokens: 2.970, valid loss/error: 2.984 36.23
New best model saved
Average loss over 21398845 tokens: 2.937, valid loss/error: 2.944 35.63
New best model saved
Average loss over 21417527 tokens: 2.902, valid loss/error: 2.902 34.97
New best model saved
Average loss over 21377926 tokens: 2.878, valid loss/error: 2.878 34.56
New best model saved
Average loss over 21381383 tokens: 2.846, valid loss/error: 2.854 34.09
New best model saved
Average loss over 21405321 tokens: 2.836, valid loss/error: 2.833 33.95
New best model saved
Average loss over 21351285 tokens: 2.811, valid loss/error: 2.815 33.69
New best model saved
Average loss over 21404312 tokens: 2.795, valid loss/error: 2.792 33.20
New best model saved
Average loss over 18530856 tokens: 2.788
Epoch: 2, train loss: 2.880, valid loss/error: 2.785 32.96
New best model saved
Average loss over 21394829 tokens: 2.754, valid loss/error: 2.776 33.03
New best model saved
Average loss over 21399397 tokens: 2.749, valid loss/error: 2.768 32.79
New best model saved
Average loss over 21354736 tokens: 2.735, valid loss/error: 2.752 32.57
New best model saved
Average loss over 21393044 tokens: 2.731, valid loss/error: 2.743 32.56
New best model saved
Average loss over 21377886 tokens: 2.722, valid loss/error: 2.733 32.22
New best model saved
Average loss over 21398712 tokens: 2.721, valid loss/error: 2.724 32.06
New best model saved
Average loss over 21408542 tokens: 2.712, valid loss/error: 2.720 31.94
New best model saved
Average loss over 21377701 tokens: 2.707, valid loss/error: 2.707 31.82
New best model saved
Average loss over 21403058 tokens: 2.700, valid loss/error: 2.699 31.57
New best model saved
Average loss over 18561547 tokens: 2.694
Epoch: 3, train loss: 2.723, valid loss/error: 2.688 31.44
New best model saved
Average loss over 21358363 tokens: 2.676, valid loss/error: 2.684 31.49
New best model saved
Average loss over 21426358 tokens: 2.668, valid loss/error: 2.685 31.38
New best model saved
Average loss over 21473729 tokens: 2.661, valid loss/error: 2.676 31.09
New best model saved
Average loss over 21395135 tokens: 2.661, valid loss/error: 2.671 31.29
New best model saved
Average loss over 21429861 tokens: 2.655, valid loss/error: 2.671 31.23
New best model saved
Average loss over 21319392 tokens: 2.657, valid loss/error: 2.663 31.12
New best model saved
Average loss over 21387644 tokens: 2.654, valid loss/error: 2.660 31.10
New best model saved
Average loss over 21412198 tokens: 2.651, valid loss/error: 2.653 30.97
New best model saved
Average loss over 21369877 tokens: 2.637, valid loss/error: 2.648 30.76
New best model saved
Average loss over 18496895 tokens: 2.645
Epoch: 4, train loss: 2.657, valid loss/error: 2.648 30.76
New best model saved
Average loss over 21381225 tokens: 2.623, valid loss/error: 2.645 30.75
New best model saved
Average loss over 21416023 tokens: 2.622, valid loss/error: 2.644 30.77
New best model saved
Average loss over 21443792 tokens: 2.618, valid loss/error: 2.636 30.59
New best model saved
Average loss over 21422829 tokens: 2.623, valid loss/error: 2.632 30.66
New best model saved
Average loss over 21389534 tokens: 2.616, valid loss/error: 2.627 30.43
New best model saved
Average loss over 21384102 tokens: 2.617, valid loss/error: 2.628 30.45
Average loss over 21396045 tokens: 2.619, valid loss/error: 2.625 30.37
New best model saved
Average loss over 21378545 tokens: 2.614, valid loss/error: 2.617 30.30
New best model saved
Average loss over 21354560 tokens: 2.608, valid loss/error: 2.619 30.37
Average loss over 18502797 tokens: 2.612
Epoch: 5, train loss: 2.617, valid loss/error: 2.613 30.36
New best model saved
Average loss over 21389888 tokens: 2.587, valid loss/error: 2.617 30.30
New best model saved
Average loss over 21446060 tokens: 2.595, valid loss/error: 2.618 30.25
New best model saved
Average loss over 21374956 tokens: 2.596, valid loss/error: 2.616 30.27
Average loss over 21391248 tokens: 2.585, valid loss/error: 2.609 30.26
New best model saved
Average loss over 21405651 tokens: 2.597, valid loss/error: 2.608 30.03
New best model saved
Average loss over 21381439 tokens: 2.591, valid loss/error: 2.603 29.97
New best model saved
Average loss over 21387330 tokens: 2.589, valid loss/error: 2.600 30.10
New best model saved
Average loss over 21349078 tokens: 2.588, valid loss/error: 2.603 30.12
Average loss over 21379735 tokens: 2.588, valid loss/error: 2.594 29.96
New best model saved
Average loss over 18564067 tokens: 2.579
Epoch: 6, train loss: 2.590, valid loss/error: 2.597 30.00
Average loss over 21372291 tokens: 2.573, valid loss/error: 2.596 29.98
Average loss over 21426721 tokens: 2.570, valid loss/error: 2.598 29.98
Average loss over 21383618 tokens: 2.571, valid loss/error: 2.590 29.93
New best model saved
Average loss over 21359421 tokens: 2.569, valid loss/error: 2.582 29.69
New best model saved
Average loss over 21379918 tokens: 2.568, valid loss/error: 2.586 29.83
Average loss over 21413727 tokens: 2.563, valid loss/error: 2.584 29.74
Average loss over 21381182 tokens: 2.570, valid loss/error: 2.582 29.76
New best model saved
Average loss over 21385581 tokens: 2.567, valid loss/error: 2.581 29.65
New best model saved
Average loss over 21464611 tokens: 2.574, valid loss/error: 2.580 29.71
New best model saved
Average loss over 18502382 tokens: 2.570
Epoch: 7, train loss: 2.570, valid loss/error: 2.578 29.66
New best model saved
Average loss over 21422195 tokens: 2.548, valid loss/error: 2.581 29.71
Average loss over 21422767 tokens: 2.553, valid loss/error: 2.580 29.67
Average loss over 21362668 tokens: 2.552, valid loss/error: 2.578 29.65
Average loss over 21400119 tokens: 2.554, valid loss/error: 2.575 29.60
New best model saved
Average loss over 21386556 tokens: 2.553, valid loss/error: 2.576 29.64
Average loss over 21369733 tokens: 2.561, valid loss/error: 2.573 29.48
New best model saved
Average loss over 21385466 tokens: 2.553, valid loss/error: 2.571 29.45
New best model saved
Average loss over 21404230 tokens: 2.552, valid loss/error: 2.570 29.63
New best model saved
Average loss over 21390866 tokens: 2.552, valid loss/error: 2.566 29.37
New best model saved
Average loss over 18524852 tokens: 2.559
Epoch: 8, train loss: 2.554, valid loss/error: 2.565 29.40
New best model saved
Average loss over 21365804 tokens: 2.541, valid loss/error: 2.568 29.53
Average loss over 21431645 tokens: 2.539, valid loss/error: 2.569 29.45
Average loss over 21404535 tokens: 2.543, valid loss/error: 2.564 29.37
New best model saved
Average loss over 21389212 tokens: 2.540, valid loss/error: 2.561 29.35
New best model saved
Average loss over 21375042 tokens: 2.537, valid loss/error: 2.564 29.42
Average loss over 21403713 tokens: 2.543, valid loss/error: 2.563 29.36
Average loss over 21395714 tokens: 2.538, valid loss/error: 2.559 29.28
New best model saved
Average loss over 21436529 tokens: 2.537, valid loss/error: 2.555 29.21
New best model saved
Average loss over 21343959 tokens: 2.545, valid loss/error: 2.556 29.37
Average loss over 18523299 tokens: 2.544
Epoch: 9, train loss: 2.541, valid loss/error: 2.560 29.41
Average loss over 21387689 tokens: 2.522, valid loss/error: 2.555 29.19
New best model saved
Average loss over 21371068 tokens: 2.533, valid loss/error: 2.559 29.41
Average loss over 21389403 tokens: 2.535, valid loss/error: 2.555 29.26
New best model saved
Average loss over 21335322 tokens: 2.527, valid loss/error: 2.558 29.21
Average loss over 21424581 tokens: 2.530, valid loss/error: 2.553 29.22
New best model saved
Average loss over 21373433 tokens: 2.533, valid loss/error: 2.553 29.24
Average loss over 21425041 tokens: 2.530, valid loss/error: 2.554 29.43
Average loss over 21418066 tokens: 2.528, valid loss/error: 2.553 29.33
Average loss over 21391345 tokens: 2.529, valid loss/error: 2.550 29.15
New best model saved
Average loss over 18553504 tokens: 2.532
Epoch: 10, train loss: 2.530, valid loss/error: 2.550 29.21
New best model saved
Average loss over 21366182 tokens: 2.517, valid loss/error: 2.550 29.18
Average loss over 21417257 tokens: 2.519, valid loss/error: 2.551 29.18
Average loss over 21404330 tokens: 2.521, valid loss/error: 2.546 29.12
New best model saved
Average loss over 21371675 tokens: 2.517, valid loss/error: 2.547 29.09
New best model saved
Average loss over 21364545 tokens: 2.519, valid loss/error: 2.549 29.21
Average loss over 21379506 tokens: 2.519, valid loss/error: 2.545 29.03
New best model saved
Average loss over 21413732 tokens: 2.525, valid loss/error: 2.544 29.04
New best model saved
Average loss over 21389639 tokens: 2.522, valid loss/error: 2.548 29.06
Average loss over 21410551 tokens: 2.520, valid loss/error: 2.545 29.21
Average loss over 18552035 tokens: 2.529
Epoch: 11, train loss: 2.521, valid loss/error: 2.540 29.07
New best model saved
Average loss over 21360838 tokens: 2.506, valid loss/error: 2.543 29.18
Average loss over 21377779 tokens: 2.508, valid loss/error: 2.542 29.16
Average loss over 21391920 tokens: 2.511, valid loss/error: 2.540 29.09
New best model saved
Average loss over 21443325 tokens: 2.510, valid loss/error: 2.541 29.11
Average loss over 21409037 tokens: 2.515, valid loss/error: 2.538 29.01
New best model saved
Average loss over 21401926 tokens: 2.514, valid loss/error: 2.536 29.04
New best model saved
Average loss over 21387050 tokens: 2.514, valid loss/error: 2.537 29.02
Average loss over 21359857 tokens: 2.518, valid loss/error: 2.541 29.15
Average loss over 21409483 tokens: 2.514, valid loss/error: 2.534 28.94
New best model saved
Average loss over 18528237 tokens: 2.519
Epoch: 12, train loss: 2.513, valid loss/error: 2.535 29.04
Average loss over 21388195 tokens: 2.502, valid loss/error: 2.541 29.12
Average loss over 21344515 tokens: 2.502, valid loss/error: 2.539 29.00
Average loss over 21464460 tokens: 2.501, valid loss/error: 2.537 28.93
New best model saved
Average loss over 21380154 tokens: 2.502, valid loss/error: 2.538 28.97
Average loss over 21409030 tokens: 2.507, valid loss/error: 2.534 28.91
New best model saved
Average loss over 21411197 tokens: 2.513, valid loss/error: 2.536 29.05
Average loss over 17321276 tokens: 2.509
Epoch: 13, train loss: 2.505, valid loss/error: 2.534 28.97
New best model saved
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Init lr: 0.0001, Dev Loss/Error: 10.454 99.99
Initial model saved

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.519 28.61

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_finetune.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/avg.h5
Init lr: 0.0001, Dev Loss/Error: 2.519 28.61
Average loss over 20809737 tokens: 2.562, valid loss/error: 2.535 28.99
Average loss over 20807971 tokens: 2.567, valid loss/error: 2.531 28.87
Average loss over 20775862 tokens: 2.561, valid loss/error: 2.534 29.04
Average loss over 10585444 tokens: 2.562
Epoch: 1, train loss: 2.563, valid loss/error: 2.537 29.15
Average loss over 20801532 tokens: 2.538, valid loss/error: 2.546 29.27
Average loss over 20782223 tokens: 2.551, valid loss/error: 2.536 29.09
Average loss over 20799114 tokens: 2.543, valid loss/error: 2.535 28.99
Average loss over 10596145 tokens: 2.553
Epoch: 2, train loss: 2.545, valid loss/error: 2.535 28.95
Average loss over 20775012 tokens: 2.520, valid loss/error: 2.535 29.06
Average loss over 20845850 tokens: 2.540, valid loss/error: 2.535 29.08
Average loss over 20789446 tokens: 2.537, valid loss/error: 2.536 28.96
Average loss over 10568706 tokens: 2.543
Epoch: 3, train loss: 2.534, valid loss/error: 2.539 29.10
Average loss over 20825397 tokens: 2.525, valid loss/error: 2.545 29.27
Average loss over 20772873 tokens: 2.522, valid loss/error: 2.547 29.34
Average loss over 20767368 tokens: 2.524, valid loss/error: 2.545 29.24
Average loss over 10613376 tokens: 2.533
Epoch: 4, train loss: 2.525, valid loss/error: 2.542 29.08
Average loss over 20796019 tokens: 2.513, valid loss/error: 2.545 29.23
Average loss over 20772265 tokens: 2.519, valid loss/error: 2.553 29.44
Average loss over 20837128 tokens: 2.516, valid loss/error: 2.551 29.39
Average loss over 10573602 tokens: 2.530
Epoch: 5, train loss: 2.518, valid loss/error: 2.557 29.54
Average loss over 20758402 tokens: 2.506, valid loss/error: 2.561 29.52
Average loss over 20829130 tokens: 2.509, valid loss/error: 2.562 29.59
Average loss over 20783246 tokens: 2.522, valid loss/error: 2.559 29.54
Average loss over 10608236 tokens: 2.508
Epoch: 6, train loss: 2.512, valid loss/error: 2.565 29.66
Average loss over 20796043 tokens: 2.499, valid loss/error: 2.566 29.63
Average loss over 20802882 tokens: 2.511, valid loss/error: 2.565 29.58
Average loss over 20788509 tokens: 2.507, valid loss/error: 2.571 29.67
Average loss over 10591580 tokens: 2.510
Epoch: 7, train loss: 2.506, valid loss/error: 2.578 29.90
Average loss over 20813977 tokens: 2.495, valid loss/error: 2.580 29.79
Average loss over 20802698 tokens: 2.503, valid loss/error: 2.577 29.76
Average loss over 20785132 tokens: 2.500, valid loss/error: 2.588 30.01
Average loss over 10577207 tokens: 2.515
Epoch: 8, train loss: 2.501, valid loss/error: 2.586 29.97
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
Init lr: 1e-05, Dev Loss/Error: -0.975 28.98
Average loss over 10618480 tokens: -0.561, valid loss/error: -0.980 29.01
New best model saved
Average loss over 10642804 tokens: -0.606, valid loss/error: -1.372 28.97
New best model saved
Average loss over 10635954 tokens: -0.613, valid loss/error: -1.477 28.91
New best model saved
Average loss over 10613027 tokens: -0.616, valid loss/error: -1.501 28.95
New best model saved
Average loss over 9047513 tokens: -0.613
Epoch: 1, train loss: -0.601, valid loss/error: -1.531 28.90
New best model saved
Average loss over 10637711 tokens: -0.618, valid loss/error: -1.636 28.86
New best model saved
Average loss over 10620923 tokens: -0.618, valid loss/error: -1.701 28.95
New best model saved
Average loss over 10629726 tokens: -0.623, valid loss/error: -1.658 28.91
Average loss over 10626185 tokens: -0.619, valid loss/error: -1.789 28.93
New best model saved
Average loss over 9041368 tokens: -0.616
Epoch: 2, train loss: -0.619, valid loss/error: -1.826 28.90
New best model saved
Average loss over 10663500 tokens: -0.620, valid loss/error: -1.816 28.87
Average loss over 10635726 tokens: -0.618, valid loss/error: -1.887 28.91
New best model saved
Average loss over 10613055 tokens: -0.619, valid loss/error: -1.808 28.86
Average loss over 10648828 tokens: -0.622, valid loss/error: -1.867 28.87
Average loss over 9034075 tokens: -0.620
Epoch: 3, train loss: -0.620, valid loss/error: -1.833 28.89
Average loss over 10599181 tokens: -0.619, valid loss/error: -1.782 28.91
Average loss over 10625405 tokens: -0.624, valid loss/error: -1.711 28.88
Average loss over 10631342 tokens: -0.621, valid loss/error: -1.784 28.85
New best model saved
Average loss over 10613243 tokens: -0.620, valid loss/error: -1.818 28.91
Average loss over 9052630 tokens: -0.621
Epoch: 4, train loss: -0.621, valid loss/error: -1.747 28.88
Average loss over 10603545 tokens: -0.625, valid loss/error: -1.836 28.84
New best model saved
Average loss over 10636593 tokens: -0.628, valid loss/error: -1.862 28.86
Average loss over 10653660 tokens: -0.625, valid loss/error: -1.712 28.83
New best model saved
Average loss over 10643835 tokens: -0.623, valid loss/error: -1.814 28.86
Average loss over 9053984 tokens: -0.619
Epoch: 5, train loss: -0.624, valid loss/error: -1.835 28.89
Average loss over 10635528 tokens: -0.628, valid loss/error: -1.675 28.85
Average loss over 10628373 tokens: -0.623, valid loss/error: -1.753 28.83
New best model saved
Average loss over 10611597 tokens: -0.628, valid loss/error: -1.888 28.85
New best model saved
Average loss over 10610515 tokens: -0.627, valid loss/error: -1.762 28.83
Average loss over 9060133 tokens: -0.628
Epoch: 6, train loss: -0.627, valid loss/error: -1.708 28.84
Average loss over 10602860 tokens: -0.632, valid loss/error: -1.794 28.85
Average loss over 10630596 tokens: -0.635, valid loss/error: -1.744 28.85
Average loss over 10625970 tokens: -0.624, valid loss/error: -1.819 28.84
Average loss over 10645690 tokens: -0.627, valid loss/error: -1.847 28.83
New best model saved
Average loss over 9060763 tokens: -0.626
Epoch: 7, train loss: -0.629, valid loss/error: -1.843 28.81
New best model saved
Average loss over 10624003 tokens: -0.630, valid loss/error: -1.818 28.85
Average loss over 10610642 tokens: -0.630, valid loss/error: -1.800 28.83
Average loss over 10616485 tokens: -0.630, valid loss/error: -1.816 28.80
New best model saved
Average loss over 10636569 tokens: -0.634, valid loss/error: -1.855 28.79
New best model saved
Average loss over 9050442 tokens: -0.628
Epoch: 8, train loss: -0.630, valid loss/error: -1.925 28.76
New best model saved
Average loss over 10621164 tokens: -0.633, valid loss/error: -1.882 28.82
Average loss over 10635951 tokens: -0.631, valid loss/error: -1.631 28.84
Average loss over 10637465 tokens: -0.624, valid loss/error: -1.951 28.85
New best model saved
Average loss over 10636266 tokens: -0.638, valid loss/error: -1.644 28.83
Average loss over 9035365 tokens: -0.632
Epoch: 9, train loss: -0.631, valid loss/error: -1.813 28.81
Average loss over 10639188 tokens: -0.630, valid loss/error: -1.944 28.84
Average loss over 10631671 tokens: -0.632, valid loss/error: -1.870 28.82
Average loss over 10611607 tokens: -0.631, valid loss/error: -1.773 28.79
Average loss over 10645764 tokens: -0.634, valid loss/error: -1.732 28.78
Average loss over 9038679 tokens: -0.634
Epoch: 10, train loss: -0.632, valid loss/error: -1.818 28.77
Average loss over 10628192 tokens: -0.635, valid loss/error: -1.863 28.78
Average loss over 10631607 tokens: -0.634, valid loss/error: -1.896 28.75
New best model saved
Average loss over 10617925 tokens: -0.631, valid loss/error: -1.883 28.79
Average loss over 10624002 tokens: -0.636, valid loss/error: -1.838 28.76
Average loss over 9073431 tokens: -0.638
Epoch: 11, train loss: -0.635, valid loss/error: -1.806 28.78
Average loss over 10626314 tokens: -0.637, valid loss/error: -1.874 28.79
Average loss over 10642956 tokens: -0.631, valid loss/error: -1.766 28.80
Average loss over 10650726 tokens: -0.636, valid loss/error: -1.803 28.80
Average loss over 10630511 tokens: -0.638, valid loss/error: -1.902 28.77
Average loss over 9025683 tokens: -0.633
Epoch: 12, train loss: -0.635, valid loss/error: -1.771 28.78
Average loss over 10629320 tokens: -0.638, valid loss/error: -1.900 28.79
Average loss over 10634118 tokens: -0.632, valid loss/error: -2.010 28.76
New best model saved
Average loss over 10626661 tokens: -0.641, valid loss/error: -1.718 28.75
Average loss over 10616958 tokens: -0.639, valid loss/error: -1.684 28.79
Average loss over 9061964 tokens: -0.633
Epoch: 13, train loss: -0.637, valid loss/error: -1.740 28.71
New best model saved
Average loss over 10611748 tokens: -0.634, valid loss/error: -1.940 28.73
Average loss over 10666437 tokens: -0.639, valid loss/error: -1.810 28.73
Average loss over 10629360 tokens: -0.635, valid loss/error: -1.775 28.73
Average loss over 10621786 tokens: -0.636, valid loss/error: -1.687 28.71
Average loss over 9051307 tokens: -0.640
Epoch: 14, train loss: -0.637, valid loss/error: -1.797 28.73
Average loss over 10644062 tokens: -0.641, valid loss/error: -1.760 28.74
Average loss over 10610347 tokens: -0.636, valid loss/error: -1.784 28.77
Average loss over 10626705 tokens: -0.639, valid loss/error: -1.799 28.73
Average loss over 10628644 tokens: -0.646, valid loss/error: -1.938 28.71
New best model saved
Average loss over 9040671 tokens: -0.635
Epoch: 15, train loss: -0.640, valid loss/error: -1.670 28.73
Average loss over 10614907 tokens: -0.643, valid loss/error: -1.910 28.74
Average loss over 10611387 tokens: -0.646, valid loss/error: -1.767 28.74
Average loss over 10620894 tokens: -0.642, valid loss/error: -1.846 28.78
Average loss over 10628515 tokens: -0.635, valid loss/error: -1.778 28.74
Average loss over 9052661 tokens: -0.636
Epoch: 16, train loss: -0.640, valid loss/error: -1.743 28.77
Average loss over 10651011 tokens: -0.638, valid loss/error: -2.001 28.74
Average loss over 10642595 tokens: -0.645, valid loss/error: -1.702 28.75
Average loss over 10644624 tokens: -0.642, valid loss/error: -1.761 28.72
Average loss over 10624464 tokens: -0.639, valid loss/error: -1.763 28.69
New best model saved
Average loss over 9051298 tokens: -0.636
Epoch: 17, train loss: -0.640, valid loss/error: -1.780 28.74
Average loss over 10611111 tokens: -0.639, valid loss/error: -1.848 28.76
Average loss over 10625259 tokens: -0.647, valid loss/error: -1.657 28.71
Average loss over 10650860 tokens: -0.638, valid loss/error: -1.751 28.72
Average loss over 10631926 tokens: -0.642, valid loss/error: -1.674 28.70
Average loss over 9040125 tokens: -0.649
Epoch: 18, train loss: -0.643, valid loss/error: -1.886 28.75
Average loss over 10617689 tokens: -0.647, valid loss/error: -1.781 28.71
Average loss over 10604082 tokens: -0.638, valid loss/error: -1.966 28.66
New best model saved
Average loss over 10632931 tokens: -0.644, valid loss/error: -1.664 28.71
Average loss over 10623381 tokens: -0.644, valid loss/error: -1.804 28.69
Average loss over 9079161 tokens: -0.643
Epoch: 19, train loss: -0.643, valid loss/error: -1.967 28.77
Average loss over 10622855 tokens: -0.644, valid loss/error: -1.859 28.73
Average loss over 10648095 tokens: -0.642, valid loss/error: -1.823 28.71
Average loss over 10613855 tokens: -0.643, valid loss/error: -1.720 28.68
Average loss over 10646408 tokens: -0.644, valid loss/error: -1.836 28.73
Average loss over 9058877 tokens: -0.649
Epoch: 20, train loss: -0.644, valid loss/error: -1.779 28.72
Average loss over 10608652 tokens: -0.647, valid loss/error: -1.780 28.72
Average loss over 10629390 tokens: -0.642, valid loss/error: -1.862 28.70
Average loss over 10637737 tokens: -0.647, valid loss/error: -1.682 28.72
Average loss over 10636381 tokens: -0.641, valid loss/error: -1.997 28.72
Average loss over 9042073 tokens: -0.646
Epoch: 21, train loss: -0.645, valid loss/error: -1.768 28.66
New best model saved
Average loss over 10627391 tokens: -0.648, valid loss/error: -1.916 28.67
Average loss over 10622417 tokens: -0.642, valid loss/error: -1.927 28.74
Average loss over 10618916 tokens: -0.644, valid loss/error: -1.784 28.71
Average loss over 10628627 tokens: -0.647, valid loss/error: -1.796 28.68
Average loss over 9071945 tokens: -0.644
Epoch: 22, train loss: -0.645, valid loss/error: -1.875 28.67
Average loss over 10626698 tokens: -0.642, valid loss/error: -1.885 28.66
New best model saved
Average loss over 10641961 tokens: -0.648, valid loss/error: -1.795 28.69
Average loss over 10620314 tokens: -0.649, valid loss/error: -1.688 28.72
Average loss over 10617469 tokens: -0.646, valid loss/error: -1.938 28.67
Average loss over 9052061 tokens: -0.648
Epoch: 23, train loss: -0.647, valid loss/error: -1.899 28.66
Average loss over 10619536 tokens: -0.651, valid loss/error: -1.823 28.71
Average loss over 10628345 tokens: -0.647, valid loss/error: -1.849 28.67
Average loss over 10629732 tokens: -0.645, valid loss/error: -1.672 28.73
Average loss over 10617929 tokens: -0.649, valid loss/error: -1.749 28.71
Average loss over 9065166 tokens: -0.646
Epoch: 24, train loss: -0.648, valid loss/error: -1.872 28.70
Average loss over 10630948 tokens: -0.649, valid loss/error: -1.870 28.72
Average loss over 10643307 tokens: -0.649, valid loss/error: -2.026 28.66
New best model saved
Average loss over 10626082 tokens: -0.651, valid loss/error: -1.960 28.62
New best model saved
Average loss over 10635535 tokens: -0.652, valid loss/error: -2.014 28.64
Average loss over 9052864 tokens: -0.643
Epoch: 25, train loss: -0.649, valid loss/error: -1.955 28.68
Average loss over 10623750 tokens: -0.644, valid loss/error: -1.998 28.66
Average loss over 10638391 tokens: -0.646, valid loss/error: -1.698 28.63
Average loss over 10621372 tokens: -0.648, valid loss/error: -1.862 28.69
Average loss over 10659830 tokens: -0.651, valid loss/error: -1.816 28.66
Average loss over 9052556 tokens: -0.653
Epoch: 26, train loss: -0.648, valid loss/error: -1.836 28.68
Average loss over 10626913 tokens: -0.652, valid loss/error: -1.802 28.75
Average loss over 10652777 tokens: -0.653, valid loss/error: -1.843 28.68
Average loss over 10634401 tokens: -0.647, valid loss/error: -1.634 28.62
Average loss over 10640216 tokens: -0.646, valid loss/error: -1.799 28.66
Average loss over 9031294 tokens: -0.648
Epoch: 27, train loss: -0.649, valid loss/error: -1.657 28.68
Average loss over 10627901 tokens: -0.650, valid loss/error: -1.840 28.71
Average loss over 10655702 tokens: -0.652, valid loss/error: -1.754 28.68
Average loss over 10635055 tokens: -0.653, valid loss/error: -1.830 28.74
Average loss over 10625612 tokens: -0.653, valid loss/error: -1.989 28.73
Average loss over 9040728 tokens: -0.650
Epoch: 28, train loss: -0.652, valid loss/error: -1.935 28.66
Average loss over 10638736 tokens: -0.652, valid loss/error: -1.988 28.68
Average loss over 10590540 tokens: -0.653, valid loss/error: -1.669 28.68
Average loss over 10638825 tokens: -0.649, valid loss/error: -1.978 28.69
Average loss over 10643227 tokens: -0.648, valid loss/error: -1.728 28.68
Average loss over 9045929 tokens: -0.652
Epoch: 29, train loss: -0.651, valid loss/error: -1.788 28.66
Average loss over 10627589 tokens: -0.657, valid loss/error: -1.729 28.74
Average loss over 10622659 tokens: -0.652, valid loss/error: -1.954 28.70
Average loss over 10614742 tokens: -0.651, valid loss/error: -1.862 28.67
Average loss over 10627762 tokens: -0.654, valid loss/error: -1.919 28.65
Average loss over 9088433 tokens: -0.648
Epoch: 30, train loss: -0.653, valid loss/error: -1.954 28.64
Average loss over 10622653 tokens: -0.648, valid loss/error: -1.948 28.64
Average loss over 10625904 tokens: -0.651, valid loss/error: -1.768 28.68
Average loss over 10647282 tokens: -0.655, valid loss/error: -1.728 28.67
Average loss over 10643709 tokens: -0.648, valid loss/error: -2.002 28.72
Average loss over 9050429 tokens: -0.654
Epoch: 31, train loss: -0.651, valid loss/error: -1.967 28.63
Average loss over 10615805 tokens: -0.651, valid loss/error: -1.748 28.68
Average loss over 10659880 tokens: -0.649, valid loss/error: -1.887 28.64
Average loss over 10620695 tokens: -0.651, valid loss/error: -1.989 28.69
Average loss over 10607708 tokens: -0.661, valid loss/error: -1.791 28.69
Average loss over 9039226 tokens: -0.655
Epoch: 32, train loss: -0.653, valid loss/error: -1.766 28.62
New best model saved
Average loss over 10619481 tokens: -0.655, valid loss/error: -1.955 28.67
Average loss over 10614000 tokens: -0.651, valid loss/error: -1.857 28.70
Average loss over 10637003 tokens: -0.656, valid loss/error: -1.754 28.68
Average loss over 10643417 tokens: -0.650, valid loss/error: -1.799 28.60
New best model saved
Average loss over 9045409 tokens: -0.655
Epoch: 33, train loss: -0.653, valid loss/error: -1.930 28.65
Average loss over 10623657 tokens: -0.658, valid loss/error: -1.847 28.67
Average loss over 10616885 tokens: -0.652, valid loss/error: -1.914 28.64
Average loss over 10640500 tokens: -0.652, valid loss/error: -1.809 28.64
Average loss over 10616370 tokens: -0.659, valid loss/error: -1.869 28.69
Average loss over 9035333 tokens: -0.650
Epoch: 34, train loss: -0.654, valid loss/error: -2.064 28.67
New best model saved
Average loss over 10628581 tokens: -0.655, valid loss/error: -1.883 28.63
Average loss over 10628157 tokens: -0.657, valid loss/error: -1.747 28.64
Average loss over 10623803 tokens: -0.654, valid loss/error: -1.809 28.62
Average loss over 10628422 tokens: -0.655, valid loss/error: -1.672 28.63
Average loss over 9020814 tokens: -0.660
Epoch: 35, train loss: -0.656, valid loss/error: -1.992 28.61
Average loss over 10627349 tokens: -0.657, valid loss/error: -1.955 28.63
Average loss over 10620152 tokens: -0.658, valid loss/error: -1.648 28.66
Average loss over 10622961 tokens: -0.654, valid loss/error: -2.028 28.62
Average loss over 10634133 tokens: -0.652, valid loss/error: -1.853 28.63
Average loss over 9048446 tokens: -0.651
Epoch: 36, train loss: -0.655, valid loss/error: -1.884 28.67
Average loss over 10644424 tokens: -0.656, valid loss/error: -1.700 28.62
Average loss over 10612955 tokens: -0.655, valid loss/error: -1.810 28.66
Average loss over 10606563 tokens: -0.657, valid loss/error: -1.881 28.64
Average loss over 10641994 tokens: -0.657, valid loss/error: -1.668 28.59
New best model saved
Average loss over 9056174 tokens: -0.652
Epoch: 37, train loss: -0.655, valid loss/error: -1.934 28.62
Average loss over 10637393 tokens: -0.654, valid loss/error: -1.882 28.66
Average loss over 10620288 tokens: -0.652, valid loss/error: -1.935 28.62
Average loss over 10612785 tokens: -0.662, valid loss/error: -2.028 28.54
New best model saved
Average loss over 10622585 tokens: -0.654, valid loss/error: -1.796 28.67
Average loss over 9074373 tokens: -0.658
Epoch: 38, train loss: -0.656, valid loss/error: -1.820 28.60
Average loss over 10632990 tokens: -0.657, valid loss/error: -1.911 28.59
Average loss over 10627571 tokens: -0.659, valid loss/error: -1.746 28.64
Average loss over 10629595 tokens: -0.653, valid loss/error: -1.907 28.65
Average loss over 10634638 tokens: -0.663, valid loss/error: -1.876 28.68
Average loss over 9025024 tokens: -0.651
Epoch: 39, train loss: -0.657, valid loss/error: -1.973 28.67
Average loss over 10589552 tokens: -0.661, valid loss/error: -1.740 28.64
Average loss over 10624271 tokens: -0.653, valid loss/error: -1.697 28.66
Average loss over 10635047 tokens: -0.658, valid loss/error: -1.813 28.62
Average loss over 10645639 tokens: -0.657, valid loss/error: -1.957 28.59
Average loss over 9074116 tokens: -0.657
Epoch: 40, train loss: -0.657, valid loss/error: -1.833 28.65
Average loss over 10627030 tokens: -0.661, valid loss/error: -1.768 28.60
Average loss over 10632981 tokens: -0.660, valid loss/error: -1.644 28.63
Average loss over 10638852 tokens: -0.653, valid loss/error: -1.801 28.66
Average loss over 10628457 tokens: -0.660, valid loss/error: -1.988 28.65
Average loss over 9065198 tokens: -0.651
Epoch: 41, train loss: -0.657, valid loss/error: -1.837 28.63
Average loss over 10615871 tokens: -0.662, valid loss/error: -1.767 28.66
Average loss over 10633652 tokens: -0.660, valid loss/error: -1.767 28.64
Average loss over 10635555 tokens: -0.656, valid loss/error: -1.813 28.64
Average loss over 10605683 tokens: -0.660, valid loss/error: -1.868 28.66
Average loss over 9071525 tokens: -0.649
Epoch: 42, train loss: -0.658, valid loss/error: -1.950 28.69
Average loss over 10629314 tokens: -0.655, valid loss/error: -1.722 28.67
Average loss over 10652382 tokens: -0.663, valid loss/error: -1.891 28.65
Average loss over 10642367 tokens: -0.657, valid loss/error: -1.952 28.65
Average loss over 10627684 tokens: -0.660, valid loss/error: -1.704 28.60
Average loss over 9038277 tokens: -0.658
Epoch: 43, train loss: -0.659, valid loss/error: -1.884 28.69
Average loss over 10634821 tokens: -0.663, valid loss/error: -1.868 28.69
Average loss over 10618543 tokens: -0.660, valid loss/error: -1.982 28.68
Average loss over 10616319 tokens: -0.657, valid loss/error: -1.949 28.61
Average loss over 10629346 tokens: -0.659, valid loss/error: -1.762 28.63
Average loss over 9062972 tokens: -0.654
Epoch: 44, train loss: -0.659, valid loss/error: -1.961 28.62
Average loss over 10617830 tokens: -0.662, valid loss/error: -1.989 28.62
Average loss over 10614765 tokens: -0.659, valid loss/error: -1.950 28.64
Average loss over 10628870 tokens: -0.668, valid loss/error: -1.965 28.65
Average loss over 10629481 tokens: -0.659, valid loss/error: -1.805 28.65
Average loss over 9058957 tokens: -0.654
Epoch: 45, train loss: -0.661, valid loss/error: -1.885 28.64
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python new_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
Init lr: 1e-05, Dev Loss/Error: -0.975 28.98
Average loss over 10576600 tokens: -0.570, valid loss/error: -0.965 28.98
New best model saved
Average loss over 10561615 tokens: -0.598, valid loss/error: -1.349 28.93
New best model saved
Average loss over 10574494 tokens: -0.624, valid loss/error: -1.396 28.95
New best model saved
Average loss over 10559106 tokens: -0.624, valid loss/error: -1.533 28.93
New best model saved
Average loss over 10594881 tokens: -0.624, valid loss/error: -1.580 28.93
New best model saved
Average loss over 10560096 tokens: -0.628, valid loss/error: -1.621 28.93
New best model saved
Average loss over 6664130 tokens: -0.629
Epoch: 1, train loss: -0.613, valid loss/error: -1.657 28.85
New best model saved
Average loss over 10575745 tokens: -0.626, valid loss/error: -1.823 28.89
New best model saved
Average loss over 10584577 tokens: -0.627, valid loss/error: -1.657 28.87
Average loss over 10540820 tokens: -0.631, valid loss/error: -1.782 28.83
New best model saved
Average loss over 10591624 tokens: -0.627, valid loss/error: -1.781 28.89
Average loss over 10563645 tokens: -0.630, valid loss/error: -1.815 28.84
Average loss over 10585801 tokens: -0.627, valid loss/error: -1.829 28.83
New best model saved
Average loss over 6658542 tokens: -0.626
Epoch: 2, train loss: -0.628, valid loss/error: -1.801 28.85
Average loss over 10610301 tokens: -0.632, valid loss/error: -1.855 28.83
New best model saved
Average loss over 10590448 tokens: -0.629, valid loss/error: -1.869 28.84
New best model saved
Average loss over 10567515 tokens: -0.631, valid loss/error: -1.690 28.85
Average loss over 10574554 tokens: -0.629, valid loss/error: -1.881 28.80
New best model saved
Average loss over 10585097 tokens: -0.633, valid loss/error: -1.880 28.85
Average loss over 10567264 tokens: -0.634, valid loss/error: -1.807 28.83
Average loss over 6681230 tokens: -0.624
Epoch: 3, train loss: -0.631, valid loss/error: -1.602 28.83
Average loss over 10571892 tokens: -0.634, valid loss/error: -1.789 28.81
Average loss over 10584787 tokens: -0.628, valid loss/error: -1.698 28.84
Average loss over 10589456 tokens: -0.638, valid loss/error: -1.895 28.79
New best model saved
Average loss over 10567484 tokens: -0.630, valid loss/error: -1.673 28.81
Average loss over 10582510 tokens: -0.633, valid loss/error: -1.788 28.81
Average loss over 10575689 tokens: -0.638, valid loss/error: -1.947 28.81
New best model saved
Average loss over 6679612 tokens: -0.626
Epoch: 4, train loss: -0.633, valid loss/error: -1.785 28.81
Average loss over 10570310 tokens: -0.635, valid loss/error: -1.680 28.83
Average loss over 10601947 tokens: -0.636, valid loss/error: -1.778 28.83
Average loss over 10600628 tokens: -0.632, valid loss/error: -1.652 28.78
New best model saved
Average loss over 10593857 tokens: -0.637, valid loss/error: -1.795 28.78
New best model saved
Average loss over 10581089 tokens: -0.632, valid loss/error: -1.850 28.80
Average loss over 10582225 tokens: -0.638, valid loss/error: -1.839 28.76
New best model saved
Average loss over 6680583 tokens: -0.631
Epoch: 5, train loss: -0.635, valid loss/error: -1.732 28.75
New best model saved
Average loss over 10548535 tokens: -0.634, valid loss/error: -1.968 28.81
New best model saved
Average loss over 10560355 tokens: -0.639, valid loss/error: -1.724 28.77
Average loss over 10576417 tokens: -0.631, valid loss/error: -1.886 28.77
Average loss over 10612929 tokens: -0.639, valid loss/error: -1.930 28.76
Average loss over 10566066 tokens: -0.632, valid loss/error: -1.681 28.78
Average loss over 10597759 tokens: -0.641, valid loss/error: -1.707 28.78
Average loss over 6682272 tokens: -0.633
Epoch: 6, train loss: -0.636, valid loss/error: -1.875 28.76
Average loss over 10577240 tokens: -0.645, valid loss/error: -1.837 28.71
New best model saved
Average loss over 10588525 tokens: -0.640, valid loss/error: -1.645 28.78
Average loss over 10576452 tokens: -0.638, valid loss/error: -1.707 28.74
Average loss over 10568680 tokens: -0.635, valid loss/error: -1.940 28.77
Average loss over 10585902 tokens: -0.639, valid loss/error: -1.732 28.74
Average loss over 10578212 tokens: -0.640, valid loss/error: -1.762 28.70
New best model saved
Average loss over 6640975 tokens: -0.644
Epoch: 7, train loss: -0.640, valid loss/error: -1.852 28.75
Average loss over 10595335 tokens: -0.641, valid loss/error: -1.771 28.72
Average loss over 10573960 tokens: -0.642, valid loss/error: -1.702 28.76
Average loss over 10563623 tokens: -0.642, valid loss/error: -1.823 28.72
Average loss over 10548433 tokens: -0.643, valid loss/error: -1.997 28.75
New best model saved
Average loss over 10584033 tokens: -0.645, valid loss/error: -1.748 28.72
Average loss over 10558609 tokens: -0.642, valid loss/error: -1.685 28.73
Average loss over 6699338 tokens: -0.639
Epoch: 8, train loss: -0.642, valid loss/error: -1.700 28.74
Average loss over 10608448 tokens: -0.644, valid loss/error: -1.827 28.73
Average loss over 10572045 tokens: -0.641, valid loss/error: -1.754 28.74
Average loss over 10560061 tokens: -0.642, valid loss/error: -1.917 28.76
Average loss over 10579835 tokens: -0.640, valid loss/error: -1.651 28.76
Average loss over 10568672 tokens: -0.639, valid loss/error: -1.728 28.75
Average loss over 10546625 tokens: -0.647, valid loss/error: -1.871 28.75
Average loss over 6671920 tokens: -0.644
Epoch: 9, train loss: -0.642, valid loss/error: -1.649 28.71
Average loss over 10567444 tokens: -0.642, valid loss/error: -1.806 28.72
Average loss over 10565476 tokens: -0.644, valid loss/error: -1.723 28.74
Average loss over 10552714 tokens: -0.642, valid loss/error: -1.613 28.73
Average loss over 10548468 tokens: -0.646, valid loss/error: -1.729 28.76
Average loss over 10587807 tokens: -0.644, valid loss/error: -1.913 28.72
Average loss over 10595084 tokens: -0.648, valid loss/error: -1.715 28.71
Average loss over 6661068 tokens: -0.645
Epoch: 10, train loss: -0.644, valid loss/error: -1.847 28.75
Average loss over 10569057 tokens: -0.643, valid loss/error: -1.725 28.72
Average loss over 10569425 tokens: -0.644, valid loss/error: -1.717 28.71
Average loss over 10599093 tokens: -0.650, valid loss/error: -1.939 28.68
New best model saved
Average loss over 10578518 tokens: -0.648, valid loss/error: -1.766 28.74
Average loss over 10576331 tokens: -0.648, valid loss/error: -1.770 28.74
Average loss over 10602467 tokens: -0.649, valid loss/error: -1.802 28.74
Average loss over 6663387 tokens: -0.644
Epoch: 11, train loss: -0.647, valid loss/error: -1.877 28.72
Average loss over 10554197 tokens: -0.647, valid loss/error: -1.957 28.67
New best model saved
Average loss over 10543346 tokens: -0.646, valid loss/error: -1.742 28.70
Average loss over 10553071 tokens: -0.647, valid loss/error: -1.628 28.68
Average loss over 10555583 tokens: -0.649, valid loss/error: -1.913 28.73
Average loss over 10600821 tokens: -0.643, valid loss/error: -1.948 28.66
New best model saved
Average loss over 10594947 tokens: -0.650, valid loss/error: -1.656 28.71
Average loss over 6682697 tokens: -0.644
Epoch: 12, train loss: -0.647, valid loss/error: -1.792 28.71
Average loss over 10585913 tokens: -0.650, valid loss/error: -1.786 28.69
Average loss over 10561101 tokens: -0.644, valid loss/error: -1.682 28.68
Average loss over 10580204 tokens: -0.655, valid loss/error: -1.869 28.70
Average loss over 10555611 tokens: -0.657, valid loss/error: -1.723 28.66
Average loss over 10571900 tokens: -0.645, valid loss/error: -1.835 28.68
Average loss over 10585287 tokens: -0.651, valid loss/error: -1.643 28.68
Average loss over 6684577 tokens: -0.645
Epoch: 13, train loss: -0.650, valid loss/error: -1.697 28.67
Average loss over 10587478 tokens: -0.657, valid loss/error: -1.820 28.73
Average loss over 10576260 tokens: -0.648, valid loss/error: -1.760 28.70
Average loss over 10536824 tokens: -0.651, valid loss/error: -1.788 28.68
Average loss over 10570071 tokens: -0.647, valid loss/error: -1.728 28.70
Average loss over 10595817 tokens: -0.647, valid loss/error: -1.815 28.67
Average loss over 10585115 tokens: -0.644, valid loss/error: -1.820 28.68
Average loss over 6700638 tokens: -0.657
Epoch: 14, train loss: -0.650, valid loss/error: -1.881 28.66
Average loss over 10581957 tokens: -0.649, valid loss/error: -1.735 28.67
Average loss over 10556606 tokens: -0.651, valid loss/error: -1.893 28.67
Average loss over 10550524 tokens: -0.656, valid loss/error: -1.821 28.67
Average loss over 10576097 tokens: -0.653, valid loss/error: -1.891 28.68
Average loss over 10562315 tokens: -0.651, valid loss/error: -1.918 28.66
New best model saved
Average loss over 10581117 tokens: -0.647, valid loss/error: -1.793 28.67
Average loss over 6686177 tokens: -0.646
Epoch: 15, train loss: -0.651, valid loss/error: -1.837 28.70
Average loss over 10623592 tokens: -0.658, valid loss/error: -1.835 28.71
Average loss over 10587506 tokens: -0.647, valid loss/error: -1.858 28.68
Average loss over 10573020 tokens: -0.653, valid loss/error: -1.964 28.64
New best model saved
Average loss over 10582547 tokens: -0.648, valid loss/error: -1.869 28.68
Average loss over 10542062 tokens: -0.650, valid loss/error: -1.895 28.69
Average loss over 10542648 tokens: -0.650, valid loss/error: -1.930 28.65
Average loss over 6678758 tokens: -0.648
Epoch: 16, train loss: -0.651, valid loss/error: -1.920 28.60
New best model saved
Average loss over 10571891 tokens: -0.649, valid loss/error: -1.744 28.57
New best model saved
Average loss over 10563495 tokens: -0.658, valid loss/error: -1.754 28.63
Average loss over 10582965 tokens: -0.654, valid loss/error: -1.761 28.65
Average loss over 10559311 tokens: -0.656, valid loss/error: -1.796 28.65
Average loss over 10562960 tokens: -0.649, valid loss/error: -1.787 28.62
Average loss over 10580674 tokens: -0.649, valid loss/error: -1.796 28.63
Average loss over 6665232 tokens: -0.651
Epoch: 17, train loss: -0.652, valid loss/error: -1.940 28.62
Average loss over 10564663 tokens: -0.654, valid loss/error: -1.787 28.57
Average loss over 10557057 tokens: -0.656, valid loss/error: -1.720 28.67
Average loss over 10571089 tokens: -0.655, valid loss/error: -1.931 28.63
Average loss over 10569594 tokens: -0.656, valid loss/error: -1.707 28.63
Average loss over 10583325 tokens: -0.652, valid loss/error: -1.801 28.63
Average loss over 10574981 tokens: -0.656, valid loss/error: -1.884 28.62
Average loss over 6676841 tokens: -0.647
Epoch: 18, train loss: -0.654, valid loss/error: -1.654 28.62
Average loss over 10588570 tokens: -0.654, valid loss/error: -1.659 28.62
Average loss over 10568256 tokens: -0.655, valid loss/error: -1.686 28.58
Average loss over 10561728 tokens: -0.650, valid loss/error: -1.812 28.65
Average loss over 10559756 tokens: -0.657, valid loss/error: -1.758 28.64
Average loss over 10552005 tokens: -0.650, valid loss/error: -1.781 28.60
Average loss over 10584464 tokens: -0.658, valid loss/error: -1.889 28.63
Average loss over 6666595 tokens: -0.655
Epoch: 19, train loss: -0.654, valid loss/error: -1.915 28.65
Average loss over 10562068 tokens: -0.653, valid loss/error: -1.817 28.59
Average loss over 10585604 tokens: -0.657, valid loss/error: -1.975 28.63
Average loss over 10566993 tokens: -0.655, valid loss/error: -1.792 28.59
Average loss over 10611287 tokens: -0.657, valid loss/error: -1.827 28.60
Average loss over 10564417 tokens: -0.656, valid loss/error: -1.959 28.65
Average loss over 10563478 tokens: -0.655, valid loss/error: -1.935 28.63
Average loss over 6675275 tokens: -0.647
Epoch: 20, train loss: -0.655, valid loss/error: -1.822 28.62
Average loss over 10587311 tokens: -0.658, valid loss/error: -1.886 28.67
Average loss over 10568796 tokens: -0.659, valid loss/error: -1.770 28.64
Average loss over 10577282 tokens: -0.660, valid loss/error: -1.813 28.62
Average loss over 10557459 tokens: -0.654, valid loss/error: -1.803 28.62
Average loss over 10581176 tokens: -0.657, valid loss/error: -1.989 28.60
Average loss over 10559665 tokens: -0.650, valid loss/error: -1.813 28.62
Average loss over 6667629 tokens: -0.656
Epoch: 21, train loss: -0.656, valid loss/error: -1.857 28.68
Average loss over 10577634 tokens: -0.655, valid loss/error: -1.871 28.61
Average loss over 10556022 tokens: -0.651, valid loss/error: -1.787 28.65
Average loss over 10549491 tokens: -0.656, valid loss/error: -1.884 28.65
Average loss over 10582423 tokens: -0.665, valid loss/error: -1.730 28.62
Average loss over 10565271 tokens: -0.659, valid loss/error: -1.792 28.65
Average loss over 10583647 tokens: -0.652, valid loss/error: -1.840 28.65
Average loss over 6648404 tokens: -0.656
Epoch: 22, train loss: -0.656, valid loss/error: -1.899 28.66
Average loss over 10584162 tokens: -0.654, valid loss/error: -1.766 28.66
Average loss over 10566176 tokens: -0.652, valid loss/error: -1.826 28.66
Average loss over 10596736 tokens: -0.660, valid loss/error: -1.781 28.64
Average loss over 10571205 tokens: -0.658, valid loss/error: -1.903 28.63
Average loss over 10560811 tokens: -0.660, valid loss/error: -1.911 28.67
Average loss over 10557914 tokens: -0.658, valid loss/error: -1.821 28.64
Average loss over 6690848 tokens: -0.655
Epoch: 23, train loss: -0.657, valid loss/error: -1.709 28.69
Average loss over 10591478 tokens: -0.658, valid loss/error: -1.827 28.64
Average loss over 10592759 tokens: -0.657, valid loss/error: -1.895 28.63
Average loss over 10578055 tokens: -0.655, valid loss/error: -1.792 28.58
Average loss over 10565501 tokens: -0.658, valid loss/error: -1.735 28.61
Average loss over 10567044 tokens: -0.655, valid loss/error: -1.780 28.60
Average loss over 10581629 tokens: -0.661, valid loss/error: -1.721 28.62
Average loss over 6657433 tokens: -0.658
Epoch: 24, train loss: -0.657, valid loss/error: -2.032 28.60
New best model saved
Average loss over 10583740 tokens: -0.660, valid loss/error: -1.742 28.61
Average loss over 10562420 tokens: -0.657, valid loss/error: -1.667 28.62
Average loss over 10576269 tokens: -0.659, valid loss/error: -1.730 28.63
Average loss over 10562231 tokens: -0.664, valid loss/error: -1.859 28.62
Average loss over 10581620 tokens: -0.654, valid loss/error: -1.880 28.64
Average loss over 10604502 tokens: -0.661, valid loss/error: -1.855 28.62
Average loss over 6678438 tokens: -0.657
Epoch: 25, train loss: -0.659, valid loss/error: -1.887 28.65
Average loss over 10581456 tokens: -0.662, valid loss/error: -1.924 28.62
Average loss over 10602652 tokens: -0.659, valid loss/error: -1.825 28.60
Average loss over 10566870 tokens: -0.665, valid loss/error: -1.701 28.64
Average loss over 10558784 tokens: -0.662, valid loss/error: -1.790 28.54
New best model saved
Average loss over 10583601 tokens: -0.662, valid loss/error: -1.881 28.63
Average loss over 10557535 tokens: -0.654, valid loss/error: -1.866 28.55
Average loss over 6657059 tokens: -0.656
Epoch: 26, train loss: -0.660, valid loss/error: -1.887 28.64
Average loss over 10550206 tokens: -0.650, valid loss/error: -1.807 28.61
Average loss over 10576133 tokens: -0.655, valid loss/error: -1.794 28.64
Average loss over 10554119 tokens: -0.665, valid loss/error: -1.769 28.59
Average loss over 10561703 tokens: -0.656, valid loss/error: -1.773 28.61
Average loss over 10586226 tokens: -0.661, valid loss/error: -1.916 28.61
Average loss over 10552107 tokens: -0.665, valid loss/error: -1.871 28.63
Average loss over 6701408 tokens: -0.665
Epoch: 27, train loss: -0.659, valid loss/error: -1.980 28.59
Average loss over 10579443 tokens: -0.661, valid loss/error: -1.848 28.60
Average loss over 10546509 tokens: -0.653, valid loss/error: -1.916 28.64
Average loss over 10587524 tokens: -0.662, valid loss/error: -1.795 28.60
Average loss over 10586434 tokens: -0.666, valid loss/error: -1.820 28.61
Average loss over 10569290 tokens: -0.659, valid loss/error: -1.832 28.56
Average loss over 10591288 tokens: -0.658, valid loss/error: -1.836 28.60
Average loss over 6669611 tokens: -0.663
Epoch: 28, train loss: -0.660, valid loss/error: -1.907 28.58
Average loss over 10554191 tokens: -0.663, valid loss/error: -1.962 28.60
Average loss over 10582833 tokens: -0.666, valid loss/error: -1.785 28.54
Average loss over 10571580 tokens: -0.655, valid loss/error: -1.885 28.58
Average loss over 10559850 tokens: -0.662, valid loss/error: -1.836 28.59
Average loss over 10604890 tokens: -0.661, valid loss/error: -2.057 28.61
New best model saved
Average loss over 10570703 tokens: -0.656, valid loss/error: -1.829 28.60
Average loss over 6687853 tokens: -0.661
Epoch: 29, train loss: -0.660, valid loss/error: -1.775 28.61
Average loss over 10615317 tokens: -0.667, valid loss/error: -1.891 28.55
Average loss over 10575233 tokens: -0.657, valid loss/error: -1.893 28.59
Average loss over 10584946 tokens: -0.664, valid loss/error: -1.870 28.63
Average loss over 10584074 tokens: -0.657, valid loss/error: -1.827 28.63
Average loss over 10572646 tokens: -0.662, valid loss/error: -1.735 28.59
Average loss over 10577470 tokens: -0.662, valid loss/error: -1.965 28.58
Average loss over 6639356 tokens: -0.657
Epoch: 30, train loss: -0.661, valid loss/error: -1.918 28.53
New best model saved
Average loss over 10568620 tokens: -0.660, valid loss/error: -1.879 28.57
Average loss over 10572971 tokens: -0.661, valid loss/error: -1.835 28.55
Average loss over 10568396 tokens: -0.658, valid loss/error: -1.823 28.58
Average loss over 10561196 tokens: -0.662, valid loss/error: -1.733 28.59
Average loss over 10598809 tokens: -0.668, valid loss/error: -1.864 28.55
Average loss over 10592078 tokens: -0.662, valid loss/error: -1.834 28.56
Average loss over 6672818 tokens: -0.664
Epoch: 31, train loss: -0.662, valid loss/error: -1.813 28.59
Average loss over 10607051 tokens: -0.660, valid loss/error: -1.944 28.56
Average loss over 10577456 tokens: -0.669, valid loss/error: -1.861 28.60
Average loss over 10573738 tokens: -0.664, valid loss/error: -1.910 28.58
Average loss over 10548499 tokens: -0.665, valid loss/error: -2.145 28.53
New best model saved
Average loss over 10571770 tokens: -0.659, valid loss/error: -1.751 28.59
Average loss over 10567919 tokens: -0.669, valid loss/error: -2.058 28.52
New best model saved
Average loss over 6670859 tokens: -0.659
Epoch: 32, train loss: -0.664, valid loss/error: -1.685 28.54
Average loss over 10573340 tokens: -0.660, valid loss/error: -1.771 28.56
Average loss over 10570563 tokens: -0.667, valid loss/error: -1.842 28.60
Average loss over 10590279 tokens: -0.663, valid loss/error: -1.897 28.55
Average loss over 10552006 tokens: -0.667, valid loss/error: -1.845 28.56
Average loss over 10562922 tokens: -0.666, valid loss/error: -1.895 28.56
Average loss over 10563132 tokens: -0.662, valid loss/error: -1.754 28.57
Average loss over 6661891 tokens: -0.660
Epoch: 33, train loss: -0.664, valid loss/error: -1.918 28.53
Average loss over 10571465 tokens: -0.668, valid loss/error: -1.930 28.56
Average loss over 10580252 tokens: -0.664, valid loss/error: -1.829 28.57
Average loss over 10590289 tokens: -0.659, valid loss/error: -1.765 28.54
Average loss over 10571588 tokens: -0.664, valid loss/error: -1.737 28.55
Average loss over 10579924 tokens: -0.666, valid loss/error: -1.767 28.51
New best model saved
Average loss over 10588654 tokens: -0.661, valid loss/error: -1.732 28.54
Average loss over 6664212 tokens: -0.662
Epoch: 34, train loss: -0.664, valid loss/error: -1.776 28.60
Average loss over 10592167 tokens: -0.670, valid loss/error: -1.902 28.58
Average loss over 10572391 tokens: -0.664, valid loss/error: -1.985 28.57
Average loss over 10582387 tokens: -0.661, valid loss/error: -1.912 28.53
Average loss over 10558118 tokens: -0.663, valid loss/error: -1.775 28.47
New best model saved
Average loss over 10598523 tokens: -0.663, valid loss/error: -1.695 28.54
Average loss over 10584415 tokens: -0.665, valid loss/error: -1.749 28.54
Average loss over 6658596 tokens: -0.652
Epoch: 35, train loss: -0.663, valid loss/error: -1.839 28.52
Average loss over 10595852 tokens: -0.659, valid loss/error: -1.791 28.51
Average loss over 10568540 tokens: -0.667, valid loss/error: -1.814 28.50
Average loss over 10581959 tokens: -0.666, valid loss/error: -1.898 28.50
Average loss over 10572208 tokens: -0.664, valid loss/error: -1.782 28.52
Average loss over 10576134 tokens: -0.661, valid loss/error: -1.720 28.46
New best model saved
Average loss over 10561138 tokens: -0.668, valid loss/error: -1.794 28.51
Average loss over 6679608 tokens: -0.667
Epoch: 36, train loss: -0.665, valid loss/error: -1.796 28.52
Average loss over 10568122 tokens: -0.667, valid loss/error: -1.758 28.51
Average loss over 10566134 tokens: -0.662, valid loss/error: -1.883 28.57
Average loss over 10594900 tokens: -0.667, valid loss/error: -1.848 28.52
Average loss over 10573349 tokens: -0.657, valid loss/error: -1.831 28.51
Average loss over 10594754 tokens: -0.662, valid loss/error: -1.807 28.51
Average loss over 10568223 tokens: -0.669, valid loss/error: -1.902 28.51
Average loss over 6695717 tokens: -0.671
Epoch: 37, train loss: -0.665, valid loss/error: -1.802 28.48
Average loss over 10564964 tokens: -0.664, valid loss/error: -1.761 28.54
Average loss over 10582872 tokens: -0.664, valid loss/error: -1.870 28.56
Average loss over 10565814 tokens: -0.662, valid loss/error: -1.822 28.53
Average loss over 10573018 tokens: -0.667, valid loss/error: -1.973 28.53
Average loss over 10581883 tokens: -0.670, valid loss/error: -2.017 28.52
Average loss over 10572012 tokens: -0.671, valid loss/error: -2.038 28.57
Average loss over 6670803 tokens: -0.659
Epoch: 38, train loss: -0.666, valid loss/error: -1.940 28.48
Average loss over 10609132 tokens: -0.661, valid loss/error: -2.011 28.51
Average loss over 10565598 tokens: -0.673, valid loss/error: -1.724 28.52
Average loss over 10560980 tokens: -0.663, valid loss/error: -1.768 28.50
Average loss over 10579376 tokens: -0.661, valid loss/error: -1.761 28.49
Average loss over 10605117 tokens: -0.667, valid loss/error: -2.065 28.51
Average loss over 10562199 tokens: -0.667, valid loss/error: -1.946 28.49
Average loss over 6681004 tokens: -0.672
Epoch: 39, train loss: -0.666, valid loss/error: -1.677 28.50
Average loss over 10545278 tokens: -0.662, valid loss/error: -2.064 28.56
Average loss over 10577027 tokens: -0.664, valid loss/error: -1.957 28.57
Average loss over 10548303 tokens: -0.664, valid loss/error: -1.885 28.57
Average loss over 10559157 tokens: -0.673, valid loss/error: -1.744 28.50
Average loss over 10565629 tokens: -0.667, valid loss/error: -1.903 28.51
Average loss over 10595553 tokens: -0.665, valid loss/error: -1.896 28.54
Average loss over 6677034 tokens: -0.664
Epoch: 40, train loss: -0.666, valid loss/error: -1.796 28.54
Average loss over 10543182 tokens: -0.665, valid loss/error: -1.960 28.54
Average loss over 10582788 tokens: -0.667, valid loss/error: -1.786 28.53
Average loss over 10567430 tokens: -0.670, valid loss/error: -1.770 28.50
Average loss over 10577063 tokens: -0.664, valid loss/error: -1.766 28.48
Average loss over 10597930 tokens: -0.669, valid loss/error: -1.791 28.48
Average loss over 10578022 tokens: -0.666, valid loss/error: -1.823 28.48
Average loss over 6674606 tokens: -0.665
Epoch: 41, train loss: -0.666, valid loss/error: -1.925 28.51
Average loss over 10584268 tokens: -0.668, valid loss/error: -2.060 28.51
Average loss over 10566945 tokens: -0.671, valid loss/error: -1.917 28.49
Average loss over 10561231 tokens: -0.664, valid loss/error: -1.912 28.52
Average loss over 10595230 tokens: -0.671, valid loss/error: -1.922 28.49
Average loss over 10580672 tokens: -0.662, valid loss/error: -1.893 28.46
Average loss over 10533537 tokens: -0.662, valid loss/error: -1.877 28.52
Average loss over 6693635 tokens: -0.671
Epoch: 42, train loss: -0.667, valid loss/error: -2.030 28.52
Average loss over 10555485 tokens: -0.666, valid loss/error: -1.815 28.54
Average loss over 10576680 tokens: -0.670, valid loss/error: -1.813 28.49
Average loss over 10596081 tokens: -0.667, valid loss/error: -1.863 28.46
Average loss over 10580203 tokens: -0.668, valid loss/error: -1.835 28.48
Average loss over 10557827 tokens: -0.670, valid loss/error: -1.695 28.48
Average loss over 10577470 tokens: -0.664, valid loss/error: -1.790 28.49
Average loss over 6657510 tokens: -0.663
Epoch: 43, train loss: -0.667, valid loss/error: -1.749 28.50
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
Init lr: 1e-05, Dev Loss/Error: -0.975 28.98
Average loss over 21287199 tokens: -0.570, valid loss/error: -1.518 29.01
New best model saved
Average loss over 21224234 tokens: -0.608, valid loss/error: -1.671 28.95
New best model saved
Average loss over 21257888 tokens: -0.615, valid loss/error: -1.757 28.91
New best model saved
Average loss over 20841948 tokens: -0.619
Epoch: 1, train loss: -0.603, valid loss/error: -1.807 28.91
New best model saved
Average loss over 21221508 tokens: -0.618, valid loss/error: -1.842 28.86
New best model saved
Average loss over 21272877 tokens: -0.623, valid loss/error: -1.810 28.90
Average loss over 21307695 tokens: -0.617, valid loss/error: -1.786 28.80
New best model saved
Average loss over 20807543 tokens: -0.615
Epoch: 2, train loss: -0.618, valid loss/error: -1.778 28.83
Average loss over 21232821 tokens: -0.616, valid loss/error: -1.862 28.82
New best model saved
Average loss over 21237512 tokens: -0.625, valid loss/error: -1.890 28.88
New best model saved
Average loss over 21276005 tokens: -0.623, valid loss/error: -1.778 28.80
Average loss over 20843726 tokens: -0.619
Epoch: 3, train loss: -0.621, valid loss/error: -1.670 28.80
New best model saved
Average loss over 21216946 tokens: -0.623, valid loss/error: -1.778 28.78
New best model saved
Average loss over 21261672 tokens: -0.624, valid loss/error: -1.850 28.83
Average loss over 21239452 tokens: -0.623, valid loss/error: -1.712 28.81
Average loss over 20850524 tokens: -0.624
Epoch: 4, train loss: -0.623, valid loss/error: -1.763 28.80
Average loss over 21248338 tokens: -0.627, valid loss/error: -1.764 28.81
Average loss over 21287410 tokens: -0.625, valid loss/error: -1.853 28.77
New best model saved
Average loss over 21262467 tokens: -0.626, valid loss/error: -1.832 28.77
Average loss over 20852796 tokens: -0.622
Epoch: 5, train loss: -0.625, valid loss/error: -1.840 28.77
New best model saved
Average loss over 21224883 tokens: -0.632, valid loss/error: -1.812 28.81
Average loss over 21220000 tokens: -0.630, valid loss/error: -1.806 28.76
New best model saved
Average loss over 21234042 tokens: -0.628, valid loss/error: -1.808 28.77
Average loss over 20888520 tokens: -0.630
Epoch: 6, train loss: -0.630, valid loss/error: -1.867 28.73
New best model saved
Average loss over 21254736 tokens: -0.627, valid loss/error: -1.675 28.73
Average loss over 21282497 tokens: -0.630, valid loss/error: -1.810 28.75
Average loss over 21245678 tokens: -0.627, valid loss/error: -1.788 28.72
New best model saved
Average loss over 20836455 tokens: -0.632
Epoch: 7, train loss: -0.629, valid loss/error: -1.687 28.72
New best model saved
Average loss over 21235378 tokens: -0.631, valid loss/error: -1.760 28.73
Average loss over 21258516 tokens: -0.634, valid loss/error: -1.842 28.71
New best model saved
Average loss over 21202345 tokens: -0.632, valid loss/error: -1.692 28.69
New best model saved
Average loss over 20842473 tokens: -0.629
Epoch: 8, train loss: -0.631, valid loss/error: -1.723 28.64
New best model saved
Average loss over 21223344 tokens: -0.634, valid loss/error: -1.863 28.73
Average loss over 21283865 tokens: -0.634, valid loss/error: -1.682 28.70
Average loss over 21251814 tokens: -0.634, valid loss/error: -1.606 28.71
Average loss over 20792654 tokens: -0.629
Epoch: 9, train loss: -0.633, valid loss/error: -1.787 28.66
Average loss over 21248138 tokens: -0.636, valid loss/error: -1.738 28.67
Average loss over 21240077 tokens: -0.636, valid loss/error: -1.860 28.66
Average loss over 21254718 tokens: -0.635, valid loss/error: -1.839 28.69
Average loss over 20851297 tokens: -0.633
Epoch: 10, train loss: -0.635, valid loss/error: -1.957 28.64
New best model saved
Average loss over 21238662 tokens: -0.635, valid loss/error: -1.729 28.67
Average loss over 21210088 tokens: -0.635, valid loss/error: -1.718 28.65
Average loss over 21237307 tokens: -0.637, valid loss/error: -1.856 28.69
Average loss over 20839231 tokens: -0.638
Epoch: 11, train loss: -0.636, valid loss/error: -1.784 28.65
Average loss over 21296266 tokens: -0.633, valid loss/error: -1.907 28.69
Average loss over 21248626 tokens: -0.641, valid loss/error: -1.906 28.64
New best model saved
Average loss over 21201023 tokens: -0.636, valid loss/error: -1.815 28.62
New best model saved
Average loss over 20869044 tokens: -0.637
Epoch: 12, train loss: -0.637, valid loss/error: -1.734 28.60
New best model saved
Average loss over 21270783 tokens: -0.642, valid loss/error: -1.733 28.65
Average loss over 21247139 tokens: -0.638, valid loss/error: -1.890 28.66
Average loss over 21246085 tokens: -0.640, valid loss/error: -1.730 28.64
Average loss over 20838386 tokens: -0.631
Epoch: 13, train loss: -0.638, valid loss/error: -1.876 28.61
Average loss over 21275012 tokens: -0.640, valid loss/error: -1.795 28.61
Average loss over 21248405 tokens: -0.638, valid loss/error: -1.857 28.68
Average loss over 21275665 tokens: -0.641, valid loss/error: -2.028 28.63
New best model saved
Average loss over 20822055 tokens: -0.638
Epoch: 14, train loss: -0.639, valid loss/error: -1.819 28.64
Average loss over 21220136 tokens: -0.641, valid loss/error: -1.674 28.59
New best model saved
Average loss over 21266081 tokens: -0.639, valid loss/error: -2.074 28.64
New best model saved
Average loss over 21246262 tokens: -0.639, valid loss/error: -1.840 28.66
Average loss over 20868465 tokens: -0.639
Epoch: 15, train loss: -0.640, valid loss/error: -1.751 28.63
Average loss over 21252548 tokens: -0.640, valid loss/error: -1.692 28.62
Average loss over 21250355 tokens: -0.637, valid loss/error: -1.967 28.65
Average loss over 21286737 tokens: -0.645, valid loss/error: -1.821 28.62
Average loss over 20843386 tokens: -0.645
Epoch: 16, train loss: -0.642, valid loss/error: -1.764 28.59
Average loss over 21315923 tokens: -0.645, valid loss/error: -1.699 28.63
Average loss over 21290175 tokens: -0.639, valid loss/error: -1.796 28.59
Average loss over 21237176 tokens: -0.640, valid loss/error: -1.829 28.63
Average loss over 20820511 tokens: -0.641
Epoch: 17, train loss: -0.642, valid loss/error: -1.759 28.66
Average loss over 21214205 tokens: -0.645, valid loss/error: -1.691 28.57
New best model saved
Average loss over 21225378 tokens: -0.644, valid loss/error: -1.736 28.62
Average loss over 21241232 tokens: -0.644, valid loss/error: -1.780 28.60
Average loss over 20913628 tokens: -0.641
Epoch: 18, train loss: -0.644, valid loss/error: -1.758 28.64
Average loss over 21248511 tokens: -0.650, valid loss/error: -1.869 28.65
Average loss over 21266054 tokens: -0.644, valid loss/error: -1.985 28.67
Average loss over 21211586 tokens: -0.645, valid loss/error: -1.901 28.61
Average loss over 20870920 tokens: -0.639
Epoch: 19, train loss: -0.644, valid loss/error: -1.944 28.63
Average loss over 21270227 tokens: -0.644, valid loss/error: -2.020 28.58
Average loss over 21299177 tokens: -0.648, valid loss/error: -1.706 28.63
Average loss over 21235403 tokens: -0.642, valid loss/error: -1.844 28.61
Average loss over 20849285 tokens: -0.646
Epoch: 20, train loss: -0.645, valid loss/error: -1.709 28.61
Average loss over 21256073 tokens: -0.646, valid loss/error: -1.804 28.58
Average loss over 21255106 tokens: -0.646, valid loss/error: -1.855 28.59
Average loss over 21210581 tokens: -0.647, valid loss/error: -1.736 28.59
Average loss over 20828950 tokens: -0.644
Epoch: 21, train loss: -0.646, valid loss/error: -1.990 28.66
Average loss over 21228907 tokens: -0.645, valid loss/error: -1.775 28.62
Average loss over 21235258 tokens: -0.646, valid loss/error: -1.804 28.64
Average loss over 21270464 tokens: -0.650, valid loss/error: -1.799 28.61
Average loss over 20839326 tokens: -0.647
Epoch: 22, train loss: -0.647, valid loss/error: -1.840 28.62
Average loss over 21248896 tokens: -0.650, valid loss/error: -1.758 28.62
Average loss over 21248123 tokens: -0.649, valid loss/error: -1.769 28.63
Average loss over 21255323 tokens: -0.645, valid loss/error: -1.782 28.65
Average loss over 20813003 tokens: -0.645
Epoch: 23, train loss: -0.647, valid loss/error: -1.831 28.60
Average loss over 21258330 tokens: -0.648, valid loss/error: -1.860 28.62
Average loss over 21214926 tokens: -0.653, valid loss/error: -1.871 28.57
New best model saved
Average loss over 21274902 tokens: -0.650, valid loss/error: -1.774 28.61
Average loss over 20847792 tokens: -0.641
Epoch: 24, train loss: -0.648, valid loss/error: -1.848 28.62
Average loss over 21225346 tokens: -0.649, valid loss/error: -1.892 28.57
Average loss over 21225619 tokens: -0.646, valid loss/error: -1.962 28.59
Average loss over 21266631 tokens: -0.651, valid loss/error: -1.796 28.59
Average loss over 20842304 tokens: -0.645
Epoch: 25, train loss: -0.648, valid loss/error: -1.761 28.59
Average loss over 21247576 tokens: -0.651, valid loss/error: -1.761 28.63
Average loss over 21288462 tokens: -0.648, valid loss/error: -1.887 28.60
Average loss over 21301452 tokens: -0.647, valid loss/error: -1.902 28.64
Average loss over 20859836 tokens: -0.646
Epoch: 26, train loss: -0.648, valid loss/error: -1.760 28.57
Average loss over 21221326 tokens: -0.650, valid loss/error: -1.920 28.60
Average loss over 21271387 tokens: -0.651, valid loss/error: -1.801 28.60
Average loss over 21240232 tokens: -0.651, valid loss/error: -1.938 28.63
Average loss over 20872888 tokens: -0.648
Epoch: 27, train loss: -0.650, valid loss/error: -1.678 28.60
Average loss over 21240408 tokens: -0.654, valid loss/error: -1.966 28.56
New best model saved
Average loss over 21278434 tokens: -0.650, valid loss/error: -1.797 28.57
Average loss over 21257758 tokens: -0.649, valid loss/error: -1.861 28.60
Average loss over 20842906 tokens: -0.647
Epoch: 28, train loss: -0.650, valid loss/error: -1.864 28.56
Average loss over 21270346 tokens: -0.651, valid loss/error: -1.758 28.60
Average loss over 21262419 tokens: -0.647, valid loss/error: -1.782 28.56
New best model saved
Average loss over 21271214 tokens: -0.651, valid loss/error: -1.961 28.56
Average loss over 20823947 tokens: -0.652
Epoch: 29, train loss: -0.650, valid loss/error: -1.945 28.59
Average loss over 21263851 tokens: -0.654, valid loss/error: -1.836 28.63
Average loss over 21244064 tokens: -0.650, valid loss/error: -1.972 28.63
Average loss over 21284312 tokens: -0.650, valid loss/error: -1.897 28.57
Average loss over 20854439 tokens: -0.648
Epoch: 30, train loss: -0.651, valid loss/error: -1.697 28.55
New best model saved
Average loss over 21252534 tokens: -0.650, valid loss/error: -1.916 28.61
Average loss over 21297528 tokens: -0.654, valid loss/error: -1.683 28.61
Average loss over 21228293 tokens: -0.653, valid loss/error: -2.046 28.61
Average loss over 632817 tokens: -0.660
Epoch: 31, train loss: -0.652, valid loss/error: -1.857 28.58
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python normal_train_distill.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
Init lr: 1e-05, Dev Loss/Error: -1.065 28.98
Average loss over 10580181 tokens: -0.578, valid loss/error: -1.013 28.99
Average loss over 10623501 tokens: -0.590, valid loss/error: -1.376 28.93
New best model saved
Average loss over 10633971 tokens: -0.613, valid loss/error: -1.405 28.93
New best model saved
Average loss over 10633681 tokens: -0.614, valid loss/error: -1.376 28.91
New best model saved
Average loss over 10606323 tokens: -0.617, valid loss/error: -1.488 28.92
New best model saved
Average loss over 10618032 tokens: -0.620, valid loss/error: -1.542 28.88
New best model saved
Average loss over 10597193 tokens: -0.623, valid loss/error: -1.613 28.87
New best model saved
Average loss over 10627093 tokens: -0.616, valid loss/error: -1.624 28.84
New best model saved
Average loss over 10608310 tokens: -0.621, valid loss/error: -1.758 28.84
New best model saved
Average loss over 10604672 tokens: -0.621, valid loss/error: -1.771 28.89
New best model saved
Average loss over 10597062 tokens: -0.622, valid loss/error: -1.763 28.85
Average loss over 10598345 tokens: -0.622, valid loss/error: -1.789 28.83
New best model saved
Average loss over 10626741 tokens: -0.623, valid loss/error: -1.812 28.85
New best model saved
Average loss over 10613112 tokens: -0.620, valid loss/error: -1.749 28.83
Average loss over 10620511 tokens: -0.621, valid loss/error: -1.677 28.82
New best model saved
Average loss over 10601208 tokens: -0.619, valid loss/error: -1.870 28.84
New best model saved
Average loss over 10588071 tokens: -0.621, valid loss/error: -1.727 28.84
Average loss over 10586514 tokens: -0.621, valid loss/error: -1.866 28.81
New best model saved
Average loss over 10606785 tokens: -0.624, valid loss/error: -1.842 28.83
Average loss over 9498146 tokens: -0.625
Epoch: 1, train loss: -0.617, valid loss/error: -1.685 28.82
Average loss over 10599027 tokens: -0.626, valid loss/error: -1.991 28.83
New best model saved
Average loss over 10594094 tokens: -0.625, valid loss/error: -1.762 28.77
New best model saved
Average loss over 10597479 tokens: -0.622, valid loss/error: -1.760 28.77
Average loss over 10591038 tokens: -0.627, valid loss/error: -1.781 28.77
Average loss over 10602882 tokens: -0.625, valid loss/error: -1.731 28.77
New best model saved
Average loss over 10612381 tokens: -0.630, valid loss/error: -1.629 28.82
Average loss over 10599978 tokens: -0.629, valid loss/error: -1.903 28.83
Average loss over 10618518 tokens: -0.625, valid loss/error: -1.781 28.73
New best model saved
Average loss over 10609497 tokens: -0.627, valid loss/error: -1.789 28.71
New best model saved
Average loss over 10648226 tokens: -0.627, valid loss/error: -1.730 28.75
Average loss over 10611668 tokens: -0.627, valid loss/error: -1.756 28.71
Average loss over 10604759 tokens: -0.627, valid loss/error: -1.745 28.75
Average loss over 10641976 tokens: -0.630, valid loss/error: -1.654 28.77
Average loss over 10637154 tokens: -0.627, valid loss/error: -1.815 28.74
Average loss over 10611243 tokens: -0.629, valid loss/error: -1.837 28.77
Average loss over 10570545 tokens: -0.628, valid loss/error: -1.816 28.76
Average loss over 10601595 tokens: -0.627, valid loss/error: -1.844 28.81
Average loss over 10629365 tokens: -0.631, valid loss/error: -1.886 28.80
Average loss over 10593231 tokens: -0.628, valid loss/error: -1.793 28.77
Average loss over 9494796 tokens: -0.628
Epoch: 2, train loss: -0.627, valid loss/error: -1.707 28.78
Average loss over 10629560 tokens: -0.635, valid loss/error: -1.851 28.78
Average loss over 10605766 tokens: -0.634, valid loss/error: -1.876 28.76
Average loss over 10621855 tokens: -0.635, valid loss/error: -1.920 28.75
Average loss over 10604812 tokens: -0.631, valid loss/error: -1.763 28.74
Average loss over 10600393 tokens: -0.629, valid loss/error: -1.636 28.75
Average loss over 10599543 tokens: -0.630, valid loss/error: -1.890 28.72
Average loss over 10611137 tokens: -0.633, valid loss/error: -1.671 28.74
Average loss over 10638469 tokens: -0.632, valid loss/error: -1.860 28.72
Average loss over 10613510 tokens: -0.635, valid loss/error: -1.858 28.75
Average loss over 10599838 tokens: -0.634, valid loss/error: -1.699 28.71
Average loss over 10608907 tokens: -0.632, valid loss/error: -1.914 28.73
Average loss over 10616884 tokens: -0.631, valid loss/error: -1.963 28.73
Average loss over 10607446 tokens: -0.632, valid loss/error: -1.885 28.74
Average loss over 10595893 tokens: -0.630, valid loss/error: -1.763 28.74
Average loss over 10581585 tokens: -0.631, valid loss/error: -1.657 28.70
New best model saved
Average loss over 10618204 tokens: -0.633, valid loss/error: -1.801 28.69
New best model saved
Average loss over 10620621 tokens: -0.632, valid loss/error: -1.694 28.71
Average loss over 10620504 tokens: -0.633, valid loss/error: -1.719 28.68
New best model saved
Average loss over 10596627 tokens: -0.637, valid loss/error: -1.824 28.72
Average loss over 9477898 tokens: -0.629
Epoch: 3, train loss: -0.632, valid loss/error: -1.749 28.70
Average loss over 10582973 tokens: -0.637, valid loss/error: -1.857 28.71
Average loss over 10607263 tokens: -0.638, valid loss/error: -1.968 28.68
New best model saved
Average loss over 10606955 tokens: -0.637, valid loss/error: -1.687 28.70
Average loss over 10639767 tokens: -0.635, valid loss/error: -1.802 28.72
Average loss over 10612488 tokens: -0.640, valid loss/error: -1.872 28.70
Average loss over 10604283 tokens: -0.635, valid loss/error: -1.832 28.69
Average loss over 10599441 tokens: -0.636, valid loss/error: -1.692 28.70
Average loss over 10627189 tokens: -0.635, valid loss/error: -1.713 28.71
Average loss over 10618563 tokens: -0.634, valid loss/error: -1.735 28.69
Average loss over 10615049 tokens: -0.636, valid loss/error: -1.736 28.70
Average loss over 10593582 tokens: -0.635, valid loss/error: -1.731 28.67
New best model saved
Average loss over 10599482 tokens: -0.634, valid loss/error: -1.874 28.68
Average loss over 10620971 tokens: -0.638, valid loss/error: -1.812 28.65
New best model saved
Average loss over 10599285 tokens: -0.636, valid loss/error: -1.596 28.63
New best model saved
Average loss over 10627384 tokens: -0.638, valid loss/error: -1.944 28.67
Average loss over 10591119 tokens: -0.635, valid loss/error: -1.859 28.69
Average loss over 10600222 tokens: -0.636, valid loss/error: -1.837 28.68
Average loss over 10624713 tokens: -0.637, valid loss/error: -1.697 28.68
Average loss over 10607793 tokens: -0.635, valid loss/error: -1.760 28.69
Average loss over 9490930 tokens: -0.636
Epoch: 4, train loss: -0.636, valid loss/error: -1.924 28.67
Average loss over 10593363 tokens: -0.640, valid loss/error: -1.760 28.67
Average loss over 10602263 tokens: -0.639, valid loss/error: -1.859 28.66
Average loss over 10600891 tokens: -0.638, valid loss/error: -1.824 28.68
Average loss over 10617809 tokens: -0.638, valid loss/error: -1.697 28.61
New best model saved
Average loss over 10621387 tokens: -0.640, valid loss/error: -1.893 28.65
Average loss over 10621454 tokens: -0.643, valid loss/error: -1.744 28.66
Average loss over 10614570 tokens: -0.636, valid loss/error: -1.934 28.69
Average loss over 10633606 tokens: -0.640, valid loss/error: -1.730 28.61
Average loss over 10621002 tokens: -0.636, valid loss/error: -1.884 28.64
Average loss over 10587415 tokens: -0.640, valid loss/error: -1.694 28.61
Average loss over 10607707 tokens: -0.639, valid loss/error: -1.945 28.65
Average loss over 10585199 tokens: -0.640, valid loss/error: -1.870 28.69
Average loss over 10595261 tokens: -0.636, valid loss/error: -1.916 28.66
Average loss over 10620785 tokens: -0.637, valid loss/error: -1.857 28.61
Average loss over 10593369 tokens: -0.641, valid loss/error: -1.791 28.70
Average loss over 10625531 tokens: -0.640, valid loss/error: -1.713 28.66
Average loss over 10604390 tokens: -0.641, valid loss/error: -1.642 28.67
Average loss over 10619150 tokens: -0.638, valid loss/error: -1.897 28.65
Average loss over 10610733 tokens: -0.640, valid loss/error: -1.867 28.64
Average loss over 9493567 tokens: -0.643
Epoch: 5, train loss: -0.639, valid loss/error: -1.820 28.62
Average loss over 10617615 tokens: -0.646, valid loss/error: -1.736 28.65
Average loss over 10598350 tokens: -0.640, valid loss/error: -1.768 28.66
Average loss over 10619353 tokens: -0.643, valid loss/error: -1.759 28.61
Average loss over 10599329 tokens: -0.639, valid loss/error: -1.687 28.63
Average loss over 10595066 tokens: -0.641, valid loss/error: -1.686 28.67
Average loss over 10612114 tokens: -0.642, valid loss/error: -1.803 28.66
Average loss over 10620333 tokens: -0.645, valid loss/error: -1.759 28.64
Average loss over 10585892 tokens: -0.639, valid loss/error: -1.601 28.64
Average loss over 10627183 tokens: -0.640, valid loss/error: -1.777 28.65
Average loss over 10606979 tokens: -0.641, valid loss/error: -1.672 28.62
Average loss over 10589080 tokens: -0.640, valid loss/error: -1.650 28.65
Average loss over 10628020 tokens: -0.645, valid loss/error: -1.824 28.59
New best model saved
Average loss over 10595844 tokens: -0.646, valid loss/error: -1.672 28.63
Average loss over 10638946 tokens: -0.643, valid loss/error: -1.664 28.62
Average loss over 10623002 tokens: -0.640, valid loss/error: -1.867 28.60
Average loss over 10623456 tokens: -0.643, valid loss/error: -1.651 28.69
Average loss over 10594444 tokens: -0.641, valid loss/error: -1.674 28.65
Average loss over 10606630 tokens: -0.639, valid loss/error: -1.713 28.64
Average loss over 10603647 tokens: -0.640, valid loss/error: -1.850 28.64
Average loss over 9484169 tokens: -0.640
Epoch: 6, train loss: -0.642, valid loss/error: -1.953 28.66
Average loss over 10596024 tokens: -0.645, valid loss/error: -1.694 28.58
New best model saved
Average loss over 10634280 tokens: -0.643, valid loss/error: -1.798 28.63
Average loss over 10584877 tokens: -0.640, valid loss/error: -1.799 28.64
Average loss over 10601190 tokens: -0.643, valid loss/error: -1.873 28.61
Average loss over 10615270 tokens: -0.644, valid loss/error: -1.703 28.60
Average loss over 10614473 tokens: -0.650, valid loss/error: -1.889 28.61
Average loss over 10593835 tokens: -0.645, valid loss/error: -1.934 28.57
New best model saved
Average loss over 10612805 tokens: -0.645, valid loss/error: -1.776 28.64
Average loss over 10617957 tokens: -0.643, valid loss/error: -1.708 28.63
Average loss over 10634450 tokens: -0.642, valid loss/error: -1.903 28.58
Average loss over 10594640 tokens: -0.643, valid loss/error: -1.895 28.64
Average loss over 10629926 tokens: -0.644, valid loss/error: -1.829 28.66
Average loss over 10631141 tokens: -0.643, valid loss/error: -1.788 28.64
Average loss over 10573148 tokens: -0.643, valid loss/error: -1.659 28.61
Average loss over 10609218 tokens: -0.643, valid loss/error: -1.916 28.61
Average loss over 10625724 tokens: -0.647, valid loss/error: -1.708 28.59
Average loss over 10579842 tokens: -0.642, valid loss/error: -1.699 28.61
Average loss over 10623579 tokens: -0.643, valid loss/error: -1.713 28.62
Average loss over 10612287 tokens: -0.645, valid loss/error: -1.811 28.59
Average loss over 9484786 tokens: -0.641
Epoch: 7, train loss: -0.644, valid loss/error: -1.705 28.59
Average loss over 10605079 tokens: -0.644, valid loss/error: -1.933 28.62
Average loss over 10607976 tokens: -0.650, valid loss/error: -1.850 28.59
Average loss over 10602485 tokens: -0.646, valid loss/error: -1.721 28.60
Average loss over 10590968 tokens: -0.647, valid loss/error: -1.878 28.64
Average loss over 10622336 tokens: -0.647, valid loss/error: -1.800 28.59
Average loss over 10614640 tokens: -0.646, valid loss/error: -1.670 28.59
Average loss over 10610734 tokens: -0.643, valid loss/error: -1.964 28.59
Average loss over 10584340 tokens: -0.646, valid loss/error: -1.787 28.61
Average loss over 10606843 tokens: -0.647, valid loss/error: -2.002 28.62
New best model saved
Average loss over 10593107 tokens: -0.646, valid loss/error: -1.910 28.58
Average loss over 10602484 tokens: -0.641, valid loss/error: -1.876 28.57
New best model saved
Average loss over 10635112 tokens: -0.647, valid loss/error: -1.803 28.61
Average loss over 10617645 tokens: -0.648, valid loss/error: -1.846 28.62
Average loss over 10605109 tokens: -0.643, valid loss/error: -1.670 28.58
Average loss over 10601478 tokens: -0.644, valid loss/error: -1.898 28.59
Average loss over 10610257 tokens: -0.644, valid loss/error: -1.849 28.58
Average loss over 10631088 tokens: -0.643, valid loss/error: -1.852 28.57
Average loss over 10598969 tokens: -0.643, valid loss/error: -1.890 28.54
New best model saved
Average loss over 10603368 tokens: -0.645, valid loss/error: -1.994 28.57
Average loss over 9525434 tokens: -0.646
Epoch: 8, train loss: -0.645, valid loss/error: -1.764 28.59
Average loss over 10602365 tokens: -0.650, valid loss/error: -1.925 28.54
New best model saved
Average loss over 10596921 tokens: -0.650, valid loss/error: -1.696 28.54
New best model saved
Average loss over 10637018 tokens: -0.649, valid loss/error: -1.868 28.58
Average loss over 10590928 tokens: -0.648, valid loss/error: -1.886 28.59
Average loss over 10586244 tokens: -0.646, valid loss/error: -1.722 28.58
Average loss over 10572667 tokens: -0.648, valid loss/error: -1.833 28.56
Average loss over 10613885 tokens: -0.647, valid loss/error: -1.745 28.59
Average loss over 10649953 tokens: -0.650, valid loss/error: -1.793 28.59
Average loss over 10626102 tokens: -0.649, valid loss/error: -1.746 28.58
Average loss over 10621890 tokens: -0.648, valid loss/error: -1.847 28.58
Average loss over 10616212 tokens: -0.649, valid loss/error: -1.766 28.57
Average loss over 10621089 tokens: -0.646, valid loss/error: -1.730 28.57
Average loss over 10630741 tokens: -0.647, valid loss/error: -1.841 28.61
Average loss over 10595451 tokens: -0.651, valid loss/error: -1.861 28.57
Average loss over 10626763 tokens: -0.646, valid loss/error: -1.718 28.55
Average loss over 10604110 tokens: -0.644, valid loss/error: -1.737 28.53
New best model saved
Average loss over 10591194 tokens: -0.646, valid loss/error: -1.725 28.55
Average loss over 10589589 tokens: -0.647, valid loss/error: -1.894 28.58
Average loss over 10596946 tokens: -0.644, valid loss/error: -1.760 28.60
Average loss over 9499384 tokens: -0.647
Epoch: 9, train loss: -0.647, valid loss/error: -1.869 28.57
Average loss over 10603612 tokens: -0.650, valid loss/error: -1.762 28.59
Average loss over 10596847 tokens: -0.650, valid loss/error: -1.953 28.59
Average loss over 10623306 tokens: -0.653, valid loss/error: -1.732 28.54
Average loss over 10597493 tokens: -0.648, valid loss/error: -1.676 28.53
New best model saved
Average loss over 10615156 tokens: -0.647, valid loss/error: -1.946 28.57
Average loss over 10615828 tokens: -0.652, valid loss/error: -1.694 28.57
Average loss over 10591798 tokens: -0.647, valid loss/error: -1.653 28.58
Average loss over 10622740 tokens: -0.646, valid loss/error: -1.675 28.58
Average loss over 10619503 tokens: -0.649, valid loss/error: -1.754 28.60
Average loss over 10610588 tokens: -0.648, valid loss/error: -1.759 28.57
Average loss over 10600510 tokens: -0.650, valid loss/error: -1.981 28.60
Average loss over 10620282 tokens: -0.648, valid loss/error: -1.796 28.59
Average loss over 10586323 tokens: -0.648, valid loss/error: -1.909 28.56
Average loss over 10614273 tokens: -0.649, valid loss/error: -1.937 28.51
New best model saved
Average loss over 10615750 tokens: -0.650, valid loss/error: -1.966 28.54
Average loss over 10602523 tokens: -0.648, valid loss/error: -1.697 28.54
Average loss over 10593204 tokens: -0.646, valid loss/error: -1.791 28.60
Average loss over 10638643 tokens: -0.654, valid loss/error: -1.855 28.57
Average loss over 10611915 tokens: -0.647, valid loss/error: -1.911 28.53
Average loss over 9489158 tokens: -0.645
Epoch: 10, train loss: -0.649, valid loss/error: -1.947 28.56
Average loss over 10573629 tokens: -0.651, valid loss/error: -1.743 28.61
Average loss over 10594264 tokens: -0.650, valid loss/error: -1.934 28.56
Average loss over 10626139 tokens: -0.650, valid loss/error: -1.874 28.56
Average loss over 10613502 tokens: -0.651, valid loss/error: -1.756 28.55
Average loss over 10608511 tokens: -0.653, valid loss/error: -1.847 28.58
Average loss over 10583956 tokens: -0.648, valid loss/error: -1.993 28.60
Average loss over 10601810 tokens: -0.653, valid loss/error: -1.869 28.58
Average loss over 10635116 tokens: -0.647, valid loss/error: -1.775 28.58
Average loss over 10620833 tokens: -0.653, valid loss/error: -1.943 28.55
Average loss over 10634413 tokens: -0.652, valid loss/error: -1.750 28.56
Average loss over 10594379 tokens: -0.648, valid loss/error: -1.869 28.52
Average loss over 10614121 tokens: -0.651, valid loss/error: -1.963 28.54
Average loss over 10600611 tokens: -0.649, valid loss/error: -1.682 28.51
Average loss over 10623658 tokens: -0.652, valid loss/error: -1.751 28.54
Average loss over 10634741 tokens: -0.650, valid loss/error: -1.989 28.56
Average loss over 10587447 tokens: -0.651, valid loss/error: -1.767 28.51
Average loss over 10616756 tokens: -0.652, valid loss/error: -1.994 28.48
New best model saved
Average loss over 10589672 tokens: -0.648, valid loss/error: -1.775 28.50
Average loss over 10602868 tokens: -0.649, valid loss/error: -1.744 28.53
Average loss over 9513026 tokens: -0.647
Epoch: 11, train loss: -0.650, valid loss/error: -2.000 28.53
Average loss over 10605902 tokens: -0.655, valid loss/error: -1.826 28.50
Average loss over 10584014 tokens: -0.653, valid loss/error: -1.902 28.50
Average loss over 10608761 tokens: -0.650, valid loss/error: -1.982 28.53
Average loss over 10592115 tokens: -0.652, valid loss/error: -1.765 28.54
Average loss over 10636298 tokens: -0.656, valid loss/error: -1.883 28.53
Average loss over 10616937 tokens: -0.655, valid loss/error: -1.811 28.52
Average loss over 10615111 tokens: -0.652, valid loss/error: -1.905 28.53
Average loss over 10594876 tokens: -0.654, valid loss/error: -1.795 28.53
Average loss over 10605586 tokens: -0.654, valid loss/error: -1.735 28.50
Average loss over 10634703 tokens: -0.655, valid loss/error: -1.782 28.51
Average loss over 10582940 tokens: -0.649, valid loss/error: -1.976 28.51
Average loss over 10628275 tokens: -0.648, valid loss/error: -1.778 28.50
Average loss over 10631331 tokens: -0.652, valid loss/error: -1.702 28.52
Average loss over 10618180 tokens: -0.654, valid loss/error: -2.026 28.53
New best model saved
Average loss over 10600037 tokens: -0.648, valid loss/error: -1.844 28.51
Average loss over 10615693 tokens: -0.650, valid loss/error: -1.668 28.50
Average loss over 10606354 tokens: -0.648, valid loss/error: -1.820 28.50
Average loss over 10611848 tokens: -0.649, valid loss/error: -1.754 28.46
New best model saved
Average loss over 10593238 tokens: -0.648, valid loss/error: -1.735 28.51
Average loss over 9487253 tokens: -0.652
Epoch: 12, train loss: -0.652, valid loss/error: -1.738 28.55
Average loss over 10595494 tokens: -0.653, valid loss/error: -1.888 28.53
Average loss over 10608903 tokens: -0.655, valid loss/error: -1.779 28.56
Average loss over 10603566 tokens: -0.650, valid loss/error: -1.787 28.51
Average loss over 10589774 tokens: -0.656, valid loss/error: -1.773 28.54
Average loss over 10592690 tokens: -0.656, valid loss/error: -1.794 28.54
Average loss over 10586580 tokens: -0.650, valid loss/error: -2.022 28.56
Average loss over 10626190 tokens: -0.654, valid loss/error: -1.879 28.52
Average loss over 10620982 tokens: -0.652, valid loss/error: -1.869 28.55
Average loss over 10606074 tokens: -0.655, valid loss/error: -1.712 28.51
Average loss over 10607407 tokens: -0.652, valid loss/error: -2.019 28.56
Average loss over 10617142 tokens: -0.655, valid loss/error: -2.021 28.53
Average loss over 10623546 tokens: -0.655, valid loss/error: -1.847 28.51
Average loss over 10597132 tokens: -0.652, valid loss/error: -1.716 28.52
Average loss over 10607274 tokens: -0.651, valid loss/error: -1.883 28.50
Average loss over 10626953 tokens: -0.655, valid loss/error: -1.822 28.47
Average loss over 10619192 tokens: -0.650, valid loss/error: -1.854 28.52
Average loss over 10601559 tokens: -0.650, valid loss/error: -1.681 28.50
Average loss over 10629365 tokens: -0.652, valid loss/error: -1.937 28.52
Average loss over 10625459 tokens: -0.648, valid loss/error: -1.846 28.50
Average loss over 9484170 tokens: -0.658
Epoch: 13, train loss: -0.653, valid loss/error: -1.816 28.52
Average loss over 10627508 tokens: -0.657, valid loss/error: -1.869 28.47
Average loss over 10594189 tokens: -0.654, valid loss/error: -1.993 28.48
Average loss over 10608819 tokens: -0.653, valid loss/error: -1.949 28.48
Average loss over 10598168 tokens: -0.654, valid loss/error: -1.846 28.47
Average loss over 10579963 tokens: -0.656, valid loss/error: -1.694 28.54
Average loss over 10610894 tokens: -0.656, valid loss/error: -1.885 28.51
Average loss over 10612380 tokens: -0.652, valid loss/error: -1.757 28.48
Average loss over 10607755 tokens: -0.656, valid loss/error: -1.790 28.51
Average loss over 10625921 tokens: -0.653, valid loss/error: -1.863 28.52
Average loss over 10597433 tokens: -0.653, valid loss/error: -1.856 28.52
Average loss over 10591144 tokens: -0.653, valid loss/error: -1.782 28.51
Average loss over 10606618 tokens: -0.655, valid loss/error: -1.877 28.50
Average loss over 10628048 tokens: -0.653, valid loss/error: -1.981 28.47
Average loss over 10625711 tokens: -0.655, valid loss/error: -1.662 28.51
Average loss over 10625654 tokens: -0.652, valid loss/error: -1.879 28.50
Average loss over 10608303 tokens: -0.651, valid loss/error: -1.682 28.47
Average loss over 10613296 tokens: -0.656, valid loss/error: -1.756 28.53
Average loss over 10608893 tokens: -0.652, valid loss/error: -1.751 28.50
Average loss over 10608084 tokens: -0.652, valid loss/error: -1.962 28.51
Average loss over 9490671 tokens: -0.651
Epoch: 14, train loss: -0.654, valid loss/error: -1.742 28.47
Average loss over 10613089 tokens: -0.657, valid loss/error: -1.907 28.53
Average loss over 10631355 tokens: -0.655, valid loss/error: -1.744 28.47
Average loss over 10595192 tokens: -0.656, valid loss/error: -1.821 28.51
Average loss over 10635325 tokens: -0.658, valid loss/error: -1.827 28.49
Average loss over 10613260 tokens: -0.655, valid loss/error: -1.844 28.46
New best model saved
Average loss over 10605300 tokens: -0.653, valid loss/error: -1.933 28.52
Average loss over 10626801 tokens: -0.657, valid loss/error: -1.978 28.54
Average loss over 10592391 tokens: -0.654, valid loss/error: -1.864 28.50
Average loss over 10625308 tokens: -0.653, valid loss/error: -1.733 28.46
New best model saved
Average loss over 10567120 tokens: -0.651, valid loss/error: -1.809 28.51
Average loss over 10622238 tokens: -0.656, valid loss/error: -1.705 28.50
Average loss over 10628810 tokens: -0.655, valid loss/error: -1.946 28.52
Average loss over 10617875 tokens: -0.654, valid loss/error: -1.848 28.47
Average loss over 10569310 tokens: -0.653, valid loss/error: -1.922 28.48
Average loss over 10596035 tokens: -0.656, valid loss/error: -1.917 28.50
Average loss over 10596633 tokens: -0.653, valid loss/error: -1.841 28.51
Average loss over 10598595 tokens: -0.652, valid loss/error: -1.773 28.47
Average loss over 10605092 tokens: -0.654, valid loss/error: -1.809 28.53
Average loss over 10635578 tokens: -0.655, valid loss/error: -1.787 28.43
New best model saved
Average loss over 9494145 tokens: -0.653
Epoch: 15, train loss: -0.655, valid loss/error: -1.836 28.44
Average loss over 10619645 tokens: -0.659, valid loss/error: -1.714 28.48
Average loss over 10602004 tokens: -0.658, valid loss/error: -1.812 28.48
Average loss over 10600158 tokens: -0.658, valid loss/error: -1.862 28.45
Average loss over 10618293 tokens: -0.656, valid loss/error: -1.738 28.46
Average loss over 10608015 tokens: -0.657, valid loss/error: -1.944 28.49
Average loss over 10617138 tokens: -0.655, valid loss/error: -1.853 28.46
Average loss over 10590778 tokens: -0.655, valid loss/error: -1.838 28.50
Average loss over 10605620 tokens: -0.657, valid loss/error: -1.774 28.45
Average loss over 10617024 tokens: -0.654, valid loss/error: -1.858 28.46
Average loss over 10610592 tokens: -0.657, valid loss/error: -1.940 28.46
Average loss over 10621541 tokens: -0.654, valid loss/error: -1.735 28.45
Average loss over 10595878 tokens: -0.654, valid loss/error: -1.804 28.49
Average loss over 10575819 tokens: -0.655, valid loss/error: -1.967 28.52
Average loss over 10603990 tokens: -0.654, valid loss/error: -1.819 28.47
Average loss over 10617863 tokens: -0.653, valid loss/error: -2.010 28.49
Average loss over 10600066 tokens: -0.654, valid loss/error: -2.014 28.47
Average loss over 10633838 tokens: -0.657, valid loss/error: -1.797 28.48
Average loss over 10601367 tokens: -0.658, valid loss/error: -1.959 28.50
Average loss over 10645124 tokens: -0.656, valid loss/error: -2.009 28.50
Average loss over 9484699 tokens: -0.658
Epoch: 16, train loss: -0.656, valid loss/error: -1.831 28.53
Average loss over 10609966 tokens: -0.659, valid loss/error: -1.836 28.52
Average loss over 10606220 tokens: -0.658, valid loss/error: -1.814 28.48
Average loss over 10604034 tokens: -0.658, valid loss/error: -2.063 28.46
New best model saved
Average loss over 10597540 tokens: -0.658, valid loss/error: -1.983 28.51
Average loss over 10638419 tokens: -0.660, valid loss/error: -1.742 28.46
Average loss over 10623691 tokens: -0.659, valid loss/error: -1.816 28.46
Average loss over 10609237 tokens: -0.659, valid loss/error: -1.699 28.47
Average loss over 10605479 tokens: -0.655, valid loss/error: -1.903 28.46
Average loss over 10598603 tokens: -0.655, valid loss/error: -1.796 28.49
Average loss over 10621930 tokens: -0.656, valid loss/error: -1.928 28.45
Average loss over 10593845 tokens: -0.655, valid loss/error: -1.991 28.47
Average loss over 10612244 tokens: -0.656, valid loss/error: -1.733 28.48
Average loss over 10593449 tokens: -0.658, valid loss/error: -1.730 28.47
Average loss over 10615119 tokens: -0.655, valid loss/error: -1.776 28.46
Average loss over 10592129 tokens: -0.656, valid loss/error: -1.814 28.42
New best model saved
Average loss over 10604525 tokens: -0.656, valid loss/error: -1.699 28.48
Average loss over 10604057 tokens: -0.654, valid loss/error: -1.864 28.50
Average loss over 10633326 tokens: -0.657, valid loss/error: -1.865 28.51
Average loss over 10629591 tokens: -0.657, valid loss/error: -1.914 28.46
Average loss over 9476048 tokens: -0.656
Epoch: 17, train loss: -0.657, valid loss/error: -1.692 28.41
New best model saved
Average loss over 10601002 tokens: -0.659, valid loss/error: -1.962 28.46
Average loss over 10591624 tokens: -0.663, valid loss/error: -1.722 28.41
New best model saved
Average loss over 10609908 tokens: -0.656, valid loss/error: -1.944 28.46
Average loss over 10638406 tokens: -0.657, valid loss/error: -1.724 28.47
Average loss over 10627052 tokens: -0.660, valid loss/error: -1.888 28.47
Average loss over 10583909 tokens: -0.657, valid loss/error: -1.751 28.45
Average loss over 10588042 tokens: -0.661, valid loss/error: -1.768 28.49
Average loss over 10608750 tokens: -0.660, valid loss/error: -1.752 28.49
Average loss over 10597964 tokens: -0.655, valid loss/error: -2.027 28.43
Average loss over 10602157 tokens: -0.659, valid loss/error: -1.765 28.46
Average loss over 10603704 tokens: -0.657, valid loss/error: -1.720 28.43
Average loss over 10633955 tokens: -0.657, valid loss/error: -1.910 28.46
Average loss over 10625177 tokens: -0.657, valid loss/error: -1.694 28.43
Average loss over 10588620 tokens: -0.655, valid loss/error: -1.829 28.42
Average loss over 10645351 tokens: -0.659, valid loss/error: -2.002 28.45
Average loss over 10621106 tokens: -0.656, valid loss/error: -1.711 28.45
Average loss over 10600172 tokens: -0.658, valid loss/error: -2.037 28.46
Average loss over 10623314 tokens: -0.654, valid loss/error: -1.718 28.47
Average loss over 10591040 tokens: -0.659, valid loss/error: -1.845 28.47
Average loss over 9488199 tokens: -0.655
Epoch: 18, train loss: -0.658, valid loss/error: -1.751 28.48
Average loss over 10620856 tokens: -0.663, valid loss/error: -2.021 28.48
Average loss over 10599605 tokens: -0.659, valid loss/error: -1.794 28.43
Average loss over 10606305 tokens: -0.660, valid loss/error: -1.768 28.47
Average loss over 10619494 tokens: -0.660, valid loss/error: -2.054 28.44
Average loss over 10623442 tokens: -0.657, valid loss/error: -1.817 28.44
Average loss over 10592204 tokens: -0.655, valid loss/error: -1.786 28.44
Average loss over 10600926 tokens: -0.663, valid loss/error: -2.009 28.44
Average loss over 10617085 tokens: -0.658, valid loss/error: -1.732 28.44
Average loss over 10590513 tokens: -0.656, valid loss/error: -1.762 28.40
New best model saved
Average loss over 10618417 tokens: -0.658, valid loss/error: -1.712 28.42
Average loss over 10591728 tokens: -0.659, valid loss/error: -1.843 28.46
Average loss over 10610064 tokens: -0.660, valid loss/error: -1.880 28.49
Average loss over 10603288 tokens: -0.657, valid loss/error: -1.742 28.43
Average loss over 10607722 tokens: -0.659, valid loss/error: -1.766 28.44
Average loss over 10595353 tokens: -0.657, valid loss/error: -1.899 28.44
Average loss over 10610453 tokens: -0.657, valid loss/error: -1.845 28.44
Average loss over 10623055 tokens: -0.659, valid loss/error: -1.972 28.47
Average loss over 10602330 tokens: -0.655, valid loss/error: -1.803 28.45
Average loss over 10624959 tokens: -0.655, valid loss/error: -2.006 28.49
Average loss over 9511653 tokens: -0.662
Epoch: 19, train loss: -0.658, valid loss/error: -1.722 28.41
Average loss over 10625212 tokens: -0.662, valid loss/error: -1.773 28.42
Average loss over 10630500 tokens: -0.658, valid loss/error: -1.920 28.43
Average loss over 10618527 tokens: -0.658, valid loss/error: -1.900 28.43
Average loss over 10609706 tokens: -0.665, valid loss/error: -1.916 28.45
Average loss over 10605479 tokens: -0.660, valid loss/error: -2.019 28.46
Average loss over 10626754 tokens: -0.661, valid loss/error: -2.037 28.41
Average loss over 10583829 tokens: -0.655, valid loss/error: -1.874 28.41
Average loss over 10615830 tokens: -0.660, valid loss/error: -2.037 28.45
Average loss over 10600942 tokens: -0.659, valid loss/error: -1.813 28.44
Average loss over 10634049 tokens: -0.659, valid loss/error: -1.796 28.47
Average loss over 10594558 tokens: -0.655, valid loss/error: -1.795 28.48
Average loss over 10586914 tokens: -0.659, valid loss/error: -1.899 28.49
Average loss over 10575404 tokens: -0.660, valid loss/error: -1.873 28.51
Average loss over 10605865 tokens: -0.660, valid loss/error: -1.823 28.47
Average loss over 10631387 tokens: -0.660, valid loss/error: -1.748 28.48
Average loss over 10618227 tokens: -0.659, valid loss/error: -2.001 28.46
Average loss over 10631541 tokens: -0.657, valid loss/error: -1.772 28.47
Average loss over 10617545 tokens: -0.660, valid loss/error: -1.815 28.43
Average loss over 10591534 tokens: -0.659, valid loss/error: -1.750 28.45
Average loss over 9465649 tokens: -0.659
Epoch: 20, train loss: -0.659, valid loss/error: -1.696 28.48
Average loss over 10607524 tokens: -0.660, valid loss/error: -1.875 28.47
Average loss over 10619337 tokens: -0.664, valid loss/error: -1.839 28.44
Average loss over 10564592 tokens: -0.665, valid loss/error: -1.958 28.43
Average loss over 10593441 tokens: -0.660, valid loss/error: -2.105 28.48
New best model saved
Average loss over 10602509 tokens: -0.664, valid loss/error: -1.872 28.46
Average loss over 10612052 tokens: -0.661, valid loss/error: -1.829 28.44
Average loss over 10622008 tokens: -0.658, valid loss/error: -1.845 28.41
Average loss over 10601416 tokens: -0.656, valid loss/error: -1.765 28.48
Average loss over 10609760 tokens: -0.660, valid loss/error: -2.014 28.42
Average loss over 10646685 tokens: -0.662, valid loss/error: -1.841 28.41
Average loss over 10627729 tokens: -0.661, valid loss/error: -2.086 28.47
Average loss over 10615123 tokens: -0.660, valid loss/error: -1.802 28.45
Average loss over 10574395 tokens: -0.660, valid loss/error: -1.800 28.43
Average loss over 10612927 tokens: -0.659, valid loss/error: -2.040 28.45
Average loss over 10620360 tokens: -0.658, valid loss/error: -1.701 28.40
New best model saved
Average loss over 10598279 tokens: -0.658, valid loss/error: -1.981 28.43
Average loss over 10617518 tokens: -0.660, valid loss/error: -2.049 28.45
Average loss over 10625399 tokens: -0.661, valid loss/error: -1.836 28.48
Average loss over 10604135 tokens: -0.659, valid loss/error: -1.797 28.41
Average loss over 9494263 tokens: -0.657
Epoch: 21, train loss: -0.660, valid loss/error: -1.923 28.44
Average loss over 10596924 tokens: -0.661, valid loss/error: -1.758 28.43
Average loss over 10586123 tokens: -0.662, valid loss/error: -1.863 28.44
Average loss over 10604496 tokens: -0.664, valid loss/error: -1.778 28.45
Average loss over 10616775 tokens: -0.662, valid loss/error: -1.870 28.47
Average loss over 10583564 tokens: -0.662, valid loss/error: -1.860 28.49
Average loss over 10610243 tokens: -0.661, valid loss/error: -1.753 28.43
Average loss over 10611895 tokens: -0.658, valid loss/error: -2.047 28.47
Average loss over 10629975 tokens: -0.662, valid loss/error: -1.891 28.50
Average loss over 10616358 tokens: -0.661, valid loss/error: -2.001 28.43
Average loss over 10607541 tokens: -0.660, valid loss/error: -1.790 28.44
Average loss over 10609173 tokens: -0.660, valid loss/error: -1.819 28.45
Average loss over 10567978 tokens: -0.660, valid loss/error: -1.823 28.41
Average loss over 10620229 tokens: -0.659, valid loss/error: -1.976 28.41
Average loss over 10609584 tokens: -0.662, valid loss/error: -1.939 28.43
Average loss over 10610055 tokens: -0.658, valid loss/error: -1.821 28.47
Average loss over 10614761 tokens: -0.661, valid loss/error: -1.863 28.44
Average loss over 10617264 tokens: -0.660, valid loss/error: -1.844 28.47
Average loss over 10588454 tokens: -0.662, valid loss/error: -1.963 28.39
New best model saved
Average loss over 10644151 tokens: -0.663, valid loss/error: -1.936 28.43
Average loss over 9523909 tokens: -0.659
Epoch: 22, train loss: -0.661, valid loss/error: -1.816 28.47
Average loss over 10572143 tokens: -0.662, valid loss/error: -1.805 28.47
Average loss over 10606918 tokens: -0.664, valid loss/error: -1.755 28.47
Average loss over 10623851 tokens: -0.663, valid loss/error: -1.913 28.50
Average loss over 10619533 tokens: -0.662, valid loss/error: -1.841 28.47
Average loss over 10654604 tokens: -0.664, valid loss/error: -1.896 28.46
Average loss over 10601464 tokens: -0.662, valid loss/error: -1.839 28.50
Average loss over 10595948 tokens: -0.661, valid loss/error: -1.948 28.47
Average loss over 10596282 tokens: -0.666, valid loss/error: -2.027 28.47
Average loss over 10587307 tokens: -0.659, valid loss/error: -1.727 28.44
Average loss over 10626947 tokens: -0.667, valid loss/error: -1.836 28.44
Average loss over 10610733 tokens: -0.660, valid loss/error: -1.981 28.43
Average loss over 10594498 tokens: -0.660, valid loss/error: -2.013 28.46
Average loss over 10616972 tokens: -0.661, valid loss/error: -1.808 28.44
Average loss over 10649931 tokens: -0.658, valid loss/error: -2.062 28.48
Average loss over 10595836 tokens: -0.660, valid loss/error: -1.968 28.42
Average loss over 10595333 tokens: -0.659, valid loss/error: -1.849 28.41
Average loss over 10590991 tokens: -0.659, valid loss/error: -1.950 28.47
Average loss over 10612016 tokens: -0.662, valid loss/error: -1.833 28.41
Average loss over 10608041 tokens: -0.662, valid loss/error: -1.923 28.45
Average loss over 9510104 tokens: -0.660
Epoch: 23, train loss: -0.662, valid loss/error: -1.906 28.43
Average loss over 10585320 tokens: -0.663, valid loss/error: -2.003 28.45
Average loss over 10612062 tokens: -0.665, valid loss/error: -1.763 28.39
New best model saved
Average loss over 10609930 tokens: -0.662, valid loss/error: -1.852 28.44
Average loss over 10616965 tokens: -0.664, valid loss/error: -1.858 28.39
Average loss over 10614028 tokens: -0.662, valid loss/error: -1.721 28.46
Average loss over 10626428 tokens: -0.664, valid loss/error: -2.114 28.48
New best model saved
Average loss over 10626540 tokens: -0.667, valid loss/error: -1.884 28.45
Average loss over 10598369 tokens: -0.664, valid loss/error: -2.018 28.51
Average loss over 10595146 tokens: -0.660, valid loss/error: -1.742 28.43
Average loss over 10608358 tokens: -0.663, valid loss/error: -1.760 28.49
Average loss over 10585249 tokens: -0.660, valid loss/error: -1.991 28.49
Average loss over 10607079 tokens: -0.663, valid loss/error: -1.854 28.49
Average loss over 10594988 tokens: -0.657, valid loss/error: -2.074 28.48
Average loss over 10614875 tokens: -0.660, valid loss/error: -1.917 28.43
Average loss over 10589489 tokens: -0.662, valid loss/error: -1.718 28.48
Average loss over 10612943 tokens: -0.663, valid loss/error: -2.018 28.46
Average loss over 10602886 tokens: -0.660, valid loss/error: -1.840 28.43
Average loss over 10607907 tokens: -0.662, valid loss/error: -1.971 28.46
Average loss over 10648134 tokens: -0.661, valid loss/error: -2.015 28.44
Average loss over 9512756 tokens: -0.663
Epoch: 24, train loss: -0.662, valid loss/error: -1.994 28.48
Average loss over 10594420 tokens: -0.664, valid loss/error: -1.909 28.44
Average loss over 10611765 tokens: -0.661, valid loss/error: -1.800 28.42
Average loss over 10622947 tokens: -0.662, valid loss/error: -1.785 28.45
Average loss over 10609867 tokens: -0.664, valid loss/error: -1.920 28.39
Average loss over 10624436 tokens: -0.665, valid loss/error: -1.780 28.43
Average loss over 10584236 tokens: -0.664, valid loss/error: -1.990 28.44
Average loss over 10618559 tokens: -0.666, valid loss/error: -2.104 28.45
Average loss over 10616052 tokens: -0.662, valid loss/error: -1.787 28.45
Average loss over 10618359 tokens: -0.665, valid loss/error: -1.793 28.47
Average loss over 10596290 tokens: -0.663, valid loss/error: -2.059 28.42
Average loss over 10634036 tokens: -0.666, valid loss/error: -1.814 28.46
Average loss over 10634227 tokens: -0.662, valid loss/error: -1.793 28.40
Average loss over 10595209 tokens: -0.665, valid loss/error: -1.732 28.43
Average loss over 10602521 tokens: -0.661, valid loss/error: -1.883 28.45
Average loss over 10625670 tokens: -0.663, valid loss/error: -2.049 28.47
Average loss over 10605133 tokens: -0.662, valid loss/error: -1.766 28.43
Average loss over 10603011 tokens: -0.660, valid loss/error: -1.783 28.48
Average loss over 10609018 tokens: -0.665, valid loss/error: -1.829 28.45
Average loss over 10584290 tokens: -0.656, valid loss/error: -1.860 28.49
Average loss over 9479406 tokens: -0.664
Epoch: 25, train loss: -0.663, valid loss/error: -2.129 28.44
New best model saved
Average loss over 10635314 tokens: -0.666, valid loss/error: -1.854 28.42
Average loss over 10614751 tokens: -0.666, valid loss/error: -1.715 28.40
Average loss over 10588065 tokens: -0.666, valid loss/error: -2.015 28.43
Average loss over 10576127 tokens: -0.665, valid loss/error: -1.760 28.41
Average loss over 10616351 tokens: -0.662, valid loss/error: -1.768 28.38
New best model saved
Average loss over 10605262 tokens: -0.664, valid loss/error: -1.685 28.42
Average loss over 10593971 tokens: -0.663, valid loss/error: -2.037 28.44
Average loss over 10615808 tokens: -0.664, valid loss/error: -1.815 28.41
Average loss over 10600052 tokens: -0.664, valid loss/error: -2.059 28.44
Average loss over 10617058 tokens: -0.664, valid loss/error: -1.975 28.41
Average loss over 10594442 tokens: -0.662, valid loss/error: -1.745 28.43
Average loss over 10604396 tokens: -0.666, valid loss/error: -1.751 28.49
Average loss over 10597240 tokens: -0.664, valid loss/error: -1.921 28.42
Average loss over 10617452 tokens: -0.665, valid loss/error: -1.781 28.41
Average loss over 10624601 tokens: -0.665, valid loss/error: -1.873 28.43
Average loss over 10585162 tokens: -0.664, valid loss/error: -2.011 28.39
Average loss over 10604380 tokens: -0.658, valid loss/error: -2.010 28.42
Average loss over 10626521 tokens: -0.662, valid loss/error: -1.773 28.40
Average loss over 10636028 tokens: -0.662, valid loss/error: -1.976 28.38
Average loss over 9516471 tokens: -0.664
Epoch: 26, train loss: -0.664, valid loss/error: -1.827 28.44
Average loss over 10617642 tokens: -0.666, valid loss/error: -1.744 28.42
Average loss over 10596711 tokens: -0.662, valid loss/error: -1.905 28.43
Average loss over 10637717 tokens: -0.668, valid loss/error: -1.874 28.46
Average loss over 10638961 tokens: -0.665, valid loss/error: -1.954 28.45
Average loss over 10631134 tokens: -0.666, valid loss/error: -1.913 28.40
Average loss over 10613597 tokens: -0.669, valid loss/error: -1.908 28.39
Average loss over 10614468 tokens: -0.663, valid loss/error: -1.737 28.39
Average loss over 10601990 tokens: -0.663, valid loss/error: -1.946 28.43
Average loss over 10594239 tokens: -0.667, valid loss/error: -1.751 28.45
Average loss over 10601061 tokens: -0.666, valid loss/error: -1.778 28.43
Average loss over 10614410 tokens: -0.666, valid loss/error: -2.014 28.41
Average loss over 10585195 tokens: -0.661, valid loss/error: -1.933 28.40
Average loss over 10607465 tokens: -0.663, valid loss/error: -1.813 28.47
Average loss over 10620034 tokens: -0.663, valid loss/error: -1.944 28.42
Average loss over 10595960 tokens: -0.666, valid loss/error: -1.883 28.38
New best model saved
Average loss over 10628285 tokens: -0.666, valid loss/error: -2.031 28.42
Average loss over 10588796 tokens: -0.664, valid loss/error: -2.037 28.42
Average loss over 10581639 tokens: -0.663, valid loss/error: -2.021 28.35
New best model saved
Average loss over 10605177 tokens: -0.662, valid loss/error: -2.016 28.37
Average loss over 9494971 tokens: -0.660
Epoch: 27, train loss: -0.664, valid loss/error: -1.699 28.42
Average loss over 10622870 tokens: -0.670, valid loss/error: -2.086 28.40
Average loss over 10614546 tokens: -0.663, valid loss/error: -1.837 28.35
New best model saved
Average loss over 10627631 tokens: -0.666, valid loss/error: -1.878 28.37
Average loss over 10625889 tokens: -0.665, valid loss/error: -2.072 28.43
Average loss over 10587386 tokens: -0.663, valid loss/error: -1.935 28.41
Average loss over 10600803 tokens: -0.667, valid loss/error: -1.917 28.43
Average loss over 10614186 tokens: -0.661, valid loss/error: -1.754 28.41
Average loss over 10582252 tokens: -0.665, valid loss/error: -1.875 28.41
Average loss over 10616367 tokens: -0.668, valid loss/error: -1.816 28.43
Average loss over 10618882 tokens: -0.664, valid loss/error: -2.012 28.41
Average loss over 10614320 tokens: -0.666, valid loss/error: -1.906 28.39
Average loss over 10599630 tokens: -0.665, valid loss/error: -1.836 28.42
Average loss over 10638042 tokens: -0.663, valid loss/error: -1.738 28.44
Average loss over 10587011 tokens: -0.668, valid loss/error: -1.869 28.46
Average loss over 10585497 tokens: -0.665, valid loss/error: -1.857 28.45
Average loss over 10620068 tokens: -0.667, valid loss/error: -1.813 28.39
Average loss over 10606998 tokens: -0.663, valid loss/error: -1.800 28.40
Average loss over 10605285 tokens: -0.664, valid loss/error: -2.016 28.41
Average loss over 10614539 tokens: -0.664, valid loss/error: -1.725 28.44
Average loss over 9487250 tokens: -0.665
Epoch: 28, train loss: -0.665, valid loss/error: -1.917 28.48
Average loss over 10617898 tokens: -0.668, valid loss/error: -1.875 28.42
Average loss over 10627641 tokens: -0.666, valid loss/error: -1.892 28.43
Average loss over 10596180 tokens: -0.667, valid loss/error: -1.912 28.42
Average loss over 10623117 tokens: -0.671, valid loss/error: -1.924 28.40
Average loss over 10632068 tokens: -0.666, valid loss/error: -1.841 28.42
Average loss over 10597716 tokens: -0.662, valid loss/error: -1.800 28.38
Average loss over 10632911 tokens: -0.668, valid loss/error: -1.857 28.42
Average loss over 10603190 tokens: -0.667, valid loss/error: -1.762 28.45
Average loss over 10606892 tokens: -0.666, valid loss/error: -1.920 28.44
Average loss over 10618191 tokens: -0.663, valid loss/error: -1.973 28.40
Average loss over 10615626 tokens: -0.668, valid loss/error: -1.947 28.39
Average loss over 10594451 tokens: -0.662, valid loss/error: -1.669 28.43
Average loss over 10585809 tokens: -0.664, valid loss/error: -1.853 28.42
Average loss over 10590438 tokens: -0.663, valid loss/error: -1.986 28.43
Average loss over 10581423 tokens: -0.665, valid loss/error: -1.985 28.39
Average loss over 10638411 tokens: -0.664, valid loss/error: -1.843 28.42
Average loss over 10611737 tokens: -0.668, valid loss/error: -1.867 28.39
Average loss over 10584723 tokens: -0.665, valid loss/error: -2.016 28.43
Average loss over 10633112 tokens: -0.667, valid loss/error: -1.809 28.44
Average loss over 9477918 tokens: -0.667
Epoch: 29, train loss: -0.666, valid loss/error: -1.859 28.36
Average loss over 10651634 tokens: -0.668, valid loss/error: -1.684 28.41
Average loss over 10619232 tokens: -0.666, valid loss/error: -1.822 28.38
Average loss over 10607712 tokens: -0.662, valid loss/error: -1.928 28.42
Average loss over 10624443 tokens: -0.669, valid loss/error: -2.053 28.39
Average loss over 10608975 tokens: -0.666, valid loss/error: -1.774 28.47
Average loss over 10618836 tokens: -0.667, valid loss/error: -1.800 28.42
Average loss over 10607375 tokens: -0.667, valid loss/error: -1.945 28.43
Average loss over 10595954 tokens: -0.665, valid loss/error: -2.033 28.39
Average loss over 10612002 tokens: -0.665, valid loss/error: -1.838 28.40
Average loss over 10610445 tokens: -0.665, valid loss/error: -1.996 28.41
Average loss over 10603939 tokens: -0.665, valid loss/error: -1.903 28.38
Average loss over 10609678 tokens: -0.669, valid loss/error: -1.986 28.37
Average loss over 10599474 tokens: -0.666, valid loss/error: -2.005 28.43
Average loss over 10616978 tokens: -0.666, valid loss/error: -1.909 28.39
Average loss over 10622408 tokens: -0.667, valid loss/error: -2.020 28.37
Average loss over 10593477 tokens: -0.669, valid loss/error: -1.720 28.38
Average loss over 10609366 tokens: -0.664, valid loss/error: -1.782 28.40
Average loss over 10590210 tokens: -0.665, valid loss/error: -1.763 28.36
Average loss over 10575514 tokens: -0.667, valid loss/error: -1.729 28.38
Average loss over 9491800 tokens: -0.664
Epoch: 30, train loss: -0.666, valid loss/error: -1.772 28.39
Average loss over 10604704 tokens: -0.663, valid loss/error: -1.872 28.42
Average loss over 10576857 tokens: -0.673, valid loss/error: -2.031 28.42
Average loss over 10586062 tokens: -0.667, valid loss/error: -1.984 28.37
Average loss over 10594419 tokens: -0.668, valid loss/error: -2.055 28.44
Average loss over 10655226 tokens: -0.670, valid loss/error: -1.838 28.35
New best model saved
Average loss over 10622921 tokens: -0.667, valid loss/error: -1.988 28.42
Average loss over 10622272 tokens: -0.668, valid loss/error: -1.939 28.41
Average loss over 10639002 tokens: -0.670, valid loss/error: -1.794 28.37
Average loss over 10588080 tokens: -0.671, valid loss/error: -1.908 28.39
Average loss over 10615106 tokens: -0.666, valid loss/error: -1.706 28.39
Average loss over 10634627 tokens: -0.665, valid loss/error: -1.942 28.36
Average loss over 10592874 tokens: -0.668, valid loss/error: -2.013 28.36
Average loss over 10613424 tokens: -0.664, valid loss/error: -2.013 28.37
Average loss over 10575679 tokens: -0.661, valid loss/error: -1.741 28.39
Average loss over 10611997 tokens: -0.665, valid loss/error: -1.897 28.40
Average loss over 10619226 tokens: -0.669, valid loss/error: -1.805 28.39
Average loss over 10644919 tokens: -0.669, valid loss/error: -1.827 28.39
Average loss over 10588870 tokens: -0.666, valid loss/error: -2.052 28.40
Average loss over 10587403 tokens: -0.666, valid loss/error: -1.982 28.40
Average loss over 9495784 tokens: -0.664
Epoch: 31, train loss: -0.667, valid loss/error: -1.805 28.39
Average loss over 10618880 tokens: -0.668, valid loss/error: -1.873 28.38
Average loss over 10599480 tokens: -0.671, valid loss/error: -1.911 28.37
Average loss over 10610893 tokens: -0.667, valid loss/error: -1.833 28.37
Average loss over 10625789 tokens: -0.668, valid loss/error: -2.068 28.36
Average loss over 10578474 tokens: -0.670, valid loss/error: -1.881 28.40
Average loss over 10620161 tokens: -0.670, valid loss/error: -1.857 28.39
Average loss over 10618161 tokens: -0.668, valid loss/error: -1.729 28.37
Average loss over 10596654 tokens: -0.666, valid loss/error: -1.875 28.35
New best model saved
Average loss over 10582945 tokens: -0.669, valid loss/error: -1.818 28.42
Average loss over 10620602 tokens: -0.667, valid loss/error: -1.842 28.41
Average loss over 10616191 tokens: -0.668, valid loss/error: -1.983 28.41
Average loss over 10623198 tokens: -0.669, valid loss/error: -1.768 28.37
Average loss over 10619886 tokens: -0.667, valid loss/error: -1.735 28.41
Average loss over 10605787 tokens: -0.665, valid loss/error: -2.076 28.43
Average loss over 10596540 tokens: -0.663, valid loss/error: -1.998 28.39
Average loss over 10600957 tokens: -0.666, valid loss/error: -1.932 28.45
Average loss over 10598472 tokens: -0.670, valid loss/error: -1.781 28.38
Average loss over 10598339 tokens: -0.663, valid loss/error: -2.130 28.36
New best model saved
Average loss over 10648400 tokens: -0.668, valid loss/error: -1.956 28.40
Average loss over 9489643 tokens: -0.667
Epoch: 32, train loss: -0.667, valid loss/error: -1.936 28.38
Average loss over 10621118 tokens: -0.672, valid loss/error: -1.746 28.31
New best model saved
Average loss over 10625225 tokens: -0.669, valid loss/error: -2.062 28.38
Average loss over 10615251 tokens: -0.668, valid loss/error: -2.111 28.37
Average loss over 10602356 tokens: -0.669, valid loss/error: -1.880 28.40
Average loss over 10583245 tokens: -0.668, valid loss/error: -1.879 28.42
Average loss over 10599346 tokens: -0.670, valid loss/error: -1.831 28.37
Average loss over 10637580 tokens: -0.669, valid loss/error: -2.021 28.36
Average loss over 10618428 tokens: -0.668, valid loss/error: -2.003 28.42
Average loss over 10611458 tokens: -0.670, valid loss/error: -1.781 28.39
Average loss over 10601071 tokens: -0.670, valid loss/error: -1.922 28.36
Average loss over 10597511 tokens: -0.667, valid loss/error: -1.922 28.34
Average loss over 10615605 tokens: -0.669, valid loss/error: -2.015 28.40
Average loss over 10633720 tokens: -0.668, valid loss/error: -1.734 28.38
Average loss over 10635282 tokens: -0.667, valid loss/error: -1.934 28.41
Average loss over 10610861 tokens: -0.668, valid loss/error: -1.711 28.38
Average loss over 10619638 tokens: -0.668, valid loss/error: -1.795 28.40
Average loss over 10593027 tokens: -0.664, valid loss/error: -1.950 28.38
Average loss over 10601827 tokens: -0.667, valid loss/error: -1.741 28.35
Average loss over 10576480 tokens: -0.662, valid loss/error: -1.883 28.38
Average loss over 9470423 tokens: -0.670
Epoch: 33, train loss: -0.668, valid loss/error: -1.820 28.38
Average loss over 10593568 tokens: -0.669, valid loss/error: -1.774 28.35
Average loss over 10642550 tokens: -0.672, valid loss/error: -1.784 28.40
Average loss over 10613994 tokens: -0.670, valid loss/error: -1.856 28.42
Average loss over 10610622 tokens: -0.668, valid loss/error: -1.877 28.40
Average loss over 10586205 tokens: -0.668, valid loss/error: -1.867 28.39
Average loss over 10583760 tokens: -0.673, valid loss/error: -1.936 28.36
Average loss over 10599094 tokens: -0.665, valid loss/error: -1.968 28.35
Average loss over 10627059 tokens: -0.673, valid loss/error: -1.823 28.35
Average loss over 10601413 tokens: -0.669, valid loss/error: -1.919 28.35
Average loss over 10613810 tokens: -0.668, valid loss/error: -1.977 28.37
Average loss over 10623829 tokens: -0.669, valid loss/error: -1.961 28.38
Average loss over 10609288 tokens: -0.667, valid loss/error: -1.948 28.38
Average loss over 10615493 tokens: -0.669, valid loss/error: -1.874 28.36
Average loss over 10609955 tokens: -0.667, valid loss/error: -1.885 28.35
Average loss over 10612472 tokens: -0.669, valid loss/error: -1.865 28.37
Average loss over 10617701 tokens: -0.670, valid loss/error: -2.003 28.38
Average loss over 10622191 tokens: -0.668, valid loss/error: -2.162 28.44
New best model saved
Average loss over 10624108 tokens: -0.670, valid loss/error: -1.802 28.42
Average loss over 10606545 tokens: -0.664, valid loss/error: -1.795 28.40
Average loss over 9455795 tokens: -0.666
Epoch: 34, train loss: -0.669, valid loss/error: -1.931 28.43
Average loss over 10599863 tokens: -0.672, valid loss/error: -1.827 28.38
Average loss over 10605256 tokens: -0.669, valid loss/error: -1.911 28.38
Average loss over 10604014 tokens: -0.671, valid loss/error: -1.904 28.38
Average loss over 10615187 tokens: -0.669, valid loss/error: -2.024 28.38
Average loss over 10598119 tokens: -0.667, valid loss/error: -1.957 28.39
Average loss over 10587587 tokens: -0.665, valid loss/error: -2.077 28.40
Average loss over 10616867 tokens: -0.669, valid loss/error: -2.022 28.41
Average loss over 10608541 tokens: -0.669, valid loss/error: -1.890 28.40
Average loss over 10629080 tokens: -0.670, valid loss/error: -1.875 28.37
Average loss over 10597555 tokens: -0.668, valid loss/error: -1.926 28.40
Average loss over 10617458 tokens: -0.672, valid loss/error: -1.996 28.37
Average loss over 10637408 tokens: -0.669, valid loss/error: -1.889 28.39
Average loss over 10628240 tokens: -0.670, valid loss/error: -1.797 28.41
Average loss over 10609269 tokens: -0.666, valid loss/error: -1.771 28.38
Average loss over 10601212 tokens: -0.669, valid loss/error: -1.878 28.38
Average loss over 10598340 tokens: -0.666, valid loss/error: -1.980 28.41
Average loss over 10615479 tokens: -0.667, valid loss/error: -1.913 28.43
Average loss over 10622137 tokens: -0.669, valid loss/error: -2.021 28.42
Average loss over 10596073 tokens: -0.670, valid loss/error: -1.924 28.41
Average loss over 9481767 tokens: -0.671
Epoch: 35, train loss: -0.669, valid loss/error: -1.942 28.42
Average loss over 10618292 tokens: -0.673, valid loss/error: -2.172 28.38
New best model saved
Average loss over 10604690 tokens: -0.671, valid loss/error: -2.081 28.39
Average loss over 10615287 tokens: -0.672, valid loss/error: -1.910 28.36
Average loss over 10614427 tokens: -0.672, valid loss/error: -1.784 28.41
Average loss over 10604612 tokens: -0.672, valid loss/error: -2.041 28.39
Average loss over 10573001 tokens: -0.668, valid loss/error: -2.153 28.40
Average loss over 10608839 tokens: -0.670, valid loss/error: -1.997 28.38
Average loss over 10618406 tokens: -0.670, valid loss/error: -2.026 28.41
Average loss over 10594431 tokens: -0.670, valid loss/error: -1.892 28.38
Average loss over 10610306 tokens: -0.673, valid loss/error: -1.756 28.42
Average loss over 10615535 tokens: -0.673, valid loss/error: -1.918 28.46
Average loss over 10620798 tokens: -0.672, valid loss/error: -1.903 28.41
Average loss over 10630104 tokens: -0.668, valid loss/error: -1.899 28.39
Average loss over 10613393 tokens: -0.664, valid loss/error: -1.793 28.35
Average loss over 10601540 tokens: -0.670, valid loss/error: -1.831 28.38
Average loss over 10616212 tokens: -0.667, valid loss/error: -1.858 28.39
Average loss over 10605628 tokens: -0.667, valid loss/error: -2.096 28.39
Average loss over 10594789 tokens: -0.668, valid loss/error: -1.966 28.39
Average loss over 10610368 tokens: -0.666, valid loss/error: -1.919 28.37
Average loss over 9498794 tokens: -0.668
Epoch: 36, train loss: -0.670, valid loss/error: -2.122 28.41
Average loss over 10615698 tokens: -0.672, valid loss/error: -1.937 28.35
Average loss over 10594103 tokens: -0.671, valid loss/error: -1.937 28.41
Average loss over 10638273 tokens: -0.672, valid loss/error: -1.981 28.36
Average loss over 10583159 tokens: -0.672, valid loss/error: -1.931 28.39
Average loss over 10610236 tokens: -0.667, valid loss/error: -2.055 28.39
Average loss over 10610064 tokens: -0.673, valid loss/error: -1.894 28.41
Average loss over 10609054 tokens: -0.672, valid loss/error: -1.792 28.37
Average loss over 10623098 tokens: -0.668, valid loss/error: -1.736 28.36
Average loss over 10606269 tokens: -0.668, valid loss/error: -2.011 28.39
Average loss over 10592794 tokens: -0.671, valid loss/error: -1.789 28.38
Average loss over 10604184 tokens: -0.667, valid loss/error: -1.723 28.42
Average loss over 10609838 tokens: -0.672, valid loss/error: -1.956 28.40
Average loss over 10616310 tokens: -0.671, valid loss/error: -1.863 28.38
Average loss over 10606533 tokens: -0.671, valid loss/error: -1.858 28.34
Average loss over 10598963 tokens: -0.671, valid loss/error: -1.903 28.35
Average loss over 10625414 tokens: -0.672, valid loss/error: -1.784 28.37
Average loss over 10622802 tokens: -0.668, valid loss/error: -2.022 28.41
Average loss over 10603187 tokens: -0.669, valid loss/error: -1.980 28.41
Average loss over 10600768 tokens: -0.668, valid loss/error: -1.775 28.38
Average loss over 3672875 tokens: -0.678
Epoch: 37, train loss: -0.670, valid loss/error: -1.983 28.39
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
Init lr: 1e-05, Dev Loss/Error: -0.975 28.98
Average loss over 21614398 tokens: -0.700, valid loss/error: -1.533 28.96
New best model saved
Average loss over 21623371 tokens: -0.739, valid loss/error: -1.655 28.88
New best model saved
Average loss over 21622761 tokens: -0.746, valid loss/error: -1.746 28.85
New best model saved
Average loss over 21221556 tokens: -0.747
Epoch: 1, train loss: -0.733, valid loss/error: -1.817 28.89
New best model saved
Average loss over 21592187 tokens: -0.749, valid loss/error: -1.867 28.87
New best model saved
Average loss over 21651148 tokens: -0.751, valid loss/error: -1.792 28.88
Average loss over 21653756 tokens: -0.750, valid loss/error: -1.692 28.85
New best model saved
Average loss over 21211848 tokens: -0.748
Epoch: 2, train loss: -0.749, valid loss/error: -1.836 28.86
Average loss over 21629414 tokens: -0.749, valid loss/error: -1.852 28.85
Average loss over 21639098 tokens: -0.757, valid loss/error: -1.826 28.84
New best model saved
Average loss over 21630733 tokens: -0.757, valid loss/error: -1.821 28.88
Average loss over 21171481 tokens: -0.753
Epoch: 3, train loss: -0.754, valid loss/error: -1.762 28.84
Average loss over 21623820 tokens: -0.755, valid loss/error: -1.741 28.82
New best model saved
Average loss over 21616794 tokens: -0.756, valid loss/error: -1.767 28.83
Average loss over 21631868 tokens: -0.757, valid loss/error: -1.846 28.88
Average loss over 21208807 tokens: -0.762
Epoch: 4, train loss: -0.757, valid loss/error: -1.630 28.82
Average loss over 21598811 tokens: -0.764, valid loss/error: -1.794 28.88
Average loss over 21666245 tokens: -0.761, valid loss/error: -1.918 28.80
New best model saved
Average loss over 21622716 tokens: -0.762, valid loss/error: -1.762 28.80
New best model saved
Average loss over 21191427 tokens: -0.755
Epoch: 5, train loss: -0.760, valid loss/error: -1.984 28.79
New best model saved
Average loss over 21586412 tokens: -0.764, valid loss/error: -1.870 28.80
Average loss over 21600655 tokens: -0.765, valid loss/error: -1.955 28.76
New best model saved
Average loss over 21637815 tokens: -0.760, valid loss/error: -1.777 28.76
Average loss over 21253489 tokens: -0.771
Epoch: 6, train loss: -0.765, valid loss/error: -1.766 28.81
Average loss over 21624432 tokens: -0.764, valid loss/error: -1.816 28.79
Average loss over 21648449 tokens: -0.765, valid loss/error: -1.854 28.79
Average loss over 21597101 tokens: -0.766, valid loss/error: -1.895 28.74
New best model saved
Average loss over 21216175 tokens: -0.771
Epoch: 7, train loss: -0.767, valid loss/error: -1.802 28.79
Average loss over 21586635 tokens: -0.773, valid loss/error: -1.823 28.72
New best model saved
Average loss over 21643214 tokens: -0.772, valid loss/error: -1.845 28.75
Average loss over 21557925 tokens: -0.768, valid loss/error: -1.908 28.72
New best model saved
Average loss over 21221618 tokens: -0.770
Epoch: 8, train loss: -0.770, valid loss/error: -1.784 28.73
Average loss over 21642479 tokens: -0.772, valid loss/error: -1.837 28.72
Average loss over 21639659 tokens: -0.772, valid loss/error: -1.919 28.75
Average loss over 21633762 tokens: -0.775, valid loss/error: -1.689 28.77
Average loss over 21145792 tokens: -0.766
Epoch: 9, train loss: -0.771, valid loss/error: -1.690 28.70
New best model saved
Average loss over 21621059 tokens: -0.775, valid loss/error: -1.801 28.70
New best model saved
Average loss over 21600564 tokens: -0.775, valid loss/error: -1.881 28.74
Average loss over 21611603 tokens: -0.778, valid loss/error: -1.851 28.70
Average loss over 21218786 tokens: -0.777
Epoch: 10, train loss: -0.776, valid loss/error: -1.974 28.77
Average loss over 21643796 tokens: -0.775, valid loss/error: -1.752 28.73
Average loss over 21572966 tokens: -0.773, valid loss/error: -1.674 28.71
Average loss over 21617234 tokens: -0.779, valid loss/error: -1.940 28.75
Average loss over 21232025 tokens: -0.779
Epoch: 11, train loss: -0.776, valid loss/error: -1.822 28.76
Average loss over 21659030 tokens: -0.775, valid loss/error: -1.937 28.72
Average loss over 21641088 tokens: -0.781, valid loss/error: -1.755 28.72
Average loss over 21592504 tokens: -0.778, valid loss/error: -1.714 28.73
Average loss over 21217519 tokens: -0.778
Epoch: 12, train loss: -0.778, valid loss/error: -1.801 28.73
Average loss over 21662125 tokens: -0.782, valid loss/error: -1.731 28.72
Average loss over 21631305 tokens: -0.779, valid loss/error: -1.972 28.72
Average loss over 21643020 tokens: -0.781, valid loss/error: -1.891 28.67
New best model saved
Average loss over 21167409 tokens: -0.777
Epoch: 13, train loss: -0.780, valid loss/error: -1.865 28.69
Average loss over 21638643 tokens: -0.783, valid loss/error: -1.865 28.70
Average loss over 21607809 tokens: -0.779, valid loss/error: -1.944 28.71
Average loss over 21653942 tokens: -0.788, valid loss/error: -2.015 28.65
New best model saved
Average loss over 21197699 tokens: -0.781
Epoch: 14, train loss: -0.783, valid loss/error: -1.825 28.62
New best model saved
Average loss over 21579674 tokens: -0.784, valid loss/error: -1.814 28.72
Average loss over 21630184 tokens: -0.783, valid loss/error: -1.995 28.70
Average loss over 21606501 tokens: -0.782, valid loss/error: -1.907 28.66
Average loss over 21216702 tokens: -0.785
Epoch: 15, train loss: -0.783, valid loss/error: -1.790 28.67
Average loss over 21654591 tokens: -0.783, valid loss/error: -1.776 28.70
Average loss over 21607247 tokens: -0.783, valid loss/error: -1.972 28.70
Average loss over 21656990 tokens: -0.786, valid loss/error: -1.782 28.64
Average loss over 21221837 tokens: -0.788
Epoch: 16, train loss: -0.785, valid loss/error: -1.876 28.69
Average loss over 21672172 tokens: -0.792, valid loss/error: -1.938 28.67
Average loss over 21642582 tokens: -0.786, valid loss/error: -1.735 28.66
Average loss over 21586368 tokens: -0.783, valid loss/error: -1.851 28.67
Average loss over 21179304 tokens: -0.785
Epoch: 17, train loss: -0.787, valid loss/error: -1.898 28.69
Average loss over 21617912 tokens: -0.790, valid loss/error: -1.767 28.70
Average loss over 21619844 tokens: -0.785, valid loss/error: -1.910 28.69
Average loss over 21609396 tokens: -0.788, valid loss/error: -1.949 28.65
Average loss over 21229738 tokens: -0.792
Epoch: 18, train loss: -0.789, valid loss/error: -1.774 28.67
Average loss over 21618674 tokens: -0.794, valid loss/error: -1.835 28.64
Average loss over 21651392 tokens: -0.788, valid loss/error: -1.818 28.66
Average loss over 21578022 tokens: -0.790, valid loss/error: -1.775 28.61
New best model saved
Average loss over 21211078 tokens: -0.786
Epoch: 19, train loss: -0.790, valid loss/error: -1.867 28.60
New best model saved
Average loss over 21640289 tokens: -0.791, valid loss/error: -1.770 28.65
Average loss over 21647445 tokens: -0.790, valid loss/error: -1.772 28.67
Average loss over 21645777 tokens: -0.789, valid loss/error: -2.013 28.65
Average loss over 21192050 tokens: -0.794
Epoch: 20, train loss: -0.791, valid loss/error: -1.730 28.69
Average loss over 21618760 tokens: -0.792, valid loss/error: -1.814 28.64
Average loss over 21619864 tokens: -0.796, valid loss/error: -1.756 28.66
Average loss over 21594584 tokens: -0.789, valid loss/error: -1.978 28.68
Average loss over 21209923 tokens: -0.790
Epoch: 21, train loss: -0.792, valid loss/error: -1.997 28.72
Average loss over 21573432 tokens: -0.791, valid loss/error: -1.831 28.66
Average loss over 21641278 tokens: -0.793, valid loss/error: -1.933 28.65
Average loss over 21605992 tokens: -0.796, valid loss/error: -1.901 28.64
Average loss over 21219292 tokens: -0.792
Epoch: 22, train loss: -0.793, valid loss/error: -1.734 28.67
Average loss over 21593842 tokens: -0.801, valid loss/error: -1.860 28.66
Average loss over 21605510 tokens: -0.795, valid loss/error: -1.700 28.61
Average loss over 21652105 tokens: -0.790, valid loss/error: -1.836 28.61
Average loss over 21174261 tokens: -0.789
Epoch: 23, train loss: -0.794, valid loss/error: -1.848 28.60
New best model saved
Average loss over 21591414 tokens: -0.795, valid loss/error: -1.786 28.62
Average loss over 21566998 tokens: -0.800, valid loss/error: -1.960 28.64
Average loss over 21641414 tokens: -0.797, valid loss/error: -1.838 28.63
Average loss over 21225633 tokens: -0.792
Epoch: 24, train loss: -0.796, valid loss/error: -1.775 28.62
Average loss over 21637204 tokens: -0.793, valid loss/error: -1.876 28.60
New best model saved
Average loss over 21633480 tokens: -0.795, valid loss/error: -1.874 28.63
Average loss over 21631165 tokens: -0.794, valid loss/error: -1.869 28.64
Average loss over 21243719 tokens: -0.796
Epoch: 25, train loss: -0.794, valid loss/error: -1.989 28.65
Average loss over 21628022 tokens: -0.799, valid loss/error: -1.904 28.67
Average loss over 21625804 tokens: -0.793, valid loss/error: -1.879 28.63
Average loss over 21670464 tokens: -0.796, valid loss/error: -1.868 28.63
Average loss over 21204066 tokens: -0.792
Epoch: 26, train loss: -0.795, valid loss/error: -1.780 28.64
Average loss over 21628291 tokens: -0.794, valid loss/error: -1.934 28.66
Average loss over 21633194 tokens: -0.798, valid loss/error: -1.785 28.58
New best model saved
Average loss over 21650070 tokens: -0.802, valid loss/error: -1.893 28.65
Average loss over 21230285 tokens: -0.796
Epoch: 27, train loss: -0.798, valid loss/error: -1.720 28.64
Average loss over 21616440 tokens: -0.801, valid loss/error: -1.935 28.62
Average loss over 21675793 tokens: -0.801, valid loss/error: -1.966 28.65
Average loss over 21614307 tokens: -0.798, valid loss/error: -1.956 28.68
Average loss over 21169487 tokens: -0.799
Epoch: 28, train loss: -0.800, valid loss/error: -1.947 28.64
Average loss over 21605467 tokens: -0.797, valid loss/error: -1.732 28.64
Average loss over 21650376 tokens: -0.796, valid loss/error: -1.742 28.64
Average loss over 21642018 tokens: -0.798, valid loss/error: -1.827 28.60
Average loss over 21217952 tokens: -0.800
Epoch: 29, train loss: -0.798, valid loss/error: -2.051 28.63
New best model saved
Average loss over 21604094 tokens: -0.802, valid loss/error: -1.897 28.62
Average loss over 21641244 tokens: -0.800, valid loss/error: -1.787 28.66
Average loss over 21630456 tokens: -0.802, valid loss/error: -1.772 28.62
Average loss over 21207149 tokens: -0.795
Epoch: 30, train loss: -0.800, valid loss/error: -1.778 28.61
Average loss over 21613345 tokens: -0.801, valid loss/error: -1.960 28.64
Average loss over 3080635 tokens: -0.811
Epoch: 31, train loss: -0.803, valid loss/error: -1.937 28.63
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/baseFT300k/std/checkpoint_1.h5
Init lr: 1e-05, Dev Loss/Error: 3.233 28.98
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/latest_2teacher_train_distill_sample.py", line 509, in <module>
    terr, done_tokens, cur_checkid, remain_steps, _Dws = train(low_td,middle_td,high_td, tl, vd, nvalid, stu_optimizer, stu_lrsch, high_teach_model,teach_model,student_model, lossf,distilllossf,
  File "/home/yfguo/transformer_924/latest_2teacher_train_distill_sample.py", line 150, in train
    _leva, _eeva = eva(ed, nd, high_teach_model, teach_model,stu_model, lossf, distilllossf, mv_device, multi_gpu, _use_amp)
  File "/home/yfguo/transformer_924/latest_2teacher_train_distill_sample.py", line 219, in eva
    teach_out_softmax_withoutT, teach_out_sotfmax_byT, teach_out = teach_model(seq_batch, seq_o.narrow(1, 0, lo))
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_NMT.py", line 56, in forward
    return self.dec(self.enc(inpute, _mask), inputo, _mask)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_Decoder.py", line 205, in forward
    out = out_softmax_withoutT.log()
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 770.00 MiB (GPU 0; 23.65 GiB total capacity; 15.41 GiB already allocated; 713.06 MiB free; 22.48 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/baseFT300k/std/checkpoint_1.h5
Init lr: 1e-05, Dev Loss/Error: 3.233 28.98
Average loss over 10305341 tokens: 1.627, valid loss/error: 2.872 28.90
New best model saved
Average loss over 10286685 tokens: 1.595, valid loss/error: 2.635 28.91
New best model saved
Average loss over 10257963 tokens: 1.601, valid loss/error: 2.376 28.85
New best model saved
Average loss over 10294033 tokens: 1.585, valid loss/error: 2.114 28.87
New best model saved
Average loss over 10269800 tokens: 1.577, valid loss/error: 1.826 28.83
New best model saved
Average loss over 10274536 tokens: 1.575, valid loss/error: 1.610 28.78
New best model saved
Average loss over 10287465 tokens: 1.573, valid loss/error: 1.533 28.83
New best model saved
Average loss over 10290310 tokens: 1.566, valid loss/error: 1.438 28.84
New best model saved
Average loss over 1045783 tokens: 1.568
Epoch: 1, train loss: 1.587, valid loss/error: 1.431 28.77
New best model saved
Average loss over 10293750 tokens: 1.559, valid loss/error: 1.418 28.80
New best model saved
Average loss over 10273317 tokens: 1.559, valid loss/error: 1.428 28.78
Average loss over 10283516 tokens: 1.559, valid loss/error: 1.415 28.79
New best model saved
Average loss over 10288717 tokens: 1.559, valid loss/error: 1.376 28.77
New best model saved
Average loss over 10293422 tokens: 1.556, valid loss/error: 1.383 28.75
New best model saved
Average loss over 10281836 tokens: 1.561, valid loss/error: 1.476 28.78
Average loss over 10276957 tokens: 1.560, valid loss/error: 1.406 28.82
Average loss over 10299235 tokens: 1.557, valid loss/error: 1.433 28.78
Average loss over 1037835 tokens: 1.547
Epoch: 2, train loss: 1.559, valid loss/error: 1.391 28.77
Average loss over 10269688 tokens: 1.548, valid loss/error: 1.385 28.77
Average loss over 10294760 tokens: 1.555, valid loss/error: 1.438 28.75
New best model saved
Average loss over 10288810 tokens: 1.543, valid loss/error: 1.439 28.76
Average loss over 10277360 tokens: 1.548, valid loss/error: 1.369 28.72
New best model saved
Average loss over 10269903 tokens: 1.550, valid loss/error: 1.386 28.72
New best model saved
Average loss over 10282880 tokens: 1.556, valid loss/error: 1.444 28.73
Average loss over 10290066 tokens: 1.552, valid loss/error: 1.446 28.72
Average loss over 10285346 tokens: 1.551, valid loss/error: 1.411 28.76
Average loss over 1039636 tokens: 1.541
Epoch: 3, train loss: 1.550, valid loss/error: 1.421 28.79
Average loss over 10300653 tokens: 1.546, valid loss/error: 1.439 28.72
New best model saved
Average loss over 10272440 tokens: 1.541, valid loss/error: 1.411 28.75
Average loss over 10290760 tokens: 1.543, valid loss/error: 1.449 28.80
Average loss over 10278235 tokens: 1.540, valid loss/error: 1.440 28.77
Average loss over 10268192 tokens: 1.547, valid loss/error: 1.434 28.71
New best model saved
Average loss over 10278237 tokens: 1.542, valid loss/error: 1.377 28.72
Average loss over 10288854 tokens: 1.550, valid loss/error: 1.426 28.71
Average loss over 10276536 tokens: 1.553, valid loss/error: 1.426 28.72
Average loss over 1042824 tokens: 1.528
Epoch: 4, train loss: 1.545, valid loss/error: 1.410 28.68
New best model saved
Average loss over 10285754 tokens: 1.542, valid loss/error: 1.404 28.72
Average loss over 10291581 tokens: 1.542, valid loss/error: 1.388 28.69
Average loss over 10291684 tokens: 1.544, valid loss/error: 1.430 28.67
New best model saved
Average loss over 10299247 tokens: 1.540, valid loss/error: 1.406 28.70
Average loss over 10285586 tokens: 1.537, valid loss/error: 1.440 28.67
New best model saved
Average loss over 10284243 tokens: 1.544, valid loss/error: 1.450 28.72
Average loss over 10281595 tokens: 1.538, valid loss/error: 1.417 28.69
Average loss over 10270054 tokens: 1.536, valid loss/error: 1.425 28.69
Average loss over 1045595 tokens: 1.532
Epoch: 5, train loss: 1.540, valid loss/error: 1.408 28.69
Average loss over 10276490 tokens: 1.532, valid loss/error: 1.413 28.72
Average loss over 10280297 tokens: 1.529, valid loss/error: 1.395 28.65
New best model saved
Average loss over 10274537 tokens: 1.540, valid loss/error: 1.408 28.64
New best model saved
Average loss over 10291229 tokens: 1.544, valid loss/error: 1.395 28.67
Average loss over 10282204 tokens: 1.530, valid loss/error: 1.434 28.69
Average loss over 10279406 tokens: 1.537, valid loss/error: 1.430 28.66
Average loss over 10290040 tokens: 1.534, valid loss/error: 1.387 28.67
Average loss over 10284832 tokens: 1.536, valid loss/error: 1.405 28.64
Average loss over 1044894 tokens: 1.545
Epoch: 6, train loss: 1.535, valid loss/error: 1.456 28.66
Average loss over 10276887 tokens: 1.534, valid loss/error: 1.425 28.64
Average loss over 10301563 tokens: 1.531, valid loss/error: 1.374 28.70
Average loss over 10294419 tokens: 1.532, valid loss/error: 1.414 28.68
Average loss over 10265475 tokens: 1.537, valid loss/error: 1.320 28.68
New best model saved
Average loss over 10272473 tokens: 1.530, valid loss/error: 1.418 28.70
Average loss over 10283461 tokens: 1.531, valid loss/error: 1.409 28.65
Average loss over 10274657 tokens: 1.528, valid loss/error: 1.464 28.63
New best model saved
Average loss over 10303206 tokens: 1.537, valid loss/error: 1.429 28.59
New best model saved
Average loss over 1048528 tokens: 1.541
Epoch: 7, train loss: 1.533, valid loss/error: 1.385 28.63
Average loss over 10283417 tokens: 1.534, valid loss/error: 1.439 28.56
New best model saved
Average loss over 10294781 tokens: 1.532, valid loss/error: 1.381 28.60
Average loss over 10277610 tokens: 1.523, valid loss/error: 1.410 28.64
Average loss over 10283966 tokens: 1.530, valid loss/error: 1.380 28.60
Average loss over 10306051 tokens: 1.533, valid loss/error: 1.452 28.64
Average loss over 10291854 tokens: 1.528, valid loss/error: 1.402 28.61
Average loss over 10274758 tokens: 1.528, valid loss/error: 1.360 28.60
Average loss over 10275222 tokens: 1.527, valid loss/error: 1.395 28.61
Average loss over 1043246 tokens: 1.537
Epoch: 8, train loss: 1.529, valid loss/error: 1.416 28.60
Average loss over 10299112 tokens: 1.526, valid loss/error: 1.385 28.61
Average loss over 10292780 tokens: 1.528, valid loss/error: 1.382 28.56
New best model saved
Average loss over 10285648 tokens: 1.522, valid loss/error: 1.428 28.57
Average loss over 10281359 tokens: 1.532, valid loss/error: 1.363 28.54
New best model saved
Average loss over 10284511 tokens: 1.524, valid loss/error: 1.378 28.59
Average loss over 10256283 tokens: 1.527, valid loss/error: 1.399 28.56
Average loss over 10291245 tokens: 1.524, valid loss/error: 1.451 28.59
Average loss over 10292548 tokens: 1.529, valid loss/error: 1.430 28.60
Average loss over 1038151 tokens: 1.519
Epoch: 9, train loss: 1.527, valid loss/error: 1.381 28.55
Average loss over 10304114 tokens: 1.522, valid loss/error: 1.415 28.55
Average loss over 10280197 tokens: 1.521, valid loss/error: 1.347 28.56
Average loss over 10289591 tokens: 1.526, valid loss/error: 1.428 28.56
Average loss over 10290793 tokens: 1.524, valid loss/error: 1.429 28.56
Average loss over 10291504 tokens: 1.528, valid loss/error: 1.433 28.53
New best model saved
Average loss over 10289024 tokens: 1.528, valid loss/error: 1.405 28.54
Average loss over 10287462 tokens: 1.526, valid loss/error: 1.422 28.54
Average loss over 10269124 tokens: 1.523, valid loss/error: 1.436 28.59
Average loss over 1037735 tokens: 1.529
Epoch: 10, train loss: 1.525, valid loss/error: 1.438 28.59
Average loss over 10300722 tokens: 1.516, valid loss/error: 1.429 28.57
Average loss over 10294738 tokens: 1.524, valid loss/error: 1.406 28.61
Average loss over 10280149 tokens: 1.522, valid loss/error: 1.430 28.57
Average loss over 10306435 tokens: 1.522, valid loss/error: 1.411 28.57
Average loss over 10259016 tokens: 1.516, valid loss/error: 1.405 28.56
Average loss over 10280427 tokens: 1.526, valid loss/error: 1.438 28.60
Average loss over 10263546 tokens: 1.517, valid loss/error: 1.417 28.57
Average loss over 10283294 tokens: 1.523, valid loss/error: 1.427 28.54
Average loss over 1040588 tokens: 1.516
Epoch: 11, train loss: 1.521, valid loss/error: 1.424 28.60
Average loss over 10268180 tokens: 1.519, valid loss/error: 1.348 28.59
Average loss over 10285390 tokens: 1.516, valid loss/error: 1.401 28.56
Average loss over 10272662 tokens: 1.514, valid loss/error: 1.435 28.57
Average loss over 10295946 tokens: 1.524, valid loss/error: 1.416 28.60
Average loss over 10260349 tokens: 1.515, valid loss/error: 1.355 28.61
Average loss over 10288053 tokens: 1.525, valid loss/error: 1.451 28.56
Average loss over 10281732 tokens: 1.521, valid loss/error: 1.368 28.58
Average loss over 10302368 tokens: 1.514, valid loss/error: 1.379 28.53
Average loss over 1036213 tokens: 1.506
Epoch: 12, train loss: 1.518, valid loss/error: 1.417 28.54
Average loss over 10290663 tokens: 1.513, valid loss/error: 1.407 28.54
Average loss over 10280550 tokens: 1.521, valid loss/error: 1.398 28.58
Average loss over 10268204 tokens: 1.508, valid loss/error: 1.398 28.57
Average loss over 10297884 tokens: 1.514, valid loss/error: 1.374 28.54
Average loss over 10304049 tokens: 1.520, valid loss/error: 1.348 28.51
New best model saved
Average loss over 10288237 tokens: 1.518, valid loss/error: 1.410 28.55
Average loss over 10264108 tokens: 1.518, valid loss/error: 1.420 28.51
New best model saved
Average loss over 10277829 tokens: 1.521, valid loss/error: 1.402 28.54
Average loss over 1051420 tokens: 1.530
Epoch: 13, train loss: 1.517, valid loss/error: 1.383 28.52
Average loss over 10276385 tokens: 1.511, valid loss/error: 1.383 28.53
Average loss over 10265828 tokens: 1.517, valid loss/error: 1.412 28.52
Average loss over 10289957 tokens: 1.517, valid loss/error: 1.400 28.57
Average loss over 10297455 tokens: 1.514, valid loss/error: 1.372 28.55
Average loss over 10302514 tokens: 1.510, valid loss/error: 1.414 28.54
Average loss over 10305743 tokens: 1.511, valid loss/error: 1.437 28.53
Average loss over 10275843 tokens: 1.523, valid loss/error: 1.335 28.53
Average loss over 10286149 tokens: 1.514, valid loss/error: 1.350 28.59
Average loss over 1041340 tokens: 1.518
Epoch: 14, train loss: 1.515, valid loss/error: 1.395 28.55
Average loss over 10282414 tokens: 1.515, valid loss/error: 1.348 28.56
Average loss over 10278563 tokens: 1.516, valid loss/error: 1.333 28.48
New best model saved
Average loss over 10292403 tokens: 1.513, valid loss/error: 1.397 28.51
Average loss over 10279615 tokens: 1.512, valid loss/error: 1.438 28.49
Average loss over 10282938 tokens: 1.514, valid loss/error: 1.399 28.52
Average loss over 10296210 tokens: 1.507, valid loss/error: 1.378 28.47
New best model saved
Average loss over 10271516 tokens: 1.510, valid loss/error: 1.373 28.49
Average loss over 10290310 tokens: 1.512, valid loss/error: 1.411 28.46
New best model saved
Average loss over 1043721 tokens: 1.519
Epoch: 15, train loss: 1.512, valid loss/error: 1.346 28.46
Average loss over 10301833 tokens: 1.511, valid loss/error: 1.383 28.51
Average loss over 10286689 tokens: 1.511, valid loss/error: 1.372 28.48
Average loss over 10279860 tokens: 1.509, valid loss/error: 1.364 28.48
Average loss over 10268555 tokens: 1.509, valid loss/error: 1.393 28.55
Average loss over 10274993 tokens: 1.507, valid loss/error: 1.367 28.50
Average loss over 10282393 tokens: 1.512, valid loss/error: 1.378 28.51
Average loss over 10282897 tokens: 1.515, valid loss/error: 1.414 28.53
Average loss over 10282848 tokens: 1.514, valid loss/error: 1.350 28.53
Average loss over 1039259 tokens: 1.514
Epoch: 16, train loss: 1.511, valid loss/error: 1.424 28.49
Average loss over 10300419 tokens: 1.510, valid loss/error: 1.410 28.50
Average loss over 10279839 tokens: 1.507, valid loss/error: 1.403 28.50
Average loss over 10280437 tokens: 1.507, valid loss/error: 1.418 28.50
Average loss over 10285477 tokens: 1.506, valid loss/error: 1.365 28.49
Average loss over 10284494 tokens: 1.506, valid loss/error: 1.351 28.53
Average loss over 10300710 tokens: 1.514, valid loss/error: 1.386 28.49
Average loss over 10271681 tokens: 1.506, valid loss/error: 1.360 28.51
Average loss over 10277704 tokens: 1.513, valid loss/error: 1.368 28.53
Average loss over 1041127 tokens: 1.508
Epoch: 17, train loss: 1.509, valid loss/error: 1.405 28.48
Average loss over 10290746 tokens: 1.507, valid loss/error: 1.392 28.54
Average loss over 10267657 tokens: 1.503, valid loss/error: 1.440 28.46
New best model saved
Average loss over 10276907 tokens: 1.509, valid loss/error: 1.366 28.51
Average loss over 10288979 tokens: 1.508, valid loss/error: 1.417 28.51
Average loss over 10276903 tokens: 1.507, valid loss/error: 1.378 28.49
Average loss over 10285349 tokens: 1.510, valid loss/error: 1.373 28.51
Average loss over 10300730 tokens: 1.512, valid loss/error: 1.363 28.49
Average loss over 10280582 tokens: 1.503, valid loss/error: 1.388 28.47
Average loss over 1045189 tokens: 1.499
Epoch: 18, train loss: 1.507, valid loss/error: 1.370 28.49
Average loss over 10313993 tokens: 1.505, valid loss/error: 1.389 28.45
New best model saved
Average loss over 10295616 tokens: 1.501, valid loss/error: 1.418 28.48
Average loss over 10309533 tokens: 1.511, valid loss/error: 1.381 28.54
Average loss over 10288897 tokens: 1.509, valid loss/error: 1.396 28.50
Average loss over 10276984 tokens: 1.502, valid loss/error: 1.383 28.49
Average loss over 10287095 tokens: 1.510, valid loss/error: 1.340 28.50
Average loss over 10252204 tokens: 1.502, valid loss/error: 1.329 28.51
Average loss over 10263188 tokens: 1.509, valid loss/error: 1.418 28.52
Average loss over 1047522 tokens: 1.503
Epoch: 19, train loss: 1.506, valid loss/error: 1.323 28.51
Average loss over 10272291 tokens: 1.499, valid loss/error: 1.393 28.56
Average loss over 10266905 tokens: 1.500, valid loss/error: 1.397 28.55
Average loss over 10284093 tokens: 1.510, valid loss/error: 1.448 28.56
Average loss over 10280521 tokens: 1.505, valid loss/error: 1.421 28.52
Average loss over 10282355 tokens: 1.502, valid loss/error: 1.404 28.48
Average loss over 10297809 tokens: 1.504, valid loss/error: 1.322 28.48
Average loss over 10262909 tokens: 1.505, valid loss/error: 1.335 28.51
Average loss over 10284504 tokens: 1.502, valid loss/error: 1.417 28.51
Average loss over 1042298 tokens: 1.498
Epoch: 20, train loss: 1.503, valid loss/error: 1.383 28.48
Average loss over 10275843 tokens: 1.497, valid loss/error: 1.359 28.49
Average loss over 10279680 tokens: 1.502, valid loss/error: 1.388 28.54
Average loss over 10286663 tokens: 1.510, valid loss/error: 1.350 28.55
Average loss over 10263339 tokens: 1.504, valid loss/error: 1.393 28.52
Average loss over 10291210 tokens: 1.505, valid loss/error: 1.395 28.55
Average loss over 10286351 tokens: 1.503, valid loss/error: 1.435 28.52
Average loss over 10292442 tokens: 1.506, valid loss/error: 1.378 28.50
Average loss over 10297442 tokens: 1.504, valid loss/error: 1.437 28.55
Average loss over 1046849 tokens: 1.484
Epoch: 21, train loss: 1.504, valid loss/error: 1.383 28.59
Average loss over 10289046 tokens: 1.500, valid loss/error: 1.388 28.52
Average loss over 10286656 tokens: 1.502, valid loss/error: 1.397 28.52
Average loss over 10295673 tokens: 1.496, valid loss/error: 1.392 28.47
Average loss over 10304849 tokens: 1.506, valid loss/error: 1.370 28.50
Average loss over 10272333 tokens: 1.499, valid loss/error: 1.411 28.48
Average loss over 10274558 tokens: 1.498, valid loss/error: 1.362 28.51
Average loss over 10259816 tokens: 1.497, valid loss/error: 1.356 28.49
Average loss over 10303735 tokens: 1.504, valid loss/error: 1.420 28.53
Average loss over 1042603 tokens: 1.495
Epoch: 22, train loss: 1.500, valid loss/error: 1.399 28.51
Average loss over 10264471 tokens: 1.504, valid loss/error: 1.352 28.51
Average loss over 10281024 tokens: 1.495, valid loss/error: 1.331 28.52
Average loss over 10290217 tokens: 1.499, valid loss/error: 1.371 28.51
Average loss over 10295088 tokens: 1.498, valid loss/error: 1.300 28.49
New best model saved
Average loss over 10281474 tokens: 1.499, valid loss/error: 1.397 28.48
Average loss over 10282118 tokens: 1.498, valid loss/error: 1.384 28.47
Average loss over 10258651 tokens: 1.501, valid loss/error: 1.384 28.47
Average loss over 10302329 tokens: 1.503, valid loss/error: 1.393 28.49
Average loss over 1047683 tokens: 1.508
Epoch: 23, train loss: 1.500, valid loss/error: 1.372 28.49
Average loss over 10294484 tokens: 1.499, valid loss/error: 1.430 28.49
Average loss over 10265289 tokens: 1.497, valid loss/error: 1.385 28.48
Average loss over 10298926 tokens: 1.500, valid loss/error: 1.392 28.46
Average loss over 10269109 tokens: 1.492, valid loss/error: 1.308 28.51
Average loss over 10289271 tokens: 1.503, valid loss/error: 1.348 28.51
Average loss over 10293413 tokens: 1.501, valid loss/error: 1.382 28.46
Average loss over 10285269 tokens: 1.498, valid loss/error: 1.393 28.47
Average loss over 10278384 tokens: 1.499, valid loss/error: 1.358 28.48
Average loss over 1041598 tokens: 1.494
Epoch: 24, train loss: 1.499, valid loss/error: 1.368 28.48
Average loss over 10318150 tokens: 1.494, valid loss/error: 1.391 28.46
Average loss over 10280538 tokens: 1.492, valid loss/error: 1.329 28.47
Average loss over 10279584 tokens: 1.498, valid loss/error: 1.408 28.43
New best model saved
Average loss over 10302242 tokens: 1.495, valid loss/error: 1.389 28.43
Average loss over 10264651 tokens: 1.501, valid loss/error: 1.403 28.47
Average loss over 10288360 tokens: 1.502, valid loss/error: 1.355 28.48
Average loss over 10284414 tokens: 1.504, valid loss/error: 1.319 28.49
Average loss over 10279183 tokens: 1.488, valid loss/error: 1.405 28.46
Average loss over 1050716 tokens: 1.513
Epoch: 25, train loss: 1.497, valid loss/error: 1.374 28.48
Average loss over 10287731 tokens: 1.496, valid loss/error: 1.395 28.44
Average loss over 10285338 tokens: 1.491, valid loss/error: 1.379 28.43
Average loss over 10276366 tokens: 1.489, valid loss/error: 1.345 28.44
Average loss over 10274550 tokens: 1.498, valid loss/error: 1.406 28.46
Average loss over 10282382 tokens: 1.495, valid loss/error: 1.421 28.47
Average loss over 10269049 tokens: 1.498, valid loss/error: 1.351 28.45
Average loss over 10272283 tokens: 1.496, valid loss/error: 1.399 28.47
Average loss over 10303113 tokens: 1.497, valid loss/error: 1.332 28.46
Average loss over 1044776 tokens: 1.492
Epoch: 26, train loss: 1.495, valid loss/error: 1.392 28.45
Average loss over 10297254 tokens: 1.490, valid loss/error: 1.381 28.46
Average loss over 10287064 tokens: 1.495, valid loss/error: 1.395 28.48
Average loss over 10281211 tokens: 1.497, valid loss/error: 1.413 28.43
Average loss over 10283088 tokens: 1.493, valid loss/error: 1.360 28.45
Average loss over 10271301 tokens: 1.496, valid loss/error: 1.367 28.48
Average loss over 10291072 tokens: 1.491, valid loss/error: 1.343 28.48
Average loss over 10291252 tokens: 1.496, valid loss/error: 1.394 28.48
Average loss over 10290986 tokens: 1.490, valid loss/error: 1.400 28.47
Average loss over 1040222 tokens: 1.495
Epoch: 27, train loss: 1.493, valid loss/error: 1.396 28.50
Average loss over 10307195 tokens: 1.496, valid loss/error: 1.409 28.45
Average loss over 10264936 tokens: 1.493, valid loss/error: 1.366 28.48
Average loss over 10284594 tokens: 1.487, valid loss/error: 1.349 28.51
Average loss over 10293882 tokens: 1.497, valid loss/error: 1.356 28.49
Average loss over 10298965 tokens: 1.493, valid loss/error: 1.408 28.48
Average loss over 10282896 tokens: 1.494, valid loss/error: 1.388 28.45
Average loss over 10265380 tokens: 1.495, valid loss/error: 1.392 28.45
Average loss over 10286545 tokens: 1.492, valid loss/error: 1.412 28.50
Average loss over 1046554 tokens: 1.484
Epoch: 28, train loss: 1.493, valid loss/error: 1.297 28.45
New best model saved
Average loss over 10290672 tokens: 1.491, valid loss/error: 1.322 28.46
Average loss over 10289929 tokens: 1.496, valid loss/error: 1.321 28.53
Average loss over 10283134 tokens: 1.490, valid loss/error: 1.394 28.50
Average loss over 10274759 tokens: 1.494, valid loss/error: 1.364 28.51
Average loss over 10295427 tokens: 1.499, valid loss/error: 1.375 28.44
Average loss over 10278572 tokens: 1.488, valid loss/error: 1.402 28.46
Average loss over 10302867 tokens: 1.491, valid loss/error: 1.396 28.44
Average loss over 10293526 tokens: 1.493, valid loss/error: 1.416 28.46
Average loss over 1041081 tokens: 1.482
Epoch: 29, train loss: 1.493, valid loss/error: 1.411 28.44
Average loss over 10294299 tokens: 1.487, valid loss/error: 1.364 28.43
Average loss over 10283538 tokens: 1.487, valid loss/error: 1.356 28.45
Average loss over 10294285 tokens: 1.489, valid loss/error: 1.383 28.44
Average loss over 10300953 tokens: 1.493, valid loss/error: 1.392 28.46
Average loss over 10270090 tokens: 1.487, valid loss/error: 1.337 28.45
Average loss over 10279101 tokens: 1.494, valid loss/error: 1.325 28.45
Average loss over 10263837 tokens: 1.494, valid loss/error: 1.399 28.49
Average loss over 10279913 tokens: 1.497, valid loss/error: 1.415 28.50
Average loss over 1049214 tokens: 1.506
Epoch: 30, train loss: 1.491, valid loss/error: 1.377 28.46
Average loss over 10298467 tokens: 1.486, valid loss/error: 1.367 28.46
Average loss over 10273367 tokens: 1.486, valid loss/error: 1.381 28.41
New best model saved
Average loss over 10283667 tokens: 1.497, valid loss/error: 1.359 28.48
Average loss over 10284762 tokens: 1.487, valid loss/error: 1.359 28.47
Average loss over 10286886 tokens: 1.492, valid loss/error: 1.415 28.47
Average loss over 971267 tokens: 1.490
Epoch: 31, train loss: 1.490, valid loss/error: 1.432 28.42
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende_base_test_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.488 100.00
Initial model saved
Average loss over 21182358 tokens: 8.854, valid loss/error: 7.578 88.56
New best model saved
Average loss over 21251648 tokens: 7.027, valid loss/error: 6.591 82.77
New best model saved
Average loss over 21278497 tokens: 6.122, valid loss/error: 5.641 72.85
New best model saved
Average loss over 21314277 tokens: 5.242, valid loss/error: 4.654 58.53
New best model saved
Average loss over 21317447 tokens: 4.525, valid loss/error: 4.085 50.53
New best model saved
Average loss over 21326830 tokens: 4.153, valid loss/error: 3.790 46.82
New best model saved
Average loss over 11480445 tokens: 3.976
Epoch: 1, train loss: 5.818, valid loss/error: 3.672 44.99
New best model saved
Average loss over 21259795 tokens: 3.870, valid loss/error: 3.542 43.17
New best model saved
Average loss over 21255327 tokens: 3.782, valid loss/error: 3.455 42.19
New best model saved
Average loss over 21330787 tokens: 3.686, valid loss/error: 3.375 40.99
New best model saved
Average loss over 21313947 tokens: 3.643, valid loss/error: 3.309 39.96
New best model saved
Average loss over 21229896 tokens: 3.572, valid loss/error: 3.253 39.10
New best model saved
Average loss over 21303634 tokens: 3.522, valid loss/error: 3.230 38.64
New best model saved
Average loss over 11458116 tokens: 3.485
Epoch: 2, train loss: 3.663, valid loss/error: 3.195 38.38
New best model saved
Average loss over 21258912 tokens: 3.440, valid loss/error: 3.170 38.00
New best model saved
Average loss over 21292368 tokens: 3.435, valid loss/error: 3.127 37.30
New best model saved
Average loss over 21252344 tokens: 3.416, valid loss/error: 3.100 37.01
New best model saved
Average loss over 21257050 tokens: 3.400, valid loss/error: 3.084 36.78
New best model saved
Average loss over 21299809 tokens: 3.397, valid loss/error: 3.061 36.51
New best model saved
Average loss over 21297970 tokens: 3.354, valid loss/error: 3.036 36.02
New best model saved
Average loss over 11493049 tokens: 3.327
Epoch: 3, train loss: 3.401, valid loss/error: 3.037 35.94
New best model saved
Average loss over 21253646 tokens: 3.324, valid loss/error: 3.026 35.71
New best model saved
Average loss over 21269262 tokens: 3.317, valid loss/error: 3.008 35.60
New best model saved
Average loss over 21230361 tokens: 3.290, valid loss/error: 2.999 35.43
New best model saved
Average loss over 21286729 tokens: 3.302, valid loss/error: 2.987 35.15
New best model saved
Average loss over 21295205 tokens: 3.274, valid loss/error: 2.983 35.24
New best model saved
Average loss over 21271236 tokens: 3.277, valid loss/error: 2.971 35.06
New best model saved
Average loss over 11545063 tokens: 3.279
Epoch: 4, train loss: 3.296, valid loss/error: 2.972 34.95
New best model saved
Average loss over 21183266 tokens: 3.214, valid loss/error: 2.963 34.78
New best model saved
Average loss over 21275751 tokens: 3.244, valid loss/error: 2.954 34.74
New best model saved
Average loss over 21287960 tokens: 3.240, valid loss/error: 2.947 34.73
New best model saved
Average loss over 21270624 tokens: 3.239, valid loss/error: 2.958 34.69
New best model saved
Average loss over 21393630 tokens: 3.243, valid loss/error: 2.933 34.45
New best model saved
Average loss over 21272639 tokens: 3.236, valid loss/error: 2.931 34.25
New best model saved
Average loss over 11467632 tokens: 3.238
Epoch: 5, train loss: 3.236, valid loss/error: 2.928 34.31
New best model saved
Average loss over 21309007 tokens: 3.188, valid loss/error: 2.922 34.17
New best model saved
Average loss over 21271454 tokens: 3.194, valid loss/error: 2.921 34.29
New best model saved
Average loss over 21251066 tokens: 3.197, valid loss/error: 2.911 33.95
New best model saved
Average loss over 21187644 tokens: 3.191, valid loss/error: 2.905 34.00
New best model saved
Average loss over 21327023 tokens: 3.200, valid loss/error: 2.902 33.97
New best model saved
Average loss over 21307746 tokens: 3.199, valid loss/error: 2.891 33.77
New best model saved
Average loss over 11497562 tokens: 3.211
Epoch: 6, train loss: 3.196, valid loss/error: 2.893 33.79
Average loss over 21261657 tokens: 3.163, valid loss/error: 2.897 34.01
Average loss over 21198415 tokens: 3.160, valid loss/error: 2.895 33.72
New best model saved
Average loss over 21291412 tokens: 3.174, valid loss/error: 2.890 33.70
New best model saved
Average loss over 21287599 tokens: 3.166, valid loss/error: 2.882 33.58
New best model saved
Average loss over 21339678 tokens: 3.168, valid loss/error: 2.880 33.58
New best model saved
Average loss over 21279018 tokens: 3.168, valid loss/error: 2.881 33.63
Average loss over 11493723 tokens: 3.174
Epoch: 7, train loss: 3.167, valid loss/error: 2.873 33.40
New best model saved
Average loss over 21265040 tokens: 3.147, valid loss/error: 2.873 33.54
Average loss over 21258650 tokens: 3.135, valid loss/error: 2.872 33.53
New best model saved
Average loss over 21325033 tokens: 3.140, valid loss/error: 2.872 33.42
New best model saved
Average loss over 21287653 tokens: 3.143, valid loss/error: 2.868 33.44
New best model saved
Average loss over 21293991 tokens: 3.147, valid loss/error: 2.862 33.29
New best model saved
Average loss over 21277797 tokens: 3.164, valid loss/error: 2.859 33.27
New best model saved
Average loss over 11443338 tokens: 3.127
Epoch: 8, train loss: 3.144, valid loss/error: 2.853 33.15
New best model saved
Average loss over 21292954 tokens: 3.119, valid loss/error: 2.856 33.20
Average loss over 21310282 tokens: 3.125, valid loss/error: 2.853 33.22
Average loss over 21253288 tokens: 3.138, valid loss/error: 2.851 33.05
New best model saved
Average loss over 21202465 tokens: 3.124, valid loss/error: 2.855 33.10
Average loss over 21342961 tokens: 3.126, valid loss/error: 2.848 33.07
New best model saved
Average loss over 21255357 tokens: 3.126, valid loss/error: 2.849 32.95
New best model saved
Average loss over 11494195 tokens: 3.125
Epoch: 9, train loss: 3.126, valid loss/error: 2.841 32.97
New best model saved
Average loss over 21236151 tokens: 3.094, valid loss/error: 2.850 33.10
Average loss over 21258775 tokens: 3.113, valid loss/error: 2.847 33.13
Average loss over 21250522 tokens: 3.124, valid loss/error: 2.843 33.10
Average loss over 21283318 tokens: 3.111, valid loss/error: 2.842 32.96
Average loss over 21321522 tokens: 3.109, valid loss/error: 2.837 32.90
New best model saved
Average loss over 21320783 tokens: 3.126, valid loss/error: 2.834 32.90
New best model saved
Average loss over 11480431 tokens: 3.091
Epoch: 10, train loss: 3.111, valid loss/error: 2.838 32.94
Average loss over 21265807 tokens: 3.085, valid loss/error: 2.839 32.84
New best model saved
Average loss over 21241101 tokens: 3.086, valid loss/error: 2.837 32.71
New best model saved
Average loss over 21297489 tokens: 3.095, valid loss/error: 2.826 32.70
New best model saved
Average loss over 21356698 tokens: 3.113, valid loss/error: 2.826 32.69
New best model saved
Average loss over 21287726 tokens: 3.106, valid loss/error: 2.826 32.81
Average loss over 21253062 tokens: 3.093, valid loss/error: 2.827 32.76
Average loss over 11449619 tokens: 3.118
Epoch: 11, train loss: 3.098, valid loss/error: 2.820 32.73
New best model saved
Average loss over 21261708 tokens: 3.077, valid loss/error: 2.825 32.82
Average loss over 21314176 tokens: 3.086, valid loss/error: 2.828 32.82
Average loss over 21251199 tokens: 3.084, valid loss/error: 2.825 32.69
New best model saved
Average loss over 21302182 tokens: 3.094, valid loss/error: 2.815 32.69
New best model saved
Average loss over 21326749 tokens: 3.095, valid loss/error: 2.827 32.82
Average loss over 21273214 tokens: 3.094, valid loss/error: 2.819 32.72
Average loss over 11422274 tokens: 3.074
Epoch: 12, train loss: 3.087, valid loss/error: 2.816 32.60
New best model saved
Average loss over 21277897 tokens: 3.084, valid loss/error: 2.820 32.70
Average loss over 21318526 tokens: 3.061, valid loss/error: 2.817 32.58
New best model saved
Average loss over 21281817 tokens: 3.074, valid loss/error: 2.816 32.59
Average loss over 21241299 tokens: 3.093, valid loss/error: 2.810 32.63
New best model saved
Average loss over 21235092 tokens: 3.077, valid loss/error: 2.812 32.63
Average loss over 21282289 tokens: 3.069, valid loss/error: 2.810 32.50
New best model saved
Average loss over 11514582 tokens: 3.089
Epoch: 13, train loss: 3.078, valid loss/error: 2.813 32.64
Average loss over 21280309 tokens: 3.067, valid loss/error: 2.807 32.48
New best model saved
Average loss over 21199318 tokens: 3.051, valid loss/error: 2.808 32.55
Average loss over 21253076 tokens: 3.062, valid loss/error: 2.821 32.54
Average loss over 21336559 tokens: 3.066, valid loss/error: 2.809 32.51
Average loss over 21291430 tokens: 3.070, valid loss/error: 2.807 32.48
New best model saved
Average loss over 21235017 tokens: 3.083, valid loss/error: 2.806 32.43
New best model saved
Average loss over 11555793 tokens: 3.096
Epoch: 14, train loss: 3.069, valid loss/error: 2.802 32.40
New best model saved
Average loss over 21227014 tokens: 3.034, valid loss/error: 2.803 32.36
New best model saved
Average loss over 21283879 tokens: 3.061, valid loss/error: 2.808 32.41
Average loss over 21309771 tokens: 3.068, valid loss/error: 2.800 32.38
New best model saved
Average loss over 21324204 tokens: 3.071, valid loss/error: 2.810 32.50
Average loss over 21247472 tokens: 3.077, valid loss/error: 2.800 32.35
New best model saved
Average loss over 21268521 tokens: 3.053, valid loss/error: 2.805 32.35
Average loss over 11490641 tokens: 3.069
Epoch: 15, train loss: 3.061, valid loss/error: 2.800 32.33
New best model saved
Average loss over 21293185 tokens: 3.063, valid loss/error: 2.805 32.43
Average loss over 21292390 tokens: 3.036, valid loss/error: 2.797 32.25
New best model saved
Average loss over 21290687 tokens: 3.032, valid loss/error: 2.799 32.27
Average loss over 21251555 tokens: 3.070, valid loss/error: 2.799 32.24
New best model saved
Average loss over 21260237 tokens: 3.044, valid loss/error: 2.804 32.39
Average loss over 21244176 tokens: 3.068, valid loss/error: 2.794 32.26
New best model saved
Average loss over 11519272 tokens: 3.080
Epoch: 16, train loss: 3.055, valid loss/error: 2.800 32.24
Average loss over 21287781 tokens: 3.032, valid loss/error: 2.798 32.38
Average loss over 21354363 tokens: 3.047, valid loss/error: 2.797 32.35
Average loss over 21260857 tokens: 3.044, valid loss/error: 2.803 32.29
Average loss over 21221924 tokens: 3.043, valid loss/error: 2.794 32.22
New best model saved
Average loss over 21303031 tokens: 3.055, valid loss/error: 2.797 32.25
Average loss over 21211087 tokens: 3.056, valid loss/error: 2.793 32.30
New best model saved
Average loss over 11512459 tokens: 3.072
Epoch: 17, train loss: 3.048, valid loss/error: 2.792 32.24
New best model saved
Average loss over 21263062 tokens: 3.033, valid loss/error: 2.793 32.23
Average loss over 21266910 tokens: 3.032, valid loss/error: 2.793 32.27
Average loss over 21270478 tokens: 3.043, valid loss/error: 2.791 32.22
New best model saved
Average loss over 21183193 tokens: 3.035, valid loss/error: 2.793 32.16
New best model saved
Average loss over 21343084 tokens: 3.063, valid loss/error: 2.788 32.09
New best model saved
Average loss over 21309849 tokens: 3.038, valid loss/error: 2.792 32.27
Average loss over 11514926 tokens: 3.062
Epoch: 18, train loss: 3.043, valid loss/error: 2.789 32.14
Average loss over 21283876 tokens: 3.022, valid loss/error: 2.786 32.22
New best model saved
Average loss over 21213794 tokens: 3.031, valid loss/error: 2.793 32.20
Average loss over 21288307 tokens: 3.040, valid loss/error: 2.794 32.34
Average loss over 21305843 tokens: 3.044, valid loss/error: 2.790 32.23
Average loss over 21347329 tokens: 3.054, valid loss/error: 2.787 32.20
Average loss over 21220079 tokens: 3.036, valid loss/error: 2.793 32.20
Average loss over 11492274 tokens: 3.037
Epoch: 19, train loss: 3.038, valid loss/error: 2.790 32.21
Average loss over 21274768 tokens: 3.018, valid loss/error: 2.789 32.13
Average loss over 21291315 tokens: 3.026, valid loss/error: 2.792 32.20
Average loss over 12771487 tokens: 3.020
Epoch: 20, train loss: 3.022, valid loss/error: 2.787 32.10
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python encs_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base_ceshi_epochs/std/checkpoint_12.h5
Init lr: 1e-05, Dev Loss/Error: 2.574 29.69
Average loss over 21351903 tokens: 2.532, valid loss/error: 2.561 29.32
New best model saved
Average loss over 21341623 tokens: 2.519, valid loss/error: 2.558 29.30
New best model saved
Average loss over 21353867 tokens: 2.517, valid loss/error: 2.557 29.23
New best model saved
Average loss over 21443009 tokens: 2.517, valid loss/error: 2.555 29.19
New best model saved
Average loss over 21449363 tokens: 2.518, valid loss/error: 2.553 29.22
New best model saved
Average loss over 21385277 tokens: 2.519, valid loss/error: 2.553 29.16
New best model saved
Average loss over 21383473 tokens: 2.509, valid loss/error: 2.551 29.18
New best model saved
Average loss over 21416798 tokens: 2.512, valid loss/error: 2.549 29.18
New best model saved
Average loss over 21385477 tokens: 2.506, valid loss/error: 2.550 29.20
Average loss over 18558662 tokens: 2.513
Epoch: 1, train loss: 2.516, valid loss/error: 2.548 29.15
New best model saved
Average loss over 21429024 tokens: 2.509, valid loss/error: 2.548 29.10
New best model saved
Average loss over 21372973 tokens: 2.505, valid loss/error: 2.547 29.13
New best model saved
Average loss over 21398845 tokens: 2.509, valid loss/error: 2.547 29.13
New best model saved
Average loss over 21417527 tokens: 2.506, valid loss/error: 2.547 29.14
New best model saved
Average loss over 21377926 tokens: 2.509, valid loss/error: 2.546 29.11
New best model saved
Average loss over 21381383 tokens: 2.499, valid loss/error: 2.544 29.10
New best model saved
Average loss over 21405321 tokens: 2.509, valid loss/error: 2.545 29.05
New best model saved
Average loss over 21351285 tokens: 2.503, valid loss/error: 2.544 29.07
New best model saved
Average loss over 21404312 tokens: 2.502, valid loss/error: 2.544 28.99
New best model saved
Average loss over 18530856 tokens: 2.506
Epoch: 2, train loss: 2.506, valid loss/error: 2.543 29.07
New best model saved
Average loss over 21394829 tokens: 2.501, valid loss/error: 2.543 29.06
Average loss over 21399397 tokens: 2.503, valid loss/error: 2.543 29.03
Average loss over 21354736 tokens: 2.496, valid loss/error: 2.542 29.00
New best model saved
Average loss over 21393044 tokens: 2.498, valid loss/error: 2.542 29.00
New best model saved
Average loss over 21377886 tokens: 2.498, valid loss/error: 2.542 29.03
Average loss over 21398712 tokens: 2.503, valid loss/error: 2.542 29.01
Average loss over 21408542 tokens: 2.502, valid loss/error: 2.541 28.95
New best model saved
Average loss over 21377701 tokens: 2.502, valid loss/error: 2.542 29.00
Average loss over 21403058 tokens: 2.503, valid loss/error: 2.540 28.98
New best model saved
Average loss over 18561547 tokens: 2.502
Epoch: 3, train loss: 2.501, valid loss/error: 2.539 28.98
New best model saved
Average loss over 21358363 tokens: 2.505, valid loss/error: 2.540 28.97
Average loss over 21426358 tokens: 2.498, valid loss/error: 2.539 28.98
New best model saved
Average loss over 21473729 tokens: 2.495, valid loss/error: 2.539 28.96
New best model saved
Average loss over 21395135 tokens: 2.496, valid loss/error: 2.539 28.96
Average loss over 21429861 tokens: 2.494, valid loss/error: 2.538 28.90
New best model saved
Average loss over 21319392 tokens: 2.498, valid loss/error: 2.539 28.93
Average loss over 21387644 tokens: 2.500, valid loss/error: 2.538 28.92
Average loss over 21412198 tokens: 2.499, valid loss/error: 2.539 28.91
Average loss over 21369877 tokens: 2.489, valid loss/error: 2.538 28.89
New best model saved
Average loss over 18496895 tokens: 2.499
Epoch: 4, train loss: 2.497, valid loss/error: 2.538 28.88
New best model saved
Average loss over 21381225 tokens: 2.497, valid loss/error: 2.538 28.94
Average loss over 21416023 tokens: 2.495, valid loss/error: 2.537 28.86
New best model saved
Average loss over 21443792 tokens: 2.491, valid loss/error: 2.537 28.88
New best model saved
Average loss over 21422829 tokens: 2.497, valid loss/error: 2.537 28.90
Average loss over 21389534 tokens: 2.491, valid loss/error: 2.537 28.86
New best model saved
Average loss over 21384102 tokens: 2.494, valid loss/error: 2.536 28.87
New best model saved
Average loss over 21396045 tokens: 2.498, valid loss/error: 2.536 28.91
Average loss over 21378545 tokens: 2.494, valid loss/error: 2.535 28.84
New best model saved
Average loss over 21354560 tokens: 2.490, valid loss/error: 2.536 28.90
Average loss over 18502797 tokens: 2.496
Epoch: 5, train loss: 2.494, valid loss/error: 2.535 28.86
New best model saved
Average loss over 21389888 tokens: 2.491, valid loss/error: 2.536 28.89
Average loss over 21446060 tokens: 2.496, valid loss/error: 2.534 28.85
New best model saved
Average loss over 21374956 tokens: 2.497, valid loss/error: 2.536 28.83
New best model saved
Average loss over 21391248 tokens: 2.486, valid loss/error: 2.535 28.84
Average loss over 21405651 tokens: 2.497, valid loss/error: 2.534 28.85
Average loss over 21381439 tokens: 2.492, valid loss/error: 2.534 28.82
New best model saved
Average loss over 21387330 tokens: 2.491, valid loss/error: 2.534 28.81
New best model saved
Average loss over 21349078 tokens: 2.491, valid loss/error: 2.535 28.84
Average loss over 21379735 tokens: 2.492, valid loss/error: 2.536 28.84
Average loss over 18564067 tokens: 2.485
Epoch: 6, train loss: 2.492, valid loss/error: 2.533 28.82
New best model saved
Average loss over 21372291 tokens: 2.499, valid loss/error: 2.533 28.82
Average loss over 21426721 tokens: 2.492, valid loss/error: 2.535 28.83
Average loss over 21383618 tokens: 2.491, valid loss/error: 2.535 28.87
Average loss over 21359421 tokens: 2.489, valid loss/error: 2.534 28.82
Average loss over 21379918 tokens: 2.488, valid loss/error: 2.533 28.82
Average loss over 21413727 tokens: 2.483, valid loss/error: 2.532 28.78
New best model saved
Average loss over 21381182 tokens: 2.489, valid loss/error: 2.532 28.80
New best model saved
Average loss over 21385581 tokens: 2.486, valid loss/error: 2.533 28.81
Average loss over 21464611 tokens: 2.493, valid loss/error: 2.533 28.81
Average loss over 18502382 tokens: 2.489
Epoch: 7, train loss: 2.490, valid loss/error: 2.533 28.84
Average loss over 21422195 tokens: 2.483, valid loss/error: 2.534 28.82
Average loss over 21422767 tokens: 2.485, valid loss/error: 2.533 28.85
Average loss over 21362668 tokens: 2.481, valid loss/error: 2.533 28.85
Average loss over 21400119 tokens: 2.481, valid loss/error: 2.533 28.83
Average loss over 21386556 tokens: 2.478, valid loss/error: 2.533 28.78
New best model saved
Average loss over 21369733 tokens: 2.484, valid loss/error: 2.534 28.77
New best model saved
Average loss over 21385466 tokens: 2.495, valid loss/error: 2.531 28.73
New best model saved
Average loss over 21404230 tokens: 2.495, valid loss/error: 2.531 28.76
New best model saved
Average loss over 21390866 tokens: 2.496, valid loss/error: 2.531 28.76
Average loss over 18524852 tokens: 2.504
Epoch: 8, train loss: 2.488, valid loss/error: 2.532 28.75
Average loss over 21365804 tokens: 2.492, valid loss/error: 2.532 28.77
Average loss over 21431645 tokens: 2.486, valid loss/error: 2.531 28.76
New best model saved
Average loss over 21404535 tokens: 2.489, valid loss/error: 2.531 28.75
Average loss over 21389212 tokens: 2.485, valid loss/error: 2.532 28.80
Average loss over 21375042 tokens: 2.482, valid loss/error: 2.530 28.76
New best model saved
Average loss over 21403713 tokens: 2.487, valid loss/error: 2.530 28.75
Average loss over 21395714 tokens: 2.482, valid loss/error: 2.531 28.79
Average loss over 21436529 tokens: 2.482, valid loss/error: 2.530 28.75
Average loss over 21343959 tokens: 2.490, valid loss/error: 2.532 28.77
Average loss over 18523299 tokens: 2.489
Epoch: 9, train loss: 2.486, valid loss/error: 2.530 28.76
Average loss over 21387689 tokens: 2.482, valid loss/error: 2.530 28.69
New best model saved
Average loss over 21371068 tokens: 2.490, valid loss/error: 2.530 28.73
Average loss over 21389403 tokens: 2.491, valid loss/error: 2.530 28.75
New best model saved
Average loss over 21335322 tokens: 2.482, valid loss/error: 2.531 28.79
Average loss over 21424581 tokens: 2.484, valid loss/error: 2.529 28.77
New best model saved
Average loss over 21373433 tokens: 2.486, valid loss/error: 2.529 28.71
New best model saved
Average loss over 21425041 tokens: 2.484, valid loss/error: 2.531 28.82
Average loss over 21418066 tokens: 2.482, valid loss/error: 2.530 28.71
Average loss over 21391345 tokens: 2.483, valid loss/error: 2.529 28.71
Average loss over 18553504 tokens: 2.486
Epoch: 10, train loss: 2.485, valid loss/error: 2.530 28.76
Average loss over 21366182 tokens: 2.485, valid loss/error: 2.529 28.75
Average loss over 21417257 tokens: 2.485, valid loss/error: 2.529 28.69
New best model saved
Average loss over 21404330 tokens: 2.485, valid loss/error: 2.530 28.73
Average loss over 21371675 tokens: 2.480, valid loss/error: 2.530 28.73
Average loss over 21364545 tokens: 2.481, valid loss/error: 2.529 28.73
Average loss over 21379506 tokens: 2.481, valid loss/error: 2.529 28.74
New best model saved
Average loss over 21413732 tokens: 2.486, valid loss/error: 2.528 28.75
New best model saved
Average loss over 21389639 tokens: 2.483, valid loss/error: 2.529 28.70
Average loss over 21410551 tokens: 2.482, valid loss/error: 2.528 28.75
New best model saved
Average loss over 18552035 tokens: 2.490
Epoch: 11, train loss: 2.484, valid loss/error: 2.529 28.72
Average loss over 21360838 tokens: 2.481, valid loss/error: 2.529 28.73
Average loss over 21377779 tokens: 2.481, valid loss/error: 2.528 28.71
New best model saved
Average loss over 21391920 tokens: 2.482, valid loss/error: 2.528 28.68
New best model saved
Average loss over 21443325 tokens: 2.479, valid loss/error: 2.528 28.71
Average loss over 21409037 tokens: 2.483, valid loss/error: 2.527 28.68
New best model saved
Average loss over 21401926 tokens: 2.483, valid loss/error: 2.528 28.69
Average loss over 21387050 tokens: 2.482, valid loss/error: 2.527 28.71
New best model saved
Average loss over 21359857 tokens: 2.486, valid loss/error: 2.528 28.72
Average loss over 21409483 tokens: 2.481, valid loss/error: 2.526 28.69
New best model saved
Average loss over 18528237 tokens: 2.486
Epoch: 12, train loss: 2.482, valid loss/error: 2.527 28.71
Average loss over 21388195 tokens: 2.483, valid loss/error: 2.527 28.74
Average loss over 21344515 tokens: 2.481, valid loss/error: 2.526 28.69
New best model saved
Average loss over 21464460 tokens: 2.477, valid loss/error: 2.527 28.65
New best model saved
Average loss over 21380154 tokens: 2.477, valid loss/error: 2.528 28.70
Average loss over 21409030 tokens: 2.481, valid loss/error: 2.528 28.74
Average loss over 21411197 tokens: 2.486, valid loss/error: 2.527 28.70
Average loss over 17321276 tokens: 2.482
Epoch: 13, train loss: 2.481, valid loss/error: 2.527 28.70
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/encs_1div3_cache/baseFT300k_1div3finetune/std/checkpoint_0.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_3.h5
load student model from: /home/yfguo/transformer_924/expm/encs_temp/rs/baseFT300k/std/avg.h5
Init lr: 1e-05, Dev Loss/Error: 4.031 28.98
Average loss over 10538156 tokens: 2.008, valid loss/error: 3.608 28.73
New best model saved
Average loss over 10524001 tokens: 1.988, valid loss/error: 3.414 28.78
New best model saved
Average loss over 10505570 tokens: 1.998, valid loss/error: 3.174 28.70
New best model saved
Average loss over 10530959 tokens: 1.978, valid loss/error: 2.891 28.70
New best model saved
Average loss over 10502971 tokens: 1.979, valid loss/error: 2.634 28.69
New best model saved
Average loss over 10510385 tokens: 1.969, valid loss/error: 2.442 28.69
New best model saved
Average loss over 10533490 tokens: 1.977, valid loss/error: 2.278 28.71
New best model saved
Average loss over 10533936 tokens: 1.964, valid loss/error: 2.168 28.74
New best model saved
Average loss over 1064454 tokens: 1.954
Epoch: 1, train loss: 1.982, valid loss/error: 2.179 28.71
Average loss over 10540560 tokens: 1.961, valid loss/error: 2.106 28.69
New best model saved
Average loss over 10512141 tokens: 1.960, valid loss/error: 2.113 28.73
Average loss over 10523363 tokens: 1.960, valid loss/error: 2.118 28.71
Average loss over 10518408 tokens: 1.959, valid loss/error: 2.120 28.70
Average loss over 10522767 tokens: 1.955, valid loss/error: 2.085 28.67
New best model saved
Average loss over 10523617 tokens: 1.959, valid loss/error: 2.139 28.67
Average loss over 10505037 tokens: 1.959, valid loss/error: 2.111 28.62
New best model saved
Average loss over 10525442 tokens: 1.954, valid loss/error: 2.122 28.66
Average loss over 1063829 tokens: 1.961
Epoch: 2, train loss: 1.958, valid loss/error: 2.113 28.67
Average loss over 10512289 tokens: 1.952, valid loss/error: 2.104 28.66
Average loss over 10523955 tokens: 1.953, valid loss/error: 2.106 28.66
Average loss over 10508426 tokens: 1.954, valid loss/error: 2.111 28.69
Average loss over 10531403 tokens: 1.953, valid loss/error: 2.102 28.65
Average loss over 10512976 tokens: 1.955, valid loss/error: 2.101 28.63
Average loss over 10537753 tokens: 1.956, valid loss/error: 2.118 28.62
Average loss over 10519483 tokens: 1.964, valid loss/error: 2.115 28.66
Average loss over 10516696 tokens: 1.960, valid loss/error: 2.124 28.62
Average loss over 1066241 tokens: 1.958
Epoch: 3, train loss: 1.956, valid loss/error: 2.112 28.60
New best model saved
Average loss over 10527379 tokens: 1.954, valid loss/error: 2.095 28.58
New best model saved
Average loss over 10514555 tokens: 1.949, valid loss/error: 2.068 28.60
New best model saved
Average loss over 10529347 tokens: 1.958, valid loss/error: 2.116 28.64
Average loss over 10530686 tokens: 1.952, valid loss/error: 2.102 28.60
Average loss over 10507555 tokens: 1.951, valid loss/error: 2.108 28.57
New best model saved
Average loss over 10521464 tokens: 1.954, valid loss/error: 2.102 28.54
New best model saved
Average loss over 10533581 tokens: 1.960, valid loss/error: 2.106 28.60
Average loss over 10512175 tokens: 1.957, valid loss/error: 2.100 28.59
Average loss over 1063861 tokens: 1.944
Epoch: 4, train loss: 1.954, valid loss/error: 2.108 28.61
Average loss over 10503740 tokens: 1.949, valid loss/error: 2.110 28.61
Average loss over 10537005 tokens: 1.953, valid loss/error: 2.094 28.57
Average loss over 10512804 tokens: 1.948, valid loss/error: 2.094 28.61
Average loss over 10543386 tokens: 1.949, valid loss/error: 2.103 28.60
Average loss over 10523172 tokens: 1.952, valid loss/error: 2.122 28.57
Average loss over 10530312 tokens: 1.945, valid loss/error: 2.093 28.56
Average loss over 10516072 tokens: 1.944, valid loss/error: 2.103 28.59
Average loss over 10501677 tokens: 1.946, valid loss/error: 2.090 28.55
Average loss over 1065784 tokens: 1.934
Epoch: 5, train loss: 1.948, valid loss/error: 2.096 28.58
Average loss over 10501506 tokens: 1.949, valid loss/error: 2.101 28.57
Average loss over 10507924 tokens: 1.944, valid loss/error: 2.114 28.56
Average loss over 10505772 tokens: 1.953, valid loss/error: 2.094 28.56
Average loss over 10536301 tokens: 1.949, valid loss/error: 2.110 28.54
New best model saved
Average loss over 10526290 tokens: 1.946, valid loss/error: 2.109 28.56
Average loss over 10523110 tokens: 1.948, valid loss/error: 2.109 28.55
Average loss over 10524790 tokens: 1.946, valid loss/error: 2.118 28.57
Average loss over 10529143 tokens: 1.949, valid loss/error: 2.096 28.51
New best model saved
Average loss over 1073510 tokens: 1.953
Epoch: 6, train loss: 1.948, valid loss/error: 2.124 28.53
Average loss over 10535233 tokens: 1.948, valid loss/error: 2.096 28.55
Average loss over 10533520 tokens: 1.949, valid loss/error: 2.070 28.59
Average loss over 10554844 tokens: 1.941, valid loss/error: 2.086 28.57
Average loss over 10508832 tokens: 1.956, valid loss/error: 2.076 28.59
Average loss over 10506307 tokens: 1.945, valid loss/error: 2.105 28.58
Average loss over 10522442 tokens: 1.943, valid loss/error: 2.092 28.60
Average loss over 10520656 tokens: 1.945, valid loss/error: 2.106 28.54
Average loss over 10546182 tokens: 1.949, valid loss/error: 2.095 28.49
New best model saved
Average loss over 1069968 tokens: 1.943
Epoch: 7, train loss: 1.947, valid loss/error: 2.097 28.50
Average loss over 10528081 tokens: 1.954, valid loss/error: 2.107 28.49
Average loss over 10516544 tokens: 1.948, valid loss/error: 2.104 28.53
Average loss over 10516648 tokens: 1.945, valid loss/error: 2.095 28.56
Average loss over 10530750 tokens: 1.944, valid loss/error: 2.085 28.49
Average loss over 10549276 tokens: 1.951, valid loss/error: 2.083 28.56
Average loss over 10535898 tokens: 1.941, valid loss/error: 2.088 28.50
Average loss over 10530299 tokens: 1.945, valid loss/error: 2.082 28.51
Average loss over 10495787 tokens: 1.939, valid loss/error: 2.093 28.52
Average loss over 1067402 tokens: 1.957
Epoch: 8, train loss: 1.946, valid loss/error: 2.103 28.53
Average loss over 10525518 tokens: 1.946, valid loss/error: 2.086 28.53
Average loss over 10538045 tokens: 1.946, valid loss/error: 2.078 28.56
Average loss over 10523698 tokens: 1.939, valid loss/error: 2.092 28.51
Average loss over 10539956 tokens: 1.951, valid loss/error: 2.080 28.53
Average loss over 10526710 tokens: 1.949, valid loss/error: 2.084 28.49
New best model saved
Average loss over 10510225 tokens: 1.945, valid loss/error: 2.087 28.52
Average loss over 10540322 tokens: 1.946, valid loss/error: 2.107 28.49
Average loss over 10522983 tokens: 1.948, valid loss/error: 2.110 28.49
Average loss over 1065573 tokens: 1.948
Epoch: 9, train loss: 1.946, valid loss/error: 2.087 28.52
Average loss over 10539875 tokens: 1.941, valid loss/error: 2.091 28.53
Average loss over 10521008 tokens: 1.942, valid loss/error: 2.069 28.52
Average loss over 10537329 tokens: 1.945, valid loss/error: 2.104 28.49
Average loss over 10544861 tokens: 1.946, valid loss/error: 2.110 28.51
Average loss over 10541207 tokens: 1.944, valid loss/error: 2.103 28.51
Average loss over 10523559 tokens: 1.945, valid loss/error: 2.099 28.49
Average loss over 10527871 tokens: 1.944, valid loss/error: 2.102 28.47
New best model saved
Average loss over 10510261 tokens: 1.944, valid loss/error: 2.103 28.48
Average loss over 1060393 tokens: 1.964
Epoch: 10, train loss: 1.944, valid loss/error: 2.112 28.47
Average loss over 10528526 tokens: 1.943, valid loss/error: 2.101 28.47
Average loss over 10519292 tokens: 1.944, valid loss/error: 2.088 28.52
Average loss over 10508326 tokens: 1.948, valid loss/error: 2.071 28.56
Average loss over 10544306 tokens: 1.946, valid loss/error: 2.103 28.46
New best model saved
Average loss over 10515491 tokens: 1.943, valid loss/error: 2.098 28.53
Average loss over 10502001 tokens: 1.942, valid loss/error: 2.108 28.50
Average loss over 10519382 tokens: 1.940, valid loss/error: 2.101 28.50
Average loss over 10508761 tokens: 1.941, valid loss/error: 2.093 28.52
Average loss over 1064944 tokens: 1.945
Epoch: 11, train loss: 1.943, valid loss/error: 2.112 28.49
Average loss over 10520205 tokens: 1.945, valid loss/error: 2.082 28.47
Average loss over 10534528 tokens: 1.942, valid loss/error: 2.106 28.43
New best model saved
Average loss over 10513499 tokens: 1.940, valid loss/error: 2.119 28.51
Average loss over 10531192 tokens: 1.945, valid loss/error: 2.096 28.48
Average loss over 10514822 tokens: 1.937, valid loss/error: 2.066 28.48
New best model saved
Average loss over 10534368 tokens: 1.942, valid loss/error: 2.108 28.49
Average loss over 10530267 tokens: 1.944, valid loss/error: 2.094 28.47
Average loss over 10529646 tokens: 1.939, valid loss/error: 2.097 28.48
Average loss over 1059057 tokens: 1.945
Epoch: 12, train loss: 1.942, valid loss/error: 2.098 28.54
Average loss over 10531305 tokens: 1.942, valid loss/error: 2.086 28.52
Average loss over 10527950 tokens: 1.942, valid loss/error: 2.098 28.54
Average loss over 10513589 tokens: 1.940, valid loss/error: 2.074 28.50
Average loss over 10527189 tokens: 1.944, valid loss/error: 2.074 28.44
Average loss over 10540910 tokens: 1.934, valid loss/error: 2.107 28.51
Average loss over 10519098 tokens: 1.941, valid loss/error: 2.102 28.49
Average loss over 10495267 tokens: 1.937, valid loss/error: 2.080 28.49
Average loss over 10510988 tokens: 1.940, valid loss/error: 2.084 28.49
Average loss over 1077946 tokens: 1.949
Epoch: 13, train loss: 1.940, valid loss/error: 2.099 28.49
Average loss over 10536249 tokens: 1.937, valid loss/error: 2.094 28.49
Average loss over 10512873 tokens: 1.939, valid loss/error: 2.090 28.52
Average loss over 10519951 tokens: 1.942, valid loss/error: 2.086 28.49
Average loss over 10527907 tokens: 1.940, valid loss/error: 2.079 28.46
Average loss over 10544620 tokens: 1.942, valid loss/error: 2.083 28.49
Average loss over 10526825 tokens: 1.935, valid loss/error: 2.106 28.50
Average loss over 10523885 tokens: 1.950, valid loss/error: 2.069 28.48
Average loss over 10518595 tokens: 1.935, valid loss/error: 2.083 28.48
Average loss over 1068041 tokens: 1.945
Epoch: 14, train loss: 1.940, valid loss/error: 2.082 28.50
Average loss over 10524009 tokens: 1.943, valid loss/error: 2.065 28.48
New best model saved
Average loss over 10527670 tokens: 1.937, valid loss/error: 2.060 28.49
New best model saved
Average loss over 10510811 tokens: 1.940, valid loss/error: 2.067 28.53
Average loss over 10519027 tokens: 1.941, valid loss/error: 2.063 28.54
Average loss over 10540887 tokens: 1.942, valid loss/error: 2.048 28.46
New best model saved
Average loss over 10532825 tokens: 1.939, valid loss/error: 2.068 28.43
Average loss over 10540488 tokens: 1.937, valid loss/error: 2.091 28.51
Average loss over 10536275 tokens: 1.939, valid loss/error: 2.088 28.47
Average loss over 1068372 tokens: 1.927
Epoch: 15, train loss: 1.940, valid loss/error: 2.075 28.48
Average loss over 10529215 tokens: 1.937, valid loss/error: 2.083 28.49
Average loss over 10523831 tokens: 1.937, valid loss/error: 2.093 28.53
Average loss over 10524131 tokens: 1.943, valid loss/error: 2.077 28.45
Average loss over 10505184 tokens: 1.941, valid loss/error: 2.085 28.44
Average loss over 10513363 tokens: 1.937, valid loss/error: 2.084 28.51
Average loss over 10532508 tokens: 1.938, valid loss/error: 2.078 28.52
Average loss over 10514255 tokens: 1.935, valid loss/error: 2.099 28.53
Average loss over 10544194 tokens: 1.935, valid loss/error: 2.087 28.45
Average loss over 1065600 tokens: 1.945
Epoch: 16, train loss: 1.938, valid loss/error: 2.101 28.46
Average loss over 10534578 tokens: 1.937, valid loss/error: 2.071 28.49
Average loss over 10505142 tokens: 1.933, valid loss/error: 2.096 28.46
Average loss over 10527972 tokens: 1.937, valid loss/error: 2.091 28.44
Average loss over 10536185 tokens: 1.933, valid loss/error: 2.084 28.48
Average loss over 10513315 tokens: 1.936, valid loss/error: 2.042 28.49
New best model saved
Average loss over 10505166 tokens: 1.940, valid loss/error: 2.087 28.46
Average loss over 10517914 tokens: 1.938, valid loss/error: 2.085 28.47
Average loss over 10517037 tokens: 1.939, valid loss/error: 2.091 28.49
Average loss over 1066885 tokens: 1.941
Epoch: 17, train loss: 1.937, valid loss/error: 2.088 28.48
Average loss over 10531489 tokens: 1.937, valid loss/error: 2.068 28.49
Average loss over 10522226 tokens: 1.932, valid loss/error: 2.089 28.40
New best model saved
Average loss over 10521126 tokens: 1.934, valid loss/error: 2.071 28.48
Average loss over 10540862 tokens: 1.936, valid loss/error: 2.092 28.47
Average loss over 10524955 tokens: 1.935, valid loss/error: 2.062 28.49
Average loss over 10505640 tokens: 1.936, valid loss/error: 2.072 28.50
Average loss over 10552900 tokens: 1.938, valid loss/error: 2.064 28.44
Average loss over 10530572 tokens: 1.939, valid loss/error: 2.078 28.45
Average loss over 1070907 tokens: 1.945
Epoch: 18, train loss: 1.936, valid loss/error: 2.072 28.49
Average loss over 10547103 tokens: 1.936, valid loss/error: 2.071 28.48
Average loss over 10524292 tokens: 1.930, valid loss/error: 2.086 28.47
Average loss over 10548496 tokens: 1.939, valid loss/error: 2.096 28.46
Average loss over 10521030 tokens: 1.936, valid loss/error: 2.100 28.48
Average loss over 10538731 tokens: 1.936, valid loss/error: 2.090 28.47
Average loss over 10513466 tokens: 1.938, valid loss/error: 2.064 28.45
Average loss over 10520536 tokens: 1.937, valid loss/error: 2.099 28.49
Average loss over 10513911 tokens: 1.935, valid loss/error: 2.099 28.42
Average loss over 1072737 tokens: 1.934
Epoch: 19, train loss: 1.936, valid loss/error: 2.053 28.40
Average loss over 10516377 tokens: 1.932, valid loss/error: 2.091 28.45
Average loss over 10504347 tokens: 1.933, valid loss/error: 2.090 28.42
Average loss over 10511439 tokens: 1.939, valid loss/error: 2.091 28.43
Average loss over 10531314 tokens: 1.934, valid loss/error: 2.102 28.43
Average loss over 10529685 tokens: 1.933, valid loss/error: 2.063 28.42
Average loss over 10534612 tokens: 1.935, valid loss/error: 2.040 28.43
New best model saved
Average loss over 10520708 tokens: 1.939, valid loss/error: 2.054 28.47
Average loss over 10538421 tokens: 1.934, valid loss/error: 2.078 28.44
Average loss over 1064788 tokens: 1.936
Epoch: 20, train loss: 1.935, valid loss/error: 2.102 28.38
New best model saved
Average loss over 10526497 tokens: 1.927, valid loss/error: 2.091 28.41
Average loss over 10529307 tokens: 1.932, valid loss/error: 2.065 28.42
Average loss over 10521813 tokens: 1.937, valid loss/error: 2.053 28.42
Average loss over 10489425 tokens: 1.934, valid loss/error: 2.094 28.40
Average loss over 10529890 tokens: 1.940, valid loss/error: 2.102 28.36
New best model saved
Average loss over 10515984 tokens: 1.936, valid loss/error: 2.089 28.44
Average loss over 10520967 tokens: 1.937, valid loss/error: 2.090 28.39
Average loss over 10515212 tokens: 1.934, valid loss/error: 2.091 28.40
Average loss over 1073766 tokens: 1.912
Epoch: 21, train loss: 1.934, valid loss/error: 2.057 28.43
Average loss over 10544108 tokens: 1.929, valid loss/error: 2.101 28.41
Average loss over 10528563 tokens: 1.935, valid loss/error: 2.075 28.40
Average loss over 10538677 tokens: 1.935, valid loss/error: 2.076 28.44
Average loss over 10537877 tokens: 1.940, valid loss/error: 2.090 28.48
Average loss over 10512348 tokens: 1.936, valid loss/error: 2.096 28.45
Average loss over 10504832 tokens: 1.928, valid loss/error: 2.075 28.40
Average loss over 10504788 tokens: 1.936, valid loss/error: 2.084 28.37
Average loss over 10539876 tokens: 1.936, valid loss/error: 2.083 28.41
Average loss over 1070151 tokens: 1.931
Epoch: 22, train loss: 1.934, valid loss/error: 2.060 28.39
Average loss over 10515797 tokens: 1.933, valid loss/error: 2.080 28.41
Average loss over 10514135 tokens: 1.927, valid loss/error: 2.041 28.41
Average loss over 10521991 tokens: 1.938, valid loss/error: 2.055 28.42
Average loss over 10534563 tokens: 1.937, valid loss/error: 2.066 28.39
Average loss over 10526618 tokens: 1.930, valid loss/error: 2.088 28.43
Average loss over 10532323 tokens: 1.933, valid loss/error: 2.069 28.41
Average loss over 10513989 tokens: 1.932, valid loss/error: 2.092 28.44
Average loss over 10520479 tokens: 1.934, valid loss/error: 2.091 28.38
Average loss over 1073599 tokens: 1.946
Epoch: 23, train loss: 1.933, valid loss/error: 2.082 28.41
Average loss over 10528439 tokens: 1.934, valid loss/error: 2.085 28.44
Average loss over 10500767 tokens: 1.928, valid loss/error: 2.059 28.50
Average loss over 10524985 tokens: 1.934, valid loss/error: 2.078 28.43
Average loss over 10517335 tokens: 1.931, valid loss/error: 2.086 28.49
Average loss over 10537160 tokens: 1.936, valid loss/error: 2.063 28.41
Average loss over 10539724 tokens: 1.935, valid loss/error: 2.049 28.43
Average loss over 10547105 tokens: 1.938, valid loss/error: 2.085 28.44
Average loss over 10507560 tokens: 1.937, valid loss/error: 2.088 28.44
Average loss over 1066876 tokens: 1.940
Epoch: 24, train loss: 1.934, valid loss/error: 2.078 28.44
Average loss over 10539105 tokens: 1.932, valid loss/error: 2.083 28.42
Average loss over 10510663 tokens: 1.934, valid loss/error: 2.079 28.43
Average loss over 10500072 tokens: 1.930, valid loss/error: 2.094 28.41
Average loss over 10534493 tokens: 1.929, valid loss/error: 2.075 28.41
Average loss over 10530715 tokens: 1.934, valid loss/error: 2.069 28.44
Average loss over 10538412 tokens: 1.934, valid loss/error: 2.059 28.44
Average loss over 10531059 tokens: 1.935, valid loss/error: 2.034 28.43
New best model saved
Average loss over 10518920 tokens: 1.926, valid loss/error: 2.080 28.46
Average loss over 1072620 tokens: 1.930
Epoch: 25, train loss: 1.932, valid loss/error: 2.084 28.42
Average loss over 10538505 tokens: 1.933, valid loss/error: 2.051 28.40
Average loss over 10537060 tokens: 1.928, valid loss/error: 2.091 28.43
Average loss over 10500929 tokens: 1.928, valid loss/error: 2.050 28.42
Average loss over 10522870 tokens: 1.936, valid loss/error: 2.094 28.42
Average loss over 10526401 tokens: 1.930, valid loss/error: 2.080 28.42
Average loss over 10521150 tokens: 1.931, valid loss/error: 2.056 28.42
Average loss over 10518969 tokens: 1.935, valid loss/error: 2.087 28.38
Average loss over 10522793 tokens: 1.932, valid loss/error: 2.076 28.42
Average loss over 1071560 tokens: 1.928
Epoch: 26, train loss: 1.932, valid loss/error: 2.063 28.41
Average loss over 10532330 tokens: 1.930, valid loss/error: 2.045 28.37
Average loss over 10525582 tokens: 1.928, valid loss/error: 2.063 28.43
Average loss over 10526089 tokens: 1.930, valid loss/error: 2.090 28.38
Average loss over 10519958 tokens: 1.932, valid loss/error: 2.054 28.45
Average loss over 10511922 tokens: 1.933, valid loss/error: 2.093 28.38
Average loss over 10535073 tokens: 1.928, valid loss/error: 2.080 28.36
Average loss over 10530047 tokens: 1.932, valid loss/error: 2.064 28.39
Average loss over 10545764 tokens: 1.930, valid loss/error: 2.086 28.35
New best model saved
Average loss over 1068238 tokens: 1.943
Epoch: 27, train loss: 1.931, valid loss/error: 2.037 28.36
Average loss over 10536466 tokens: 1.934, valid loss/error: 2.095 28.42
Average loss over 10515305 tokens: 1.929, valid loss/error: 2.059 28.43
Average loss over 10511198 tokens: 1.931, valid loss/error: 2.084 28.44
Average loss over 10521668 tokens: 1.934, valid loss/error: 2.074 28.43
Average loss over 10543609 tokens: 1.929, valid loss/error: 2.094 28.41
Average loss over 10518927 tokens: 1.928, valid loss/error: 2.087 28.42
Average loss over 10500454 tokens: 1.929, valid loss/error: 2.068 28.42
Average loss over 10533592 tokens: 1.932, valid loss/error: 2.092 28.38
Average loss over 1075955 tokens: 1.919
Epoch: 28, train loss: 1.931, valid loss/error: 2.047 28.39
Average loss over 10510128 tokens: 1.929, valid loss/error: 2.065 28.42
Average loss over 10533127 tokens: 1.933, valid loss/error: 2.059 28.43
Average loss over 10534362 tokens: 1.935, valid loss/error: 2.081 28.42
Average loss over 10513060 tokens: 1.930, valid loss/error: 2.055 28.38
Average loss over 10537351 tokens: 1.933, valid loss/error: 2.094 28.40
Average loss over 10523938 tokens: 1.929, valid loss/error: 2.079 28.41
Average loss over 10544748 tokens: 1.928, valid loss/error: 2.072 28.41
Average loss over 10518873 tokens: 1.930, valid loss/error: 2.082 28.41
Average loss over 1063548 tokens: 1.925
Epoch: 29, train loss: 1.931, valid loss/error: 2.087 28.40
Average loss over 10526050 tokens: 1.929, valid loss/error: 2.087 28.36
Average loss over 10544711 tokens: 1.932, valid loss/error: 2.070 28.43
Average loss over 10518512 tokens: 1.928, valid loss/error: 2.068 28.37
Average loss over 10543284 tokens: 1.933, valid loss/error: 2.087 28.40
Average loss over 10499186 tokens: 1.926, valid loss/error: 2.056 28.40
Average loss over 10534886 tokens: 1.936, valid loss/error: 2.077 28.45
Average loss over 10510221 tokens: 1.926, valid loss/error: 2.094 28.45
Average loss over 10519975 tokens: 1.935, valid loss/error: 2.092 28.40
Average loss over 1072709 tokens: 1.922
Epoch: 30, train loss: 1.931, valid loss/error: 2.072 28.37
Average loss over 10545394 tokens: 1.927, valid loss/error: 2.086 28.38
Average loss over 10504561 tokens: 1.928, valid loss/error: 2.059 28.40
Average loss over 10533403 tokens: 1.931, valid loss/error: 2.079 28.37
Average loss over 10530742 tokens: 1.924, valid loss/error: 2.081 28.38
Average loss over 10533419 tokens: 1.929, valid loss/error: 2.096 28.34
New best model saved
Average loss over 10528052 tokens: 1.932, valid loss/error: 2.089 28.36
Average loss over 10531721 tokens: 1.928, valid loss/error: 2.082 28.33
New best model saved
Average loss over 10513226 tokens: 1.926, valid loss/error: 2.083 28.36
Average loss over 1077927 tokens: 1.940
Epoch: 31, train loss: 1.928, valid loss/error: 2.097 28.35
Average loss over 10539375 tokens: 1.925, valid loss/error: 2.059 28.30
New best model saved
Average loss over 10537346 tokens: 1.925, valid loss/error: 2.087 28.35
Average loss over 10518614 tokens: 1.927, valid loss/error: 2.081 28.37
Average loss over 10509019 tokens: 1.929, valid loss/error: 2.085 28.37
Average loss over 10536932 tokens: 1.927, valid loss/error: 2.069 28.39
Average loss over 10542288 tokens: 1.929, valid loss/error: 2.080 28.35
Average loss over 10524451 tokens: 1.928, valid loss/error: 2.090 28.37
Average loss over 10517770 tokens: 1.925, valid loss/error: 2.072 28.32
Average loss over 1072499 tokens: 1.932
Epoch: 32, train loss: 1.927, valid loss/error: 2.077 28.37
Average loss over 10519004 tokens: 1.927, valid loss/error: 2.091 28.41
Average loss over 10554482 tokens: 1.929, valid loss/error: 2.064 28.41
Average loss over 10510797 tokens: 1.933, valid loss/error: 2.085 28.37
Average loss over 10533146 tokens: 1.928, valid loss/error: 2.082 28.36
Average loss over 10526370 tokens: 1.927, valid loss/error: 2.096 28.33
Average loss over 10512393 tokens: 1.927, valid loss/error: 2.072 28.40
Average loss over 10524134 tokens: 1.922, valid loss/error: 2.073 28.36
Average loss over 10514685 tokens: 1.930, valid loss/error: 2.074 28.43
Average loss over 1066459 tokens: 1.935
Epoch: 33, train loss: 1.928, valid loss/error: 2.092 28.39
Average loss over 10510392 tokens: 1.923, valid loss/error: 2.087 28.35
Average loss over 10509061 tokens: 1.923, valid loss/error: 2.037 28.33
Average loss over 10523837 tokens: 1.929, valid loss/error: 2.064 28.39
Average loss over 10519355 tokens: 1.925, valid loss/error: 2.034 28.36
New best model saved
Average loss over 10525489 tokens: 1.935, valid loss/error: 2.083 28.36
Average loss over 10548146 tokens: 1.930, valid loss/error: 2.033 28.33
New best model saved
Average loss over 10525385 tokens: 1.929, valid loss/error: 2.088 28.36
Average loss over 10504408 tokens: 1.932, valid loss/error: 2.046 28.37
Average loss over 1068197 tokens: 1.930
Epoch: 34, train loss: 1.928, valid loss/error: 2.077 28.40
Average loss over 10536969 tokens: 1.929, valid loss/error: 2.082 28.36
Average loss over 10526919 tokens: 1.932, valid loss/error: 2.080 28.38
Average loss over 10501264 tokens: 1.924, valid loss/error: 2.077 28.37
Average loss over 10515049 tokens: 1.931, valid loss/error: 2.051 28.39
Average loss over 10513817 tokens: 1.928, valid loss/error: 2.081 28.39
Average loss over 10531000 tokens: 1.927, valid loss/error: 2.065 28.36
Average loss over 10519750 tokens: 1.919, valid loss/error: 2.071 28.33
Average loss over 10526999 tokens: 1.927, valid loss/error: 2.062 28.31
Average loss over 1063453 tokens: 1.926
Epoch: 35, train loss: 1.927, valid loss/error: 2.081 28.32
Average loss over 10530646 tokens: 1.929, valid loss/error: 2.078 28.31
Average loss over 10526427 tokens: 1.926, valid loss/error: 2.078 28.31
Average loss over 10535176 tokens: 1.931, valid loss/error: 2.087 28.33
Average loss over 10509986 tokens: 1.934, valid loss/error: 2.083 28.33
Average loss over 10529906 tokens: 1.925, valid loss/error: 2.039 28.37
Average loss over 10525120 tokens: 1.926, valid loss/error: 2.074 28.33
Average loss over 10517684 tokens: 1.925, valid loss/error: 2.046 28.35
Average loss over 10526303 tokens: 1.927, valid loss/error: 2.086 28.40
Average loss over 1071518 tokens: 1.924
Epoch: 36, train loss: 1.928, valid loss/error: 2.079 28.39
Average loss over 10520902 tokens: 1.924, valid loss/error: 2.070 28.36
Average loss over 10511333 tokens: 1.929, valid loss/error: 2.068 28.40
Average loss over 10527319 tokens: 1.928, valid loss/error: 2.069 28.40
Average loss over 10529479 tokens: 1.927, valid loss/error: 2.076 28.40
Average loss over 10524697 tokens: 1.926, valid loss/error: 2.064 28.35
Average loss over 10511936 tokens: 1.928, valid loss/error: 2.064 28.39
Average loss over 10536076 tokens: 1.926, valid loss/error: 2.086 28.34
Average loss over 10530736 tokens: 1.926, valid loss/error: 2.083 28.41
Average loss over 1068702 tokens: 1.953
Epoch: 37, train loss: 1.927, valid loss/error: 2.089 28.40
Average loss over 10524194 tokens: 1.922, valid loss/error: 2.070 28.37
Average loss over 10531867 tokens: 1.926, valid loss/error: 2.058 28.39
Average loss over 10551798 tokens: 1.928, valid loss/error: 2.077 28.43
Average loss over 10531125 tokens: 1.925, valid loss/error: 2.064 28.39
Average loss over 10532519 tokens: 1.920, valid loss/error: 2.034 28.39
Average loss over 10508917 tokens: 1.930, valid loss/error: 2.080 28.39
Average loss over 10533070 tokens: 1.929, valid loss/error: 2.056 28.38
Average loss over 10499915 tokens: 1.928, valid loss/error: 2.077 28.36
Average loss over 1061676 tokens: 1.929
Epoch: 38, train loss: 1.926, valid loss/error: 2.063 28.35
Average loss over 10524155 tokens: 1.924, valid loss/error: 2.065 28.38
Average loss over 10522704 tokens: 1.924, valid loss/error: 2.088 28.35
Average loss over 10537658 tokens: 1.931, valid loss/error: 2.092 28.36
Average loss over 10547659 tokens: 1.923, valid loss/error: 2.060 28.33
Average loss over 10533958 tokens: 1.926, valid loss/error: 2.084 28.35
Average loss over 10521473 tokens: 1.930, valid loss/error: 2.041 28.36
Average loss over 10530049 tokens: 1.923, valid loss/error: 2.065 28.34
Average loss over 10526640 tokens: 1.932, valid loss/error: 2.038 28.37
Average loss over 1065849 tokens: 1.923
Epoch: 39, train loss: 1.926, valid loss/error: 2.084 28.38
Average loss over 10509983 tokens: 1.927, valid loss/error: 2.090 28.37
Average loss over 10535476 tokens: 1.926, valid loss/error: 2.071 28.39
Average loss over 10517778 tokens: 1.930, valid loss/error: 2.028 28.31
New best model saved
Average loss over 10536552 tokens: 1.927, valid loss/error: 2.067 28.35
Average loss over 10537394 tokens: 1.928, valid loss/error: 2.071 28.39
Average loss over 10517676 tokens: 1.923, valid loss/error: 2.075 28.35
Average loss over 10511213 tokens: 1.926, valid loss/error: 2.077 28.41
Average loss over 10528009 tokens: 1.927, valid loss/error: 2.089 28.39
Average loss over 1073476 tokens: 1.931
Epoch: 40, train loss: 1.927, valid loss/error: 2.075 28.37
Average loss over 10524622 tokens: 1.925, valid loss/error: 2.083 28.40
Average loss over 10527254 tokens: 1.927, valid loss/error: 2.071 28.41
Average loss over 10510848 tokens: 1.923, valid loss/error: 2.059 28.39
Average loss over 10514827 tokens: 1.932, valid loss/error: 2.066 28.38
Average loss over 10517672 tokens: 1.927, valid loss/error: 2.083 28.35
Average loss over 10537248 tokens: 1.923, valid loss/error: 2.055 28.38
Average loss over 10531306 tokens: 1.920, valid loss/error: 2.074 28.35
Average loss over 10530900 tokens: 1.928, valid loss/error: 2.070 28.35
Average loss over 1071347 tokens: 1.926
Epoch: 41, train loss: 1.926, valid loss/error: 2.080 28.32
Average loss over 10543059 tokens: 1.925, valid loss/error: 2.083 28.33
Average loss over 10528271 tokens: 1.919, valid loss/error: 2.068 28.31
Average loss over 10514011 tokens: 1.922, valid loss/error: 2.084 28.37
Average loss over 10490146 tokens: 1.926, valid loss/error: 2.084 28.38
Average loss over 10550256 tokens: 1.923, valid loss/error: 2.076 28.37
Average loss over 10526174 tokens: 1.922, valid loss/error: 2.080 28.34
Average loss over 10512224 tokens: 1.925, valid loss/error: 2.064 28.34
Average loss over 10516166 tokens: 1.921, valid loss/error: 2.069 28.32
Average loss over 1062604 tokens: 1.933
Epoch: 42, train loss: 1.923, valid loss/error: 2.051 28.33
Average loss over 10529862 tokens: 1.924, valid loss/error: 2.037 28.31
Average loss over 10537977 tokens: 1.918, valid loss/error: 2.085 28.37
Average loss over 10525197 tokens: 1.924, valid loss/error: 2.085 28.36
Average loss over 10514720 tokens: 1.923, valid loss/error: 2.065 28.32
Average loss over 10519322 tokens: 1.924, valid loss/error: 2.078 28.37
Average loss over 10533703 tokens: 1.929, valid loss/error: 2.069 28.33
Average loss over 10516279 tokens: 1.919, valid loss/error: 2.066 28.41
Average loss over 10537103 tokens: 1.928, valid loss/error: 2.093 28.38
Average loss over 1068373 tokens: 1.932
Epoch: 43, train loss: 1.924, valid loss/error: 2.082 28.40
Average loss over 10512748 tokens: 1.919, valid loss/error: 2.062 28.33
Average loss over 10515791 tokens: 1.925, valid loss/error: 2.068 28.30
Average loss over 10522625 tokens: 1.929, valid loss/error: 2.076 28.37
Average loss over 10513948 tokens: 1.926, valid loss/error: 2.050 28.36
Average loss over 10528434 tokens: 1.922, valid loss/error: 2.079 28.31
Average loss over 10533343 tokens: 1.930, valid loss/error: 2.079 28.33
Average loss over 10518611 tokens: 1.921, valid loss/error: 2.060 28.37
Average loss over 10529861 tokens: 1.923, valid loss/error: 2.048 28.40
Average loss over 1071589 tokens: 1.922
Epoch: 44, train loss: 1.924, valid loss/error: 2.093 28.41
Average loss over 10523107 tokens: 1.925, valid loss/error: 2.044 28.36
Average loss over 10516370 tokens: 1.924, valid loss/error: 2.073 28.35
Average loss over 10535087 tokens: 1.919, valid loss/error: 2.088 28.33
Average loss over 10545090 tokens: 1.925, valid loss/error: 2.055 28.33
Average loss over 10510731 tokens: 1.922, valid loss/error: 2.063 28.31
Average loss over 10515293 tokens: 1.926, valid loss/error: 2.074 28.30
New best model saved
Average loss over 10536296 tokens: 1.922, valid loss/error: 2.066 28.32
Average loss over 10527393 tokens: 1.921, valid loss/error: 2.069 28.37
Average loss over 1065804 tokens: 1.924
Epoch: 45, train loss: 1.923, valid loss/error: 2.074 28.37
Average loss over 10520457 tokens: 1.926, valid loss/error: 2.055 28.35
Average loss over 10538903 tokens: 1.924, valid loss/error: 2.076 28.36
Average loss over 10511161 tokens: 1.926, valid loss/error: 2.034 28.33
Average loss over 10514694 tokens: 1.923, valid loss/error: 2.087 28.29
New best model saved
Average loss over 10534189 tokens: 1.927, valid loss/error: 2.077 28.33
Average loss over 10537355 tokens: 1.919, valid loss/error: 2.067 28.39
Average loss over 10533523 tokens: 1.924, valid loss/error: 2.082 28.31
Average loss over 10498782 tokens: 1.925, valid loss/error: 2.075 28.36
Average loss over 1072825 tokens: 1.944
Epoch: 46, train loss: 1.925, valid loss/error: 2.078 28.34
Average loss over 10504859 tokens: 1.923, valid loss/error: 2.056 28.39
Average loss over 10531800 tokens: 1.925, valid loss/error: 2.075 28.33
Average loss over 10521319 tokens: 1.921, valid loss/error: 2.058 28.33
Average loss over 10528149 tokens: 1.924, valid loss/error: 2.059 28.31
Average loss over 10525667 tokens: 1.920, valid loss/error: 2.065 28.31
Average loss over 10525892 tokens: 1.920, valid loss/error: 2.057 28.32
Average loss over 10555440 tokens: 1.921, valid loss/error: 2.070 28.31
Average loss over 10533539 tokens: 1.919, valid loss/error: 2.081 28.35
Average loss over 1060788 tokens: 1.932
Epoch: 47, train loss: 1.922, valid loss/error: 2.072 28.36
Average loss over 10514444 tokens: 1.915, valid loss/error: 2.063 28.39
Average loss over 10517476 tokens: 1.923, valid loss/error: 2.030 28.38
Average loss over 10521544 tokens: 1.928, valid loss/error: 2.078 28.32
Average loss over 10511565 tokens: 1.922, valid loss/error: 2.068 28.36
Average loss over 10533181 tokens: 1.923, valid loss/error: 2.071 28.38
Average loss over 10536267 tokens: 1.925, valid loss/error: 2.071 28.36
Average loss over 10532863 tokens: 1.924, valid loss/error: 2.083 28.40
Average loss over 10523588 tokens: 1.919, valid loss/error: 2.083 28.38
Average loss over 1065679 tokens: 1.916
Epoch: 48, train loss: 1.922, valid loss/error: 2.047 28.36
Average loss over 10511416 tokens: 1.919, valid loss/error: 2.052 28.38
Average loss over 10526698 tokens: 1.924, valid loss/error: 2.031 28.37
Average loss over 10522675 tokens: 1.924, valid loss/error: 2.078 28.37
Average loss over 10530129 tokens: 1.916, valid loss/error: 2.083 28.37
Average loss over 10524813 tokens: 1.927, valid loss/error: 2.070 28.35
Average loss over 10525997 tokens: 1.919, valid loss/error: 2.070 28.34
Average loss over 10522517 tokens: 1.929, valid loss/error: 2.049 28.39
Average loss over 10517328 tokens: 1.920, valid loss/error: 2.042 28.36
Average loss over 1074199 tokens: 1.928
Epoch: 49, train loss: 1.922, valid loss/error: 2.087 28.37
Average loss over 10520145 tokens: 1.923, valid loss/error: 2.062 28.38
Average loss over 10534921 tokens: 1.922, valid loss/error: 2.074 28.38
Average loss over 10519719 tokens: 1.928, valid loss/error: 2.075 28.37
Average loss over 10540878 tokens: 1.921, valid loss/error: 2.085 28.34
Average loss over 10520215 tokens: 1.919, valid loss/error: 2.074 28.34
Average loss over 10539034 tokens: 1.921, valid loss/error: 2.069 28.31
Average loss over 10521104 tokens: 1.926, valid loss/error: 2.037 28.38
Average loss over 10548212 tokens: 1.930, valid loss/error: 2.059 28.36
Average loss over 1069404 tokens: 1.914
Epoch: 50, train loss: 1.924, valid loss/error: 2.065 28.33
Average loss over 10517471 tokens: 1.918, valid loss/error: 2.069 28.33
Average loss over 10525368 tokens: 1.924, valid loss/error: 2.048 28.39
Average loss over 10520622 tokens: 1.926, valid loss/error: 2.056 28.34
Average loss over 10526263 tokens: 1.926, valid loss/error: 2.033 28.40
Average loss over 10515614 tokens: 1.922, valid loss/error: 2.053 28.39
Average loss over 10531419 tokens: 1.923, valid loss/error: 2.074 28.40
Average loss over 10527665 tokens: 1.920, valid loss/error: 2.028 28.39
New best model saved
Average loss over 10522537 tokens: 1.921, valid loss/error: 2.068 28.37
Average loss over 1075437 tokens: 1.951
Epoch: 51, train loss: 1.923, valid loss/error: 2.075 28.34
Average loss over 10531504 tokens: 1.924, valid loss/error: 2.065 28.37
Average loss over 10529219 tokens: 1.917, valid loss/error: 2.041 28.39
Average loss over 10523918 tokens: 1.920, valid loss/error: 2.083 28.38
Average loss over 10531224 tokens: 1.926, valid loss/error: 2.069 28.33
Average loss over 10528408 tokens: 1.919, valid loss/error: 2.074 28.36
Average loss over 10541056 tokens: 1.919, valid loss/error: 2.075 28.31
Average loss over 10500779 tokens: 1.919, valid loss/error: 2.048 28.33
Average loss over 10512397 tokens: 1.920, valid loss/error: 2.059 28.37
Average loss over 1068211 tokens: 1.915
Epoch: 52, train loss: 1.920, valid loss/error: 2.081 28.38
Average loss over 10530668 tokens: 1.922, valid loss/error: 2.076 28.35
Average loss over 10549342 tokens: 1.923, valid loss/error: 2.073 28.33
Average loss over 10514549 tokens: 1.918, valid loss/error: 2.075 28.35
Average loss over 10517209 tokens: 1.921, valid loss/error: 2.060 28.38
Average loss over 10526270 tokens: 1.922, valid loss/error: 2.036 28.35
Average loss over 10524721 tokens: 1.923, valid loss/error: 2.066 28.38
Average loss over 10540033 tokens: 1.917, valid loss/error: 2.071 28.34
Average loss over 10503708 tokens: 1.922, valid loss/error: 2.077 28.35
Average loss over 1064449 tokens: 1.914
Epoch: 53, train loss: 1.921, valid loss/error: 2.043 28.33
Average loss over 10517918 tokens: 1.921, valid loss/error: 2.080 28.31
Average loss over 10516938 tokens: 1.924, valid loss/error: 2.071 28.34
Average loss over 10537268 tokens: 1.918, valid loss/error: 2.072 28.39
Average loss over 10543417 tokens: 1.921, valid loss/error: 2.060 28.38
Average loss over 10510695 tokens: 1.920, valid loss/error: 2.078 28.38
Average loss over 10514025 tokens: 1.922, valid loss/error: 2.049 28.40
Average loss over 10510628 tokens: 1.925, valid loss/error: 2.076 28.36
Average loss over 10527896 tokens: 1.915, valid loss/error: 2.045 28.36
Average loss over 1064318 tokens: 1.925
Epoch: 54, train loss: 1.921, valid loss/error: 2.060 28.38
Average loss over 10538962 tokens: 1.921, valid loss/error: 2.065 28.33
Average loss over 10540819 tokens: 1.923, valid loss/error: 2.079 28.37
Average loss over 10535807 tokens: 1.918, valid loss/error: 2.061 28.34
Average loss over 10506057 tokens: 1.921, valid loss/error: 2.044 28.34
Average loss over 10542439 tokens: 1.921, valid loss/error: 2.079 28.36
Average loss over 10516729 tokens: 1.916, valid loss/error: 2.066 28.35
Average loss over 10506436 tokens: 1.922, valid loss/error: 2.082 28.34
Average loss over 10513111 tokens: 1.921, valid loss/error: 2.075 28.35
Average loss over 1068239 tokens: 1.898
Epoch: 55, train loss: 1.920, valid loss/error: 2.048 28.34
Average loss over 10528531 tokens: 1.915, valid loss/error: 2.079 28.31
Average loss over 10538929 tokens: 1.926, valid loss/error: 2.045 28.41
Average loss over 10538125 tokens: 1.918, valid loss/error: 2.040 28.34
Average loss over 10515323 tokens: 1.923, valid loss/error: 2.065 28.30
Average loss over 10488472 tokens: 1.921, valid loss/error: 2.045 28.37
Average loss over 10513225 tokens: 1.921, valid loss/error: 2.072 28.37
Average loss over 10532340 tokens: 1.925, valid loss/error: 2.066 28.28
New best model saved
Average loss over 10523227 tokens: 1.922, valid loss/error: 2.055 28.36
Average loss over 1077888 tokens: 1.928
Epoch: 56, train loss: 1.921, valid loss/error: 2.073 28.34
Average loss over 10538745 tokens: 1.920, valid loss/error: 2.071 28.34
Average loss over 10535894 tokens: 1.921, valid loss/error: 2.061 28.34
Average loss over 10528112 tokens: 1.924, valid loss/error: 2.088 28.37
Average loss over 10545534 tokens: 1.911, valid loss/error: 2.059 28.34
Average loss over 10536521 tokens: 1.926, valid loss/error: 2.080 28.32
Average loss over 10516976 tokens: 1.922, valid loss/error: 2.071 28.33
Average loss over 10529903 tokens: 1.921, valid loss/error: 2.055 28.35
Average loss over 10510821 tokens: 1.919, valid loss/error: 2.057 28.36
Average loss over 1065557 tokens: 1.922
Epoch: 57, train loss: 1.921, valid loss/error: 2.028 28.35
New best model saved
Average loss over 10509719 tokens: 1.916, valid loss/error: 2.049 28.29
Average loss over 10530427 tokens: 1.922, valid loss/error: 2.052 28.33
Average loss over 10533881 tokens: 1.922, valid loss/error: 2.069 28.33
Average loss over 10529038 tokens: 1.917, valid loss/error: 2.067 28.36
Average loss over 10537041 tokens: 1.921, valid loss/error: 2.085 28.32
Average loss over 10537500 tokens: 1.920, valid loss/error: 2.059 28.32
Average loss over 10510949 tokens: 1.921, valid loss/error: 2.040 28.36
Average loss over 10519270 tokens: 1.924, valid loss/error: 2.046 28.36
Average loss over 1071680 tokens: 1.917
Epoch: 58, train loss: 1.920, valid loss/error: 2.030 28.33
Average loss over 10544428 tokens: 1.914, valid loss/error: 2.060 28.34
Average loss over 10516863 tokens: 1.918, valid loss/error: 2.073 28.33
Average loss over 10527862 tokens: 1.923, valid loss/error: 2.073 28.36
Average loss over 10520757 tokens: 1.918, valid loss/error: 2.065 28.31
Average loss over 10551383 tokens: 1.925, valid loss/error: 2.068 28.32
Average loss over 10525995 tokens: 1.917, valid loss/error: 2.079 28.31
Average loss over 10546472 tokens: 1.919, valid loss/error: 2.052 28.29
Average loss over 10507400 tokens: 1.921, valid loss/error: 2.069 28.28
New best model saved
Average loss over 1055632 tokens: 1.913
Epoch: 59, train loss: 1.919, valid loss/error: 2.083 28.32
Average loss over 10527056 tokens: 1.919, valid loss/error: 2.024 28.31
New best model saved
Average loss over 10535903 tokens: 1.917, valid loss/error: 2.047 28.27
New best model saved
Average loss over 10529583 tokens: 1.922, valid loss/error: 2.060 28.31
Average loss over 10521342 tokens: 1.916, valid loss/error: 2.081 28.32
Average loss over 10528660 tokens: 1.914, valid loss/error: 2.065 28.33
Average loss over 10512264 tokens: 1.925, valid loss/error: 2.059 28.33
Average loss over 10533651 tokens: 1.915, valid loss/error: 2.066 28.34
Average loss over 10541439 tokens: 1.923, valid loss/error: 2.073 28.36
Average loss over 1072933 tokens: 1.905
Epoch: 60, train loss: 1.919, valid loss/error: 2.060 28.36
Average loss over 10542479 tokens: 1.918, valid loss/error: 2.070 28.35
Average loss over 10527456 tokens: 1.917, valid loss/error: 2.078 28.41
Average loss over 10522877 tokens: 1.918, valid loss/error: 2.069 28.34
Average loss over 10542182 tokens: 1.914, valid loss/error: 2.067 28.35
Average loss over 10537593 tokens: 1.916, valid loss/error: 2.038 28.38
Average loss over 10509192 tokens: 1.911, valid loss/error: 2.076 28.39
Average loss over 10521121 tokens: 1.918, valid loss/error: 2.070 28.33
Average loss over 10518230 tokens: 1.916, valid loss/error: 2.008 28.34
New best model saved
Average loss over 1064829 tokens: 1.933
Epoch: 61, train loss: 1.916, valid loss/error: 2.066 28.33
Average loss over 10511364 tokens: 1.918, valid loss/error: 2.075 28.30
Average loss over 10545174 tokens: 1.916, valid loss/error: 2.059 28.35
Average loss over 10519421 tokens: 1.917, valid loss/error: 2.062 28.35
Average loss over 10521248 tokens: 1.918, valid loss/error: 2.067 28.31
Average loss over 10531620 tokens: 1.924, valid loss/error: 2.076 28.36
Average loss over 10512636 tokens: 1.915, valid loss/error: 2.060 28.34
Average loss over 10513399 tokens: 1.916, valid loss/error: 2.018 28.31
Average loss over 10520826 tokens: 1.915, valid loss/error: 2.059 28.34
Average loss over 1061205 tokens: 1.933
Epoch: 62, train loss: 1.918, valid loss/error: 2.058 28.37
Average loss over 10520689 tokens: 1.917, valid loss/error: 2.080 28.35
Average loss over 10517574 tokens: 1.918, valid loss/error: 2.045 28.36
Average loss over 10524147 tokens: 1.917, valid loss/error: 2.072 28.36
Average loss over 10506948 tokens: 1.921, valid loss/error: 2.053 28.31
Average loss over 10503955 tokens: 1.915, valid loss/error: 2.007 28.37
New best model saved
Average loss over 10533060 tokens: 1.920, valid loss/error: 2.076 28.30
Average loss over 10509469 tokens: 1.918, valid loss/error: 2.059 28.33
Average loss over 10536287 tokens: 1.915, valid loss/error: 2.056 28.35
Average loss over 1067097 tokens: 1.928
Epoch: 63, train loss: 1.918, valid loss/error: 2.026 28.36
Average loss over 10512827 tokens: 1.920, valid loss/error: 2.064 28.36
Average loss over 10509044 tokens: 1.913, valid loss/error: 2.048 28.36
Average loss over 10527628 tokens: 1.918, valid loss/error: 2.033 28.36
Average loss over 10508648 tokens: 1.919, valid loss/error: 2.058 28.38
Average loss over 10548840 tokens: 1.916, valid loss/error: 2.047 28.42
Average loss over 10547986 tokens: 1.922, valid loss/error: 2.048 28.37
Average loss over 10527971 tokens: 1.914, valid loss/error: 2.076 28.37
Average loss over 10523627 tokens: 1.917, valid loss/error: 2.068 28.35
Average loss over 1071515 tokens: 1.921
Epoch: 64, train loss: 1.917, valid loss/error: 2.083 28.36
Average loss over 10519221 tokens: 1.921, valid loss/error: 2.065 28.38
Average loss over 10532229 tokens: 1.915, valid loss/error: 2.069 28.38
Average loss over 10543041 tokens: 1.914, valid loss/error: 2.029 28.36
Average loss over 10514875 tokens: 1.919, valid loss/error: 2.059 28.31
Average loss over 10513977 tokens: 1.920, valid loss/error: 2.052 28.36
Average loss over 10533648 tokens: 1.920, valid loss/error: 2.066 28.36
Average loss over 10533545 tokens: 1.918, valid loss/error: 2.062 28.39
Average loss over 10536466 tokens: 1.920, valid loss/error: 2.062 28.30
Average loss over 1067839 tokens: 1.909
Epoch: 65, train loss: 1.918, valid loss/error: 2.059 28.37
Average loss over 10523849 tokens: 1.920, valid loss/error: 2.037 28.36
Average loss over 10530117 tokens: 1.920, valid loss/error: 2.023 28.35
Average loss over 10531253 tokens: 1.920, valid loss/error: 2.079 28.34
Average loss over 10533109 tokens: 1.914, valid loss/error: 2.090 28.33
Average loss over 10522192 tokens: 1.916, valid loss/error: 2.040 28.34
Average loss over 10529991 tokens: 1.914, valid loss/error: 2.068 28.34
Average loss over 10525640 tokens: 1.914, valid loss/error: 2.053 28.31
Average loss over 10522257 tokens: 1.920, valid loss/error: 2.066 28.31
Average loss over 1066420 tokens: 1.901
Epoch: 66, train loss: 1.917, valid loss/error: 2.040 28.33
Average loss over 10524255 tokens: 1.915, valid loss/error: 2.032 28.30
Average loss over 10536777 tokens: 1.921, valid loss/error: 2.038 28.30
Average loss over 10532726 tokens: 1.914, valid loss/error: 2.057 28.30
Average loss over 10510483 tokens: 1.916, valid loss/error: 2.071 28.31
Average loss over 10546392 tokens: 1.914, valid loss/error: 2.058 28.33
Average loss over 10531277 tokens: 1.924, valid loss/error: 2.081 28.35
Average loss over 10528379 tokens: 1.916, valid loss/error: 2.065 28.29
Average loss over 10508265 tokens: 1.911, valid loss/error: 2.062 28.28
Average loss over 1071759 tokens: 1.921
Epoch: 67, train loss: 1.916, valid loss/error: 2.067 28.27
New best model saved
Average loss over 10513987 tokens: 1.914, valid loss/error: 2.006 28.37
New best model saved
Average loss over 10520675 tokens: 1.915, valid loss/error: 2.060 28.31
Average loss over 10534489 tokens: 1.920, valid loss/error: 2.066 28.28
Average loss over 10539506 tokens: 1.913, valid loss/error: 2.039 28.29
Average loss over 10532477 tokens: 1.911, valid loss/error: 2.067 28.32
Average loss over 10526296 tokens: 1.915, valid loss/error: 2.064 28.30
Average loss over 10535010 tokens: 1.924, valid loss/error: 2.022 28.35
Average loss over 10523342 tokens: 1.919, valid loss/error: 2.071 28.33
Average loss over 1066160 tokens: 1.917
Epoch: 68, train loss: 1.916, valid loss/error: 2.018 28.33
Average loss over 10526645 tokens: 1.914, valid loss/error: 2.029 28.28
Average loss over 10518767 tokens: 1.910, valid loss/error: 2.024 28.31
Average loss over 10527155 tokens: 1.916, valid loss/error: 2.063 28.35
Average loss over 10511294 tokens: 1.919, valid loss/error: 2.034 28.38
Average loss over 10545578 tokens: 1.920, valid loss/error: 2.078 28.34
Average loss over 10523938 tokens: 1.915, valid loss/error: 2.053 28.33
Average loss over 10517580 tokens: 1.916, valid loss/error: 2.054 28.33
Average loss over 10514555 tokens: 1.916, valid loss/error: 2.057 28.37
Average loss over 1072425 tokens: 1.903
Epoch: 69, train loss: 1.916, valid loss/error: 2.040 28.37
Average loss over 10547024 tokens: 1.915, valid loss/error: 2.062 28.37
Average loss over 10527473 tokens: 1.920, valid loss/error: 2.070 28.39
Average loss over 10532597 tokens: 1.921, valid loss/error: 2.061 28.35
Average loss over 10537599 tokens: 1.916, valid loss/error: 2.066 28.35
Average loss over 10522762 tokens: 1.913, valid loss/error: 2.076 28.33
Average loss over 10520326 tokens: 1.915, valid loss/error: 2.035 28.31
Average loss over 10524206 tokens: 1.915, valid loss/error: 2.049 28.33
Average loss over 10507378 tokens: 1.914, valid loss/error: 2.059 28.35
Average loss over 1067288 tokens: 1.916
Epoch: 70, train loss: 1.916, valid loss/error: 2.066 28.35
Average loss over 10553856 tokens: 1.912, valid loss/error: 2.072 28.38
Average loss over 10521518 tokens: 1.920, valid loss/error: 2.066 28.34
Average loss over 10548694 tokens: 1.913, valid loss/error: 2.051 28.31
Average loss over 10532811 tokens: 1.918, valid loss/error: 2.070 28.36
Average loss over 10530946 tokens: 1.914, valid loss/error: 2.075 28.36
Average loss over 10538098 tokens: 1.915, valid loss/error: 2.060 28.35
Average loss over 10519352 tokens: 1.920, valid loss/error: 2.048 28.37
Average loss over 10537033 tokens: 1.915, valid loss/error: 2.037 28.37
Average loss over 1065231 tokens: 1.912
Epoch: 71, train loss: 1.916, valid loss/error: 2.056 28.38
Average loss over 10519725 tokens: 1.912, valid loss/error: 2.052 28.36
Average loss over 10522654 tokens: 1.914, valid loss/error: 2.064 28.33
Average loss over 10504109 tokens: 1.914, valid loss/error: 2.046 28.32
Average loss over 10514652 tokens: 1.921, valid loss/error: 2.035 28.35
Average loss over 10522095 tokens: 1.910, valid loss/error: 2.034 28.35
Average loss over 10516465 tokens: 1.916, valid loss/error: 2.074 28.30
Average loss over 10533143 tokens: 1.921, valid loss/error: 2.067 28.30
Average loss over 10541922 tokens: 1.914, valid loss/error: 2.060 28.30
Average loss over 1064139 tokens: 1.920
Epoch: 72, train loss: 1.915, valid loss/error: 2.045 28.32
Average loss over 10542976 tokens: 1.915, valid loss/error: 2.067 28.33
Average loss over 10516311 tokens: 1.917, valid loss/error: 2.041 28.33
Average loss over 10518761 tokens: 1.914, valid loss/error: 2.025 28.30
Average loss over 10510370 tokens: 1.912, valid loss/error: 2.062 28.28
Average loss over 10511288 tokens: 1.918, valid loss/error: 2.057 28.35
Average loss over 10523852 tokens: 1.918, valid loss/error: 2.064 28.32
Average loss over 10513690 tokens: 1.916, valid loss/error: 2.023 28.29
Average loss over 10540353 tokens: 1.916, valid loss/error: 2.028 28.32
Average loss over 1062768 tokens: 1.929
Epoch: 73, train loss: 1.916, valid loss/error: 2.061 28.29
Average loss over 10530696 tokens: 1.909, valid loss/error: 2.020 28.29
Average loss over 10516062 tokens: 1.912, valid loss/error: 2.051 28.31
Average loss over 10528305 tokens: 1.915, valid loss/error: 2.072 28.27
New best model saved
Average loss over 10530793 tokens: 1.912, valid loss/error: 2.051 28.32
Average loss over 10518477 tokens: 1.911, valid loss/error: 2.045 28.34
Average loss over 10520079 tokens: 1.915, valid loss/error: 2.037 28.36
Average loss over 10529763 tokens: 1.913, valid loss/error: 2.016 28.26
New best model saved
Average loss over 10519381 tokens: 1.918, valid loss/error: 2.062 28.30
Average loss over 1073912 tokens: 1.925
Epoch: 74, train loss: 1.913, valid loss/error: 2.076 28.29
Average loss over 10536080 tokens: 1.913, valid loss/error: 2.065 28.32
Average loss over 10529232 tokens: 1.915, valid loss/error: 2.032 28.32
Average loss over 10526845 tokens: 1.916, valid loss/error: 2.048 28.35
Average loss over 10504229 tokens: 1.914, valid loss/error: 2.058 28.35
Average loss over 10522223 tokens: 1.911, valid loss/error: 2.067 28.31
Average loss over 10496796 tokens: 1.913, valid loss/error: 2.054 28.32
Average loss over 10540869 tokens: 1.915, valid loss/error: 2.044 28.36
Average loss over 10514524 tokens: 1.914, valid loss/error: 2.061 28.31
Average loss over 1069226 tokens: 1.912
Epoch: 75, train loss: 1.914, valid loss/error: 2.035 28.31
Average loss over 10526795 tokens: 1.912, valid loss/error: 2.058 28.33
Average loss over 10519111 tokens: 1.915, valid loss/error: 2.063 28.34
Average loss over 10523768 tokens: 1.916, valid loss/error: 2.048 28.28
Average loss over 10524660 tokens: 1.916, valid loss/error: 2.062 28.30
Average loss over 10503469 tokens: 1.916, valid loss/error: 2.064 28.31
Average loss over 10536590 tokens: 1.915, valid loss/error: 2.045 28.35
Average loss over 10518255 tokens: 1.916, valid loss/error: 2.064 28.36
Average loss over 10552010 tokens: 1.912, valid loss/error: 2.065 28.33
Average loss over 1071671 tokens: 1.908
Epoch: 76, train loss: 1.915, valid loss/error: 2.063 28.31
Average loss over 10513810 tokens: 1.914, valid loss/error: 2.065 28.25
New best model saved
Average loss over 10535583 tokens: 1.916, valid loss/error: 2.060 28.28
Average loss over 10521194 tokens: 1.918, valid loss/error: 2.044 28.33
Average loss over 10520094 tokens: 1.918, valid loss/error: 2.066 28.32
Average loss over 10541106 tokens: 1.913, valid loss/error: 2.047 28.32
Average loss over 10506876 tokens: 1.910, valid loss/error: 2.069 28.31
Average loss over 10537135 tokens: 1.915, valid loss/error: 2.058 28.32
Average loss over 10519330 tokens: 1.915, valid loss/error: 2.045 28.33
Average loss over 1070063 tokens: 1.913
Epoch: 77, train loss: 1.915, valid loss/error: 2.034 28.32
Average loss over 10543035 tokens: 1.914, valid loss/error: 2.054 28.38
Average loss over 10547844 tokens: 1.915, valid loss/error: 2.066 28.33
Average loss over 10536221 tokens: 1.918, valid loss/error: 2.071 28.31
Average loss over 10508633 tokens: 1.916, valid loss/error: 2.078 28.28
Average loss over 10525222 tokens: 1.912, valid loss/error: 2.065 28.30
Average loss over 10520404 tokens: 1.915, valid loss/error: 2.056 28.32
Average loss over 10507999 tokens: 1.914, valid loss/error: 2.068 28.34
Average loss over 10510912 tokens: 1.916, valid loss/error: 2.025 28.31
Average loss over 1068500 tokens: 1.890
Epoch: 78, train loss: 1.915, valid loss/error: 2.059 28.31
Average loss over 10528388 tokens: 1.913, valid loss/error: 2.050 28.30
Average loss over 10526433 tokens: 1.916, valid loss/error: 2.064 28.29
Average loss over 10520438 tokens: 1.914, valid loss/error: 2.026 28.37
Average loss over 10520397 tokens: 1.917, valid loss/error: 2.019 28.32
Average loss over 10535025 tokens: 1.913, valid loss/error: 2.069 28.32
Average loss over 10529492 tokens: 1.918, valid loss/error: 2.044 28.34
Average loss over 10512878 tokens: 1.919, valid loss/error: 2.071 28.33
Average loss over 10527466 tokens: 1.914, valid loss/error: 2.050 28.30
Average loss over 1064085 tokens: 1.902
Epoch: 79, train loss: 1.915, valid loss/error: 2.036 28.29
Average loss over 10523370 tokens: 1.915, valid loss/error: 2.066 28.34
Average loss over 10526249 tokens: 1.916, valid loss/error: 2.058 28.28
Average loss over 10536797 tokens: 1.907, valid loss/error: 2.063 28.31
Average loss over 10543143 tokens: 1.913, valid loss/error: 2.066 28.30
Average loss over 10530372 tokens: 1.914, valid loss/error: 2.055 28.33
Average loss over 10515013 tokens: 1.914, valid loss/error: 2.047 28.28
Average loss over 10503171 tokens: 1.916, valid loss/error: 2.032 28.30
Average loss over 10515706 tokens: 1.905, valid loss/error: 2.044 28.28
Average loss over 1069015 tokens: 1.906
Epoch: 80, train loss: 1.912, valid loss/error: 2.053 28.32
Average loss over 10516952 tokens: 1.907, valid loss/error: 2.073 28.35
Average loss over 10520819 tokens: 1.911, valid loss/error: 2.052 28.34
Average loss over 10527876 tokens: 1.920, valid loss/error: 2.060 28.29
Average loss over 10526368 tokens: 1.909, valid loss/error: 2.038 28.34
Average loss over 10508196 tokens: 1.912, valid loss/error: 2.052 28.35
Average loss over 10534465 tokens: 1.915, valid loss/error: 2.023 28.33
Average loss over 10499006 tokens: 1.909, valid loss/error: 2.018 28.28
Average loss over 10551920 tokens: 1.913, valid loss/error: 2.062 28.31
Average loss over 1066969 tokens: 1.902
Epoch: 81, train loss: 1.912, valid loss/error: 2.054 28.31
Average loss over 10506000 tokens: 1.912, valid loss/error: 2.065 28.30
Average loss over 10520162 tokens: 1.912, valid loss/error: 2.055 28.32
Average loss over 10539751 tokens: 1.911, valid loss/error: 2.028 28.35
Average loss over 10523391 tokens: 1.918, valid loss/error: 2.072 28.29
Average loss over 10514719 tokens: 1.920, valid loss/error: 2.064 28.29
Average loss over 10523903 tokens: 1.914, valid loss/error: 2.022 28.29
Average loss over 10511541 tokens: 1.909, valid loss/error: 2.040 28.33
Average loss over 10523404 tokens: 1.915, valid loss/error: 2.053 28.34
Average loss over 1075798 tokens: 1.905
Epoch: 82, train loss: 1.914, valid loss/error: 2.055 28.31
Average loss over 10534309 tokens: 1.906, valid loss/error: 2.036 28.32
Average loss over 10524365 tokens: 1.911, valid loss/error: 2.061 28.32
Average loss over 10512880 tokens: 1.912, valid loss/error: 2.052 28.34
Average loss over 10520509 tokens: 1.912, valid loss/error: 2.069 28.34
Average loss over 10500639 tokens: 1.913, valid loss/error: 2.046 28.32
Average loss over 10515610 tokens: 1.914, valid loss/error: 2.048 28.34
Average loss over 10526387 tokens: 1.915, valid loss/error: 2.063 28.35
Average loss over 10517054 tokens: 1.914, valid loss/error: 2.065 28.31
Average loss over 1064034 tokens: 1.942
Epoch: 83, train loss: 1.913, valid loss/error: 2.038 28.27
Average loss over 10535611 tokens: 1.914, valid loss/error: 2.039 28.36
Average loss over 10512952 tokens: 1.917, valid loss/error: 2.072 28.32
Average loss over 10518427 tokens: 1.911, valid loss/error: 2.050 28.28
Average loss over 10519881 tokens: 1.909, valid loss/error: 2.052 28.29
Average loss over 10517323 tokens: 1.914, valid loss/error: 2.048 28.26
Average loss over 10520381 tokens: 1.918, valid loss/error: 2.045 28.31
Average loss over 10529243 tokens: 1.909, valid loss/error: 2.074 28.32
Average loss over 10500507 tokens: 1.913, valid loss/error: 2.062 28.36
Average loss over 1072705 tokens: 1.936
Epoch: 84, train loss: 1.913, valid loss/error: 2.064 28.32
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.347 100.00
Initial model saved
Average loss over 17922596 tokens: 8.717
Epoch: 1, train loss: 8.717, valid loss/error: 7.931 90.49
New best model saved
Average loss over 17922596 tokens: 6.620
Epoch: 2, train loss: 6.620, valid loss/error: 6.796 81.50
New best model saved
Average loss over 17922596 tokens: 5.202
Epoch: 3, train loss: 5.202, valid loss/error: 5.935 73.55
New best model saved
Average loss over 17922596 tokens: 4.047
Epoch: 4, train loss: 4.047, valid loss/error: 4.966 61.25
New best model saved
Average loss over 17922596 tokens: 3.252
Epoch: 5, train loss: 3.252, valid loss/error: 4.244 50.82
New best model saved
Average loss over 17922596 tokens: 2.847
Epoch: 6, train loss: 2.847, valid loss/error: 3.837 45.34
New best model saved
Average loss over 17922596 tokens: 2.633
Epoch: 7, train loss: 2.633, valid loss/error: 3.620 42.02
New best model saved
Average loss over 17922596 tokens: 2.503
Epoch: 8, train loss: 2.503, valid loss/error: 3.480 40.22
New best model saved
Average loss over 17922596 tokens: 2.417
Epoch: 9, train loss: 2.417, valid loss/error: 3.385 38.78
New best model saved
Average loss over 17922596 tokens: 2.356
Epoch: 10, train loss: 2.356, valid loss/error: 3.340 37.93
New best model saved
Average loss over 17922596 tokens: 2.311
Epoch: 11, train loss: 2.311, valid loss/error: 3.302 37.34
New best model saved
Average loss over 17922596 tokens: 2.278
Epoch: 12, train loss: 2.278, valid loss/error: 3.267 36.76
New best model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16enrocahe/rs_6144_2/enro_base/std_fivecheck/last.h5
Init lr: 1e-05, Dev Loss/Error: 3.194 33.79
Average loss over 17922596 tokens: 2.242
Epoch: 13, train loss: 2.242, valid loss/error: 3.225 36.15
New best model saved
Average loss over 17922596 tokens: 1.878
Epoch: 1, train loss: 1.878, valid loss/error: 3.199 33.51
New best model saved
Average loss over 17922596 tokens: 2.204
Epoch: 14, train loss: 2.204, valid loss/error: 3.193 35.46
New best model saved
Average loss over 17922596 tokens: 1.866
Epoch: 2, train loss: 1.866, valid loss/error: 3.198 33.50
New best model saved
Average loss over 17922596 tokens: 2.173
Epoch: 15, train loss: 2.173, valid loss/error: 3.183 35.34
New best model saved
Average loss over 17922596 tokens: 1.861
Epoch: 3, train loss: 1.861, valid loss/error: 3.200 33.41
New best model saved
Average loss over 17922596 tokens: 2.147
Epoch: 16, train loss: 2.147, valid loss/error: 3.155 34.82
New best model saved
Average loss over 17922596 tokens: 1.856
Epoch: 4, train loss: 1.856, valid loss/error: 3.200 33.41
Average loss over 17922596 tokens: 2.124
Epoch: 17, train loss: 2.124, valid loss/error: 3.137 34.40
New best model saved
Average loss over 17922596 tokens: 1.853
Epoch: 5, train loss: 1.853, valid loss/error: 3.203 33.44
Average loss over 17922596 tokens: 2.103
Epoch: 18, train loss: 2.103, valid loss/error: 3.140 34.39
New best model saved
Average loss over 17922596 tokens: 1.850
Epoch: 6, train loss: 1.850, valid loss/error: 3.201 33.42
Average loss over 17922596 tokens: 2.084
Epoch: 19, train loss: 2.084, valid loss/error: 3.137 34.12
New best model saved
Average loss over 17922596 tokens: 1.848
Epoch: 7, train loss: 1.848, valid loss/error: 3.206 33.39
New best model saved
Average loss over 17922596 tokens: 2.068
Epoch: 20, train loss: 2.068, valid loss/error: 3.123 34.07
New best model saved
Average loss over 17922596 tokens: 1.845
Epoch: 8, train loss: 1.845, valid loss/error: 3.208 33.41
Average loss over 17922596 tokens: 2.052
Epoch: 21, train loss: 2.052, valid loss/error: 3.135 33.84
New best model saved
Average loss over 17922596 tokens: 1.844
Epoch: 9, train loss: 1.844, valid loss/error: 3.206 33.36
New best model saved
Average loss over 17922596 tokens: 2.038
Epoch: 22, train loss: 2.038, valid loss/error: 3.135 33.82
New best model saved
Average loss over 17922596 tokens: 1.842
Epoch: 10, train loss: 1.842, valid loss/error: 3.209 33.40
Average loss over 17922596 tokens: 2.025
Epoch: 23, train loss: 2.025, valid loss/error: 3.137 33.76
New best model saved
Average loss over 17922596 tokens: 1.840
Epoch: 11, train loss: 1.840, valid loss/error: 3.210 33.39
Average loss over 17922596 tokens: 2.013
Epoch: 24, train loss: 2.013, valid loss/error: 3.139 33.75
New best model saved
Average loss over 17922596 tokens: 1.838
Epoch: 12, train loss: 1.838, valid loss/error: 3.209 33.42
Average loss over 17922596 tokens: 2.002
Epoch: 25, train loss: 2.002, valid loss/error: 3.146 33.85
Average loss over 17922596 tokens: 1.837
Epoch: 13, train loss: 1.837, valid loss/error: 3.212 33.35
New best model saved
Average loss over 17922596 tokens: 1.991
Epoch: 26, train loss: 1.991, valid loss/error: 3.148 33.73
New best model saved
Average loss over 17922596 tokens: 1.835
Epoch: 14, train loss: 1.835, valid loss/error: 3.215 33.42
Average loss over 17922596 tokens: 1.981
Epoch: 27, train loss: 1.981, valid loss/error: 3.144 33.76
Average loss over 17922596 tokens: 1.834
Epoch: 15, train loss: 1.834, valid loss/error: 3.215 33.40
Average loss over 17922596 tokens: 1.971
Epoch: 28, train loss: 1.971, valid loss/error: 3.168 33.61
New best model saved
Average loss over 17922596 tokens: 1.833
Epoch: 16, train loss: 1.833, valid loss/error: 3.214 33.37
Average loss over 17922596 tokens: 1.963
Epoch: 29, train loss: 1.963, valid loss/error: 3.152 33.80
Average loss over 17922596 tokens: 1.831
Epoch: 17, train loss: 1.831, valid loss/error: 3.219 33.38
Average loss over 17922596 tokens: 1.954
Epoch: 30, train loss: 1.954, valid loss/error: 3.185 33.82
Average loss over 17922596 tokens: 1.830
Epoch: 18, train loss: 1.830, valid loss/error: 3.219 33.39
Average loss over 17922596 tokens: 1.946
Epoch: 31, train loss: 1.946, valid loss/error: 3.182 33.83
Average loss over 17922596 tokens: 1.829
Epoch: 19, train loss: 1.829, valid loss/error: 3.219 33.39
Average loss over 17922596 tokens: 1.939
Epoch: 32, train loss: 1.939, valid loss/error: 3.172 33.74
Average loss over 17922596 tokens: 1.828
Epoch: 20, train loss: 1.828, valid loss/error: 3.220 33.42
Average loss over 17922596 tokens: 1.931
Epoch: 33, train loss: 1.931, valid loss/error: 3.203 33.99
Average loss over 17922596 tokens: 1.827
Epoch: 21, train loss: 1.827, valid loss/error: 3.223 33.43
early stop
model saved
Average loss over 17922596 tokens: 1.924
Epoch: 34, train loss: 1.924, valid loss/error: 3.193 33.82
Average loss over 17922596 tokens: 1.917
Epoch: 35, train loss: 1.917, valid loss/error: 3.196 33.65
Average loss over 17922596 tokens: 1.912
Epoch: 36, train loss: 1.912, valid loss/error: 3.213 33.89
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/wmt16enrocahe/rs_6144_2/enro_base/std_fivecheck/last.h5
Init lr: 1e-05, Dev Loss/Error: 3.194 33.79
Average loss over 17922596 tokens: 1.878
Epoch: 1, train loss: 1.878, valid loss/error: 3.199 33.51
New best model saved
Average loss over 17922596 tokens: 1.866
Epoch: 2, train loss: 1.866, valid loss/error: 3.198 33.50
New best model saved
Average loss over 17922596 tokens: 1.861
Epoch: 3, train loss: 1.861, valid loss/error: 3.200 33.41
New best model saved
Average loss over 17922596 tokens: 1.856
Epoch: 4, train loss: 1.856, valid loss/error: 3.200 33.41
Average loss over 17922596 tokens: 1.853
Epoch: 5, train loss: 1.853, valid loss/error: 3.203 33.44
Average loss over 17922596 tokens: 1.850
Epoch: 6, train loss: 1.850, valid loss/error: 3.201 33.42
Average loss over 17922596 tokens: 1.848
Epoch: 7, train loss: 1.848, valid loss/error: 3.206 33.39
New best model saved
Average loss over 17922596 tokens: 1.845
Epoch: 8, train loss: 1.845, valid loss/error: 3.208 33.41
Average loss over 17922596 tokens: 1.844
Epoch: 9, train loss: 1.844, valid loss/error: 3.206 33.36
New best model saved
Average loss over 17922596 tokens: 1.842
Epoch: 10, train loss: 1.842, valid loss/error: 3.209 33.40
Average loss over 17922596 tokens: 1.840
Epoch: 11, train loss: 1.840, valid loss/error: 3.210 33.39
Average loss over 17922596 tokens: 1.838
Epoch: 12, train loss: 1.838, valid loss/error: 3.209 33.42
Average loss over 17922596 tokens: 1.837
Epoch: 13, train loss: 1.837, valid loss/error: 3.212 33.35
New best model saved
Average loss over 17922596 tokens: 1.835
Epoch: 14, train loss: 1.835, valid loss/error: 3.215 33.42
Average loss over 17922596 tokens: 1.834
Epoch: 15, train loss: 1.834, valid loss/error: 3.215 33.40
Average loss over 17922596 tokens: 1.833
Epoch: 16, train loss: 1.833, valid loss/error: 3.214 33.37
Average loss over 17922596 tokens: 1.831
Epoch: 17, train loss: 1.831, valid loss/error: 3.219 33.38
Average loss over 17922596 tokens: 1.830
Epoch: 18, train loss: 1.830, valid loss/error: 3.219 33.39
Average loss over 17922596 tokens: 1.829
Epoch: 19, train loss: 1.829, valid loss/error: 3.219 33.39
Average loss over 17922596 tokens: 1.828
Epoch: 20, train loss: 1.828, valid loss/error: 3.220 33.42
Average loss over 17922596 tokens: 1.827
Epoch: 21, train loss: 1.827, valid loss/error: 3.223 33.43
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_base_train.py
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/enro_base_train.py", line 214, in <module>
    td = h5File(cnfg.train_data, "r")
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 567, in __init__
    fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 231, in make_fid
    fid = h5f.open(name, flags, fapl=fapl)
  File "h5py/_objects.pyx", line 54, in h5py._objects.with_phil.wrapper
  File "h5py/_objects.pyx", line 55, in h5py._objects.with_phil.wrapper
  File "h5py/h5f.pyx", line 106, in h5py.h5f.open
FileNotFoundError: [Errno 2] Unable to open file (unable to open file: name = '/home/yfguo/4090data/Data_Cache/wmt16/wmt16enrocahe/rs_6144_2_bpe40k/train.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.561 99.99
Initial model saved
Average loss over 17617096 tokens: 8.882
Epoch: 1, train loss: 8.882, valid loss/error: 8.055 90.30
New best model saved
Average loss over 17617096 tokens: 6.734
Epoch: 2, train loss: 6.734, valid loss/error: 6.945 81.69
New best model saved
Average loss over 17617096 tokens: 5.323
Epoch: 3, train loss: 5.323, valid loss/error: 6.080 73.98
New best model saved
Average loss over 17617096 tokens: 4.137
Epoch: 4, train loss: 4.137, valid loss/error: 5.138 62.35
New best model saved
Average loss over 17617096 tokens: 3.314
Epoch: 5, train loss: 3.314, valid loss/error: 4.376 52.20
New best model saved
Average loss over 17617096 tokens: 2.887
Epoch: 6, train loss: 2.887, valid loss/error: 3.938 46.41
New best model saved
Average loss over 17617096 tokens: 2.662
Epoch: 7, train loss: 2.662, valid loss/error: 3.702 42.89
New best model saved
Average loss over 17617096 tokens: 2.528
Epoch: 8, train loss: 2.528, valid loss/error: 3.546 40.86
New best model saved
Average loss over 17617096 tokens: 2.442
Epoch: 9, train loss: 2.442, valid loss/error: 3.462 39.47
New best model saved
Average loss over 17617096 tokens: 2.381
Epoch: 10, train loss: 2.381, valid loss/error: 3.424 38.67
New best model saved
Average loss over 17617096 tokens: 2.336
Epoch: 11, train loss: 2.336, valid loss/error: 3.380 38.18
New best model saved
Average loss over 17617096 tokens: 2.302
Epoch: 12, train loss: 2.302, valid loss/error: 3.349 37.45
New best model saved
Average loss over 17617096 tokens: 2.268
Epoch: 13, train loss: 2.268, valid loss/error: 3.299 37.04
New best model saved
Average loss over 17617096 tokens: 2.232
Epoch: 14, train loss: 2.232, valid loss/error: 3.275 36.37
New best model saved
Average loss over 17617096 tokens: 2.199
Epoch: 15, train loss: 2.199, valid loss/error: 3.266 36.13
New best model saved
Average loss over 17617096 tokens: 2.171
Epoch: 16, train loss: 2.171, valid loss/error: 3.232 35.77
New best model saved
Average loss over 17617096 tokens: 2.147
Epoch: 17, train loss: 2.147, valid loss/error: 3.233 35.56
New best model saved
Average loss over 17617096 tokens: 2.125
Epoch: 18, train loss: 2.125, valid loss/error: 3.237 35.60
Average loss over 17617096 tokens: 2.107
Epoch: 19, train loss: 2.107, valid loss/error: 3.242 35.30
New best model saved
Average loss over 17617096 tokens: 2.089
Epoch: 20, train loss: 2.089, valid loss/error: 3.237 35.21
New best model saved
Average loss over 17617096 tokens: 2.073
Epoch: 21, train loss: 2.073, valid loss/error: 3.229 35.08
New best model saved
Average loss over 17617096 tokens: 2.057
Epoch: 22, train loss: 2.057, valid loss/error: 3.227 34.91
New best model saved
Average loss over 17617096 tokens: 2.044
Epoch: 23, train loss: 2.044, valid loss/error: 3.231 34.85
New best model saved
Average loss over 17617096 tokens: 2.031
Epoch: 24, train loss: 2.031, valid loss/error: 3.239 34.80
New best model saved
Average loss over 17617096 tokens: 2.019
Epoch: 25, train loss: 2.019, valid loss/error: 3.267 35.00
Average loss over 17617096 tokens: 2.008
Epoch: 26, train loss: 2.008, valid loss/error: 3.249 34.97
Average loss over 17617096 tokens: 1.997
Epoch: 27, train loss: 1.997, valid loss/error: 3.263 34.71
New best model saved
Average loss over 17617096 tokens: 1.987
Epoch: 28, train loss: 1.987, valid loss/error: 3.272 34.77
Average loss over 17617096 tokens: 1.978
Epoch: 29, train loss: 1.978, valid loss/error: 3.269 34.72
Average loss over 17617096 tokens: 1.969
Epoch: 30, train loss: 1.969, valid loss/error: 3.295 34.92
Average loss over 17617096 tokens: 1.961
Epoch: 31, train loss: 1.961, valid loss/error: 3.280 34.86
Average loss over 17617096 tokens: 1.953
Epoch: 32, train loss: 1.953, valid loss/error: 3.296 34.69
New best model saved
Average loss over 17617096 tokens: 1.945
Epoch: 33, train loss: 1.945, valid loss/error: 3.313 34.90
Average loss over 17617096 tokens: 1.938
Epoch: 34, train loss: 1.938, valid loss/error: 3.312 34.78
Average loss over 17617096 tokens: 1.931
Epoch: 35, train loss: 1.931, valid loss/error: 3.324 34.89
Average loss over 17617096 tokens: 1.924
Epoch: 36, train loss: 1.924, valid loss/error: 3.331 34.99
Average loss over 17617096 tokens: 1.918
Epoch: 37, train loss: 1.918, valid loss/error: 3.339 35.07
Average loss over 17617096 tokens: 1.912
Epoch: 38, train loss: 1.912, valid loss/error: 3.337 34.97
Average loss over 17617096 tokens: 1.905
Epoch: 39, train loss: 1.905, valid loss/error: 3.345 34.82
Average loss over 17617096 tokens: 1.900
Epoch: 40, train loss: 1.900, valid loss/error: 3.350 34.99
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.561 99.99
Initial model saved
Average loss over 17617096 tokens: 5.981
Epoch: 1, train loss: 5.981, valid loss/error: 5.151 61.58
New best model saved
Average loss over 17617096 tokens: 3.084
Epoch: 2, train loss: 3.084, valid loss/error: 3.995 46.93
New best model saved
Average loss over 17617096 tokens: 2.690
Epoch: 3, train loss: 2.690, valid loss/error: 3.654 42.32
New best model saved
Average loss over 17617096 tokens: 2.524
Epoch: 4, train loss: 2.524, valid loss/error: 3.521 39.89
New best model saved
Average loss over 17617096 tokens: 2.435
Epoch: 5, train loss: 2.435, valid loss/error: 3.433 38.62
New best model saved
Average loss over 17617096 tokens: 2.376
Epoch: 6, train loss: 2.376, valid loss/error: 3.378 37.77
New best model saved
Average loss over 17617096 tokens: 2.335
Epoch: 7, train loss: 2.335, valid loss/error: 3.360 37.07
New best model saved
Average loss over 17617096 tokens: 2.301
Epoch: 8, train loss: 2.301, valid loss/error: 3.332 36.79
New best model saved
Average loss over 17617096 tokens: 2.275
Epoch: 9, train loss: 2.275, valid loss/error: 3.302 36.12
New best model saved
Average loss over 17617096 tokens: 2.253
Epoch: 10, train loss: 2.253, valid loss/error: 3.295 35.90
New best model saved
Average loss over 17617096 tokens: 2.234
Epoch: 11, train loss: 2.234, valid loss/error: 3.303 35.82
New best model saved
Average loss over 17617096 tokens: 2.218
Epoch: 12, train loss: 2.218, valid loss/error: 3.271 35.59
New best model saved
Average loss over 17617096 tokens: 2.204
Epoch: 13, train loss: 2.204, valid loss/error: 3.263 35.35
New best model saved
Average loss over 17617096 tokens: 2.191
Epoch: 14, train loss: 2.191, valid loss/error: 3.259 35.11
New best model saved
Average loss over 17617096 tokens: 2.179
Epoch: 15, train loss: 2.179, valid loss/error: 3.255 35.14
New best model saved
Average loss over 17617096 tokens: 2.169
Epoch: 16, train loss: 2.169, valid loss/error: 3.273 35.17
Average loss over 17617096 tokens: 2.159
Epoch: 17, train loss: 2.159, valid loss/error: 3.262 34.87
New best model saved
Average loss over 17617096 tokens: 2.151
Epoch: 18, train loss: 2.151, valid loss/error: 3.242 34.84
New best model saved
Average loss over 17617096 tokens: 2.143
Epoch: 19, train loss: 2.143, valid loss/error: 3.250 34.73
New best model saved
Average loss over 17617096 tokens: 2.135
Epoch: 20, train loss: 2.135, valid loss/error: 3.239 34.56
New best model saved
Average loss over 17617096 tokens: 2.128
Epoch: 21, train loss: 2.128, valid loss/error: 3.243 34.67
Average loss over 17617096 tokens: 2.122
Epoch: 22, train loss: 2.122, valid loss/error: 3.246 34.50
New best model saved
Average loss over 17617096 tokens: 2.117
Epoch: 23, train loss: 2.117, valid loss/error: 3.248 34.63
Average loss over 17617096 tokens: 2.112
Epoch: 24, train loss: 2.112, valid loss/error: 3.262 34.80
Average loss over 3235044 tokens: 2.079
Epoch: 25, train loss: 2.079, valid loss/error: 3.268 34.60
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enro_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.561 99.99
Initial model saved
Average loss over 3310877 tokens: 6.503, valid loss/error: 6.433 74.07
New best model saved
Average loss over 3312994 tokens: 4.384, valid loss/error: 5.683 64.84
New best model saved
Average loss over 3315405 tokens: 3.867, valid loss/error: 5.310 60.30
New best model saved
Average loss over 3318679 tokens: 3.648, valid loss/error: 5.096 57.59
New best model saved
Average loss over 3314471 tokens: 3.525, valid loss/error: 4.971 55.89
New best model saved
Average loss over 1044670 tokens: 3.471
Epoch: 1, train loss: 4.330, valid loss/error: 4.937 55.59
New best model saved
Average loss over 3313012 tokens: 3.414, valid loss/error: 4.849 54.36
New best model saved
Average loss over 3317730 tokens: 3.368, valid loss/error: 4.824 54.06
New best model saved
Average loss over 3311859 tokens: 3.340, valid loss/error: 4.759 53.39
New best model saved
Average loss over 3313717 tokens: 3.323, valid loss/error: 4.741 52.91
New best model saved
Average loss over 3315477 tokens: 3.306, valid loss/error: 4.750 52.76
New best model saved
Average loss over 1045301 tokens: 3.296
Epoch: 2, train loss: 3.347, valid loss/error: 4.731 52.56
New best model saved
Average loss over 3311711 tokens: 3.248, valid loss/error: 4.701 52.15
New best model saved
Average loss over 3309770 tokens: 3.251, valid loss/error: 4.694 52.26
New best model saved
Average loss over 3318710 tokens: 3.244, valid loss/error: 4.678 51.99
New best model saved
Average loss over 3319872 tokens: 3.244, valid loss/error: 4.682 51.84
New best model saved
Average loss over 3310351 tokens: 3.234, valid loss/error: 4.660 51.91
New best model saved
Average loss over 1046682 tokens: 3.232
Epoch: 3, train loss: 3.243, valid loss/error: 4.654 51.54
New best model saved
Average loss over 3313541 tokens: 3.197, valid loss/error: 4.650 51.40
New best model saved
Average loss over 3312247 tokens: 3.206, valid loss/error: 4.624 51.09
New best model saved
Average loss over 3319485 tokens: 3.204, valid loss/error: 4.644 51.39
Average loss over 3315667 tokens: 3.206, valid loss/error: 4.629 51.18
Average loss over 173547 tokens: 3.196
Epoch: 4, train loss: 3.203, valid loss/error: 4.606 51.12
New best model saved
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.528 100.00
Initial model saved
Average loss over 22575039 tokens: 8.517, valid loss/error: 7.147 88.79
New best model saved
Average loss over 22529148 tokens: 6.337, valid loss/error: 5.924 77.74
New best model saved
Average loss over 22507425 tokens: 5.229, valid loss/error: 4.859 63.11
New best model saved
Average loss over 22516640 tokens: 4.254, valid loss/error: 4.026 50.37
New best model saved
Average loss over 22495071 tokens: 3.688, valid loss/error: 3.642 44.64
New best model saved
Average loss over 22563214 tokens: 3.436, valid loss/error: 3.450 41.88
New best model saved
Average loss over 22545932 tokens: 3.283, valid loss/error: 3.328 40.03
New best model saved
Average loss over 22507165 tokens: 3.188, valid loss/error: 3.240 38.57
New best model saved
Average loss over 22567725 tokens: 3.139, valid loss/error: 3.177 37.91
New best model saved
Average loss over 22556070 tokens: 3.075, valid loss/error: 3.136 37.28
New best model saved
Average loss over 22569083 tokens: 3.033, valid loss/error: 3.088 36.53
New best model saved
Average loss over 22580758 tokens: 2.981, valid loss/error: 3.051 36.19
New best model saved
Average loss over 22588819 tokens: 2.972, valid loss/error: 3.010 35.45
New best model saved
Average loss over 22551387 tokens: 2.928, valid loss/error: 2.981 35.20
New best model saved
Average loss over 22468270 tokens: 2.888, valid loss/error: 2.965 34.59
New best model saved
Average loss over 22518991 tokens: 2.872, valid loss/error: 2.944 34.33
New best model saved
Average loss over 22543834 tokens: 2.851, valid loss/error: 2.926 34.12
New best model saved
Average loss over 22497122 tokens: 2.856, valid loss/error: 2.908 33.82
New best model saved
Average loss over 22532906 tokens: 2.839, valid loss/error: 2.894 33.65
New best model saved
Average loss over 22504157 tokens: 2.825, valid loss/error: 2.888 33.46
New best model saved
Average loss over 22547128 tokens: 2.824, valid loss/error: 2.871 33.40
New best model saved
Average loss over 22557857 tokens: 2.803, valid loss/error: 2.861 33.16
New best model saved
Average loss over 22539008 tokens: 2.793, valid loss/error: 2.856 33.01
New best model saved
Average loss over 22550284 tokens: 2.787, valid loss/error: 2.845 32.97
New best model saved
Average loss over 22568622 tokens: 2.785, valid loss/error: 2.840 32.83
New best model saved
Average loss over 22617568 tokens: 2.776, valid loss/error: 2.827 32.74
New best model saved
Average loss over 22569560 tokens: 2.770, valid loss/error: 2.827 32.51
New best model saved
Average loss over 22574297 tokens: 2.762, valid loss/error: 2.813 32.44
New best model saved
Average loss over 22604572 tokens: 2.771, valid loss/error: 2.810 32.27
New best model saved
Average loss over 22558644 tokens: 2.747, valid loss/error: 2.805 32.24
New best model saved
Average loss over 22598206 tokens: 2.747, valid loss/error: 2.799 32.12
New best model saved
Average loss over 22567322 tokens: 2.749, valid loss/error: 2.789 32.07
New best model saved
Average loss over 22529100 tokens: 2.742, valid loss/error: 2.787 31.83
New best model saved
Average loss over 22569003 tokens: 2.740, valid loss/error: 2.779 31.88
New best model saved
Average loss over 22621292 tokens: 2.724, valid loss/error: 2.776 31.76
New best model saved
Average loss over 22530223 tokens: 2.722, valid loss/error: 2.771 31.77
New best model saved
Average loss over 22577188 tokens: 2.720, valid loss/error: 2.772 31.69
New best model saved
Average loss over 22432687 tokens: 2.709, valid loss/error: 2.765 31.56
New best model saved
Average loss over 22536705 tokens: 2.723, valid loss/error: 2.755 31.45
New best model saved
Average loss over 22543562 tokens: 2.708, valid loss/error: 2.753 31.36
New best model saved
Average loss over 22559759 tokens: 2.706, valid loss/error: 2.752 31.34
New best model saved
Average loss over 22555398 tokens: 2.704, valid loss/error: 2.756 31.32
New best model saved
Average loss over 22533798 tokens: 2.696, valid loss/error: 2.751 31.37
New best model saved
Average loss over 22581979 tokens: 2.716, valid loss/error: 2.743 31.27
New best model saved
Average loss over 22589665 tokens: 2.694, valid loss/error: 2.740 31.27
New best model saved
Average loss over 22530945 tokens: 2.701, valid loss/error: 2.734 31.13
New best model saved
Average loss over 22526056 tokens: 2.698, valid loss/error: 2.732 31.12
New best model saved
Average loss over 22573218 tokens: 2.688, valid loss/error: 2.731 31.07
New best model saved
Average loss over 22572815 tokens: 2.691, valid loss/error: 2.731 31.09
New best model saved
Average loss over 22575558 tokens: 2.689, valid loss/error: 2.725 31.01
New best model saved
Average loss over 22584184 tokens: 2.667, valid loss/error: 2.721 30.96
New best model saved
Average loss over 22520716 tokens: 2.674, valid loss/error: 2.725 31.02
Average loss over 22516454 tokens: 2.681, valid loss/error: 2.721 30.91
New best model saved
Average loss over 22543662 tokens: 2.678, valid loss/error: 2.720 30.80
New best model saved
Average loss over 22545625 tokens: 2.668, valid loss/error: 2.716 30.94
New best model saved
Average loss over 22547025 tokens: 2.676, valid loss/error: 2.716 30.83
Average loss over 22521701 tokens: 2.666, valid loss/error: 2.711 30.67
New best model saved
Average loss over 22555973 tokens: 2.656, valid loss/error: 2.710 30.76
New best model saved
Average loss over 7103002 tokens: 2.652
Epoch: 1, train loss: 3.043, valid loss/error: 2.706 30.79
New best model saved
Average loss over 22580281 tokens: 2.666, valid loss/error: 2.709 30.74
Average loss over 22548085 tokens: 2.651, valid loss/error: 2.710 30.63
New best model saved
Average loss over 22523391 tokens: 2.658, valid loss/error: 2.708 30.58
New best model saved
Average loss over 22563176 tokens: 2.656, valid loss/error: 2.702 30.62
New best model saved
Average loss over 22558897 tokens: 2.662, valid loss/error: 2.705 30.53
New best model saved
Average loss over 22606985 tokens: 2.657, valid loss/error: 2.698 30.50
New best model saved
Average loss over 22606263 tokens: 2.649, valid loss/error: 2.699 30.51
Average loss over 22568759 tokens: 2.649, valid loss/error: 2.696 30.44
New best model saved
Average loss over 22544064 tokens: 2.638, valid loss/error: 2.695 30.47
New best model saved
Average loss over 22486495 tokens: 2.642, valid loss/error: 2.693 30.47
New best model saved
Average loss over 22493821 tokens: 2.644, valid loss/error: 2.690 30.37
New best model saved
Average loss over 22495491 tokens: 2.646, valid loss/error: 2.693 30.47
Average loss over 22500775 tokens: 2.632, valid loss/error: 2.691 30.41
Average loss over 22543794 tokens: 2.632, valid loss/error: 2.691 30.33
New best model saved
Average loss over 22514986 tokens: 2.646, valid loss/error: 2.689 30.30
New best model saved
Average loss over 22571008 tokens: 2.639, valid loss/error: 2.684 30.29
New best model saved
Average loss over 22531927 tokens: 2.644, valid loss/error: 2.680 30.31
New best model saved
Average loss over 22565075 tokens: 2.635, valid loss/error: 2.685 30.26
New best model saved
Average loss over 22524083 tokens: 2.642, valid loss/error: 2.683 30.19
New best model saved
Average loss over 22470230 tokens: 2.626, valid loss/error: 2.686 30.21
Average loss over 22498589 tokens: 2.635, valid loss/error: 2.677 30.24
New best model saved
Average loss over 22543891 tokens: 2.644, valid loss/error: 2.675 30.16
New best model saved
Average loss over 22561559 tokens: 2.638, valid loss/error: 2.678 30.20
Average loss over 22593206 tokens: 2.642, valid loss/error: 2.676 30.09
New best model saved
Average loss over 22536248 tokens: 2.630, valid loss/error: 2.673 30.13
New best model saved
Average loss over 22532054 tokens: 2.628, valid loss/error: 2.674 30.11
Average loss over 22561832 tokens: 2.641, valid loss/error: 2.674 30.08
New best model saved
Average loss over 22567870 tokens: 2.636, valid loss/error: 2.669 30.02
New best model saved
Average loss over 22571186 tokens: 2.641, valid loss/error: 2.670 30.06
Average loss over 22499891 tokens: 2.626, valid loss/error: 2.669 30.01
New best model saved
Average loss over 22514393 tokens: 2.628, valid loss/error: 2.670 29.96
New best model saved
Average loss over 22531407 tokens: 2.624, valid loss/error: 2.670 30.04
Average loss over 22574300 tokens: 2.627, valid loss/error: 2.661 29.92
New best model saved
Average loss over 22542842 tokens: 2.625, valid loss/error: 2.666 30.00
Average loss over 22548633 tokens: 2.622, valid loss/error: 2.664 29.90
New best model saved
Average loss over 22560258 tokens: 2.625, valid loss/error: 2.661 29.92
Average loss over 22561615 tokens: 2.620, valid loss/error: 2.660 29.91
New best model saved
Average loss over 22524845 tokens: 2.628, valid loss/error: 2.664 29.83
New best model saved
Average loss over 22524520 tokens: 2.629, valid loss/error: 2.661 29.90
Average loss over 22564468 tokens: 2.630, valid loss/error: 2.661 29.87
Average loss over 22567976 tokens: 2.617, valid loss/error: 2.660 29.91
Average loss over 22536071 tokens: 2.621, valid loss/error: 2.660 29.89
Average loss over 22555774 tokens: 2.624, valid loss/error: 2.660 29.84
Average loss over 22587031 tokens: 2.620, valid loss/error: 2.659 29.85
New best model saved
Average loss over 22592547 tokens: 2.610, valid loss/error: 2.654 29.72
New best model saved
Average loss over 22601185 tokens: 2.616, valid loss/error: 2.657 29.73
Average loss over 22618570 tokens: 2.619, valid loss/error: 2.653 29.81
New best model saved
Average loss over 22519755 tokens: 2.602, valid loss/error: 2.655 29.84
Average loss over 22590116 tokens: 2.610, valid loss/error: 2.658 29.76
Average loss over 22627877 tokens: 2.628, valid loss/error: 2.655 29.75
Average loss over 22562596 tokens: 2.611, valid loss/error: 2.653 29.71
New best model saved
Average loss over 22529082 tokens: 2.606, valid loss/error: 2.650 29.79
New best model saved
Average loss over 22548173 tokens: 2.607, valid loss/error: 2.650 29.68
New best model saved
Average loss over 22583712 tokens: 2.604, valid loss/error: 2.650 29.64
New best model saved
Average loss over 22544723 tokens: 2.609, valid loss/error: 2.650 29.67
New best model saved
Average loss over 22489104 tokens: 2.604, valid loss/error: 2.647 29.72
New best model saved
Average loss over 22519490 tokens: 2.604, valid loss/error: 2.648 29.69
Average loss over 22531859 tokens: 2.609, valid loss/error: 2.646 29.71
New best model saved
Average loss over 7132283 tokens: 2.607
Epoch: 2, train loss: 2.630, valid loss/error: 2.645 29.63
New best model saved
Average loss over 22461742 tokens: 2.586, valid loss/error: 2.648 29.60
New best model saved
Average loss over 22576058 tokens: 2.612, valid loss/error: 2.648 29.71
Average loss over 22571123 tokens: 2.602, valid loss/error: 2.646 29.69
Average loss over 22538261 tokens: 2.605, valid loss/error: 2.645 29.64
New best model saved
Average loss over 22542870 tokens: 2.598, valid loss/error: 2.645 29.61
Average loss over 22545283 tokens: 2.599, valid loss/error: 2.644 29.65
New best model saved
Average loss over 22531889 tokens: 2.596, valid loss/error: 2.643 29.56
New best model saved
Average loss over 22591095 tokens: 2.603, valid loss/error: 2.644 29.55
New best model saved
Average loss over 22575618 tokens: 2.591, valid loss/error: 2.638 29.47
New best model saved
Average loss over 22513701 tokens: 2.592, valid loss/error: 2.640 29.66
Average loss over 22522526 tokens: 2.588, valid loss/error: 2.645 29.58
Average loss over 22614615 tokens: 2.599, valid loss/error: 2.642 29.50
Average loss over 22498015 tokens: 2.594, valid loss/error: 2.637 29.62
New best model saved
Average loss over 22500797 tokens: 2.589, valid loss/error: 2.639 29.53
Average loss over 22570542 tokens: 2.591, valid loss/error: 2.639 29.47
Average loss over 22512972 tokens: 2.591, valid loss/error: 2.635 29.56
New best model saved
Average loss over 22525973 tokens: 2.596, valid loss/error: 2.640 29.60
Average loss over 22552522 tokens: 2.588, valid loss/error: 2.635 29.54
New best model saved
Average loss over 22587187 tokens: 2.608, valid loss/error: 2.638 29.47
Average loss over 22538209 tokens: 2.590, valid loss/error: 2.635 29.45
New best model saved
Average loss over 22605889 tokens: 2.602, valid loss/error: 2.638 29.51
Average loss over 22548470 tokens: 2.603, valid loss/error: 2.642 29.51
Average loss over 22546846 tokens: 2.618, valid loss/error: 2.634 29.48
New best model saved
Average loss over 22564724 tokens: 2.588, valid loss/error: 2.636 29.43
New best model saved
Average loss over 22529341 tokens: 2.588, valid loss/error: 2.633 29.35
New best model saved
Average loss over 22592434 tokens: 2.601, valid loss/error: 2.633 29.45
New best model saved
Average loss over 22508677 tokens: 2.597, valid loss/error: 2.631 29.45
New best model saved
Average loss over 22550106 tokens: 2.598, valid loss/error: 2.635 29.46
Average loss over 22538344 tokens: 2.592, valid loss/error: 2.630 29.47
New best model saved
Average loss over 22528554 tokens: 2.599, valid loss/error: 2.633 29.37
Average loss over 22500331 tokens: 2.593, valid loss/error: 2.633 29.50
Average loss over 22547382 tokens: 2.601, valid loss/error: 2.631 29.42
Average loss over 22612821 tokens: 2.593, valid loss/error: 2.633 29.39
Average loss over 22583558 tokens: 2.601, valid loss/error: 2.632 29.37
Average loss over 22557252 tokens: 2.593, valid loss/error: 2.629 29.37
New best model saved
Average loss over 22516902 tokens: 2.603, valid loss/error: 2.631 29.33
New best model saved
Average loss over 22490416 tokens: 2.594, valid loss/error: 2.628 29.37
New best model saved
Average loss over 22535657 tokens: 2.594, valid loss/error: 2.625 29.36
New best model saved
Average loss over 22647111 tokens: 2.584, valid loss/error: 2.630 29.46
Average loss over 22468980 tokens: 2.580, valid loss/error: 2.626 29.33
Average loss over 22573793 tokens: 2.587, valid loss/error: 2.624 29.30
New best model saved
Average loss over 22561495 tokens: 2.594, valid loss/error: 2.630 29.41
Average loss over 22546972 tokens: 2.584, valid loss/error: 2.628 29.31
Average loss over 22557498 tokens: 2.585, valid loss/error: 2.627 29.36
Average loss over 22571675 tokens: 2.588, valid loss/error: 2.623 29.27
New best model saved
Average loss over 22540818 tokens: 2.584, valid loss/error: 2.626 29.32
Average loss over 22548340 tokens: 2.575, valid loss/error: 2.626 29.33
Average loss over 22604072 tokens: 2.582, valid loss/error: 2.625 29.34
Average loss over 22583687 tokens: 2.590, valid loss/error: 2.625 29.29
Average loss over 22527113 tokens: 2.577, valid loss/error: 2.620 29.22
New best model saved
Average loss over 22502099 tokens: 2.579, valid loss/error: 2.626 29.37
Average loss over 22515832 tokens: 2.590, valid loss/error: 2.624 29.29
Average loss over 22515614 tokens: 2.589, valid loss/error: 2.621 29.33
Average loss over 22568374 tokens: 2.586, valid loss/error: 2.622 29.31
Average loss over 22564074 tokens: 2.587, valid loss/error: 2.624 29.27
Average loss over 22575845 tokens: 2.578, valid loss/error: 2.624 29.18
New best model saved
Average loss over 22555381 tokens: 2.585, valid loss/error: 2.628 29.31
Average loss over 22577424 tokens: 2.571, valid loss/error: 2.619 29.17
New best model saved
Average loss over 7114218 tokens: 2.567
Epoch: 3, train loss: 2.592, valid loss/error: 2.624 29.23
Average loss over 22509831 tokens: 2.573, valid loss/error: 2.620 29.25
Average loss over 22555918 tokens: 2.587, valid loss/error: 2.626 29.31
Average loss over 22572203 tokens: 2.581, valid loss/error: 2.619 29.16
New best model saved
Average loss over 22559850 tokens: 2.576, valid loss/error: 2.622 29.27
Average loss over 22544020 tokens: 2.570, valid loss/error: 2.621 29.24
Average loss over 22576442 tokens: 2.577, valid loss/error: 2.623 29.19
Average loss over 22576005 tokens: 2.584, valid loss/error: 2.621 29.20
Average loss over 22536940 tokens: 2.582, valid loss/error: 2.618 29.19
New best model saved
Average loss over 22563006 tokens: 2.574, valid loss/error: 2.621 29.16
Average loss over 22611826 tokens: 2.573, valid loss/error: 2.622 29.20
Average loss over 22578836 tokens: 2.574, valid loss/error: 2.619 29.17
Average loss over 22555909 tokens: 2.580, valid loss/error: 2.616 29.14
New best model saved
Average loss over 22503825 tokens: 2.573, valid loss/error: 2.617 29.29
Average loss over 22577322 tokens: 2.570, valid loss/error: 2.617 29.21
Average loss over 22555979 tokens: 2.589, valid loss/error: 2.614 29.26
New best model saved
Average loss over 22566844 tokens: 2.578, valid loss/error: 2.618 29.23
Average loss over 22546092 tokens: 2.579, valid loss/error: 2.615 29.15
Average loss over 22479125 tokens: 2.576, valid loss/error: 2.614 29.14
New best model saved
Average loss over 22489241 tokens: 2.572, valid loss/error: 2.617 29.15
Average loss over 22538750 tokens: 2.570, valid loss/error: 2.613 29.15
New best model saved
Average loss over 22519297 tokens: 2.568, valid loss/error: 2.616 29.16
Average loss over 22535205 tokens: 2.561, valid loss/error: 2.616 29.17
Average loss over 22546578 tokens: 2.577, valid loss/error: 2.613 29.16
New best model saved
Average loss over 22551783 tokens: 2.569, valid loss/error: 2.617 29.20
Average loss over 22535425 tokens: 2.570, valid loss/error: 2.614 29.23
Average loss over 22613165 tokens: 2.574, valid loss/error: 2.615 29.18
Average loss over 22576829 tokens: 2.569, valid loss/error: 2.616 29.13
New best model saved
Average loss over 22607142 tokens: 2.574, valid loss/error: 2.612 29.16
New best model saved
Average loss over 22534058 tokens: 2.572, valid loss/error: 2.613 29.19
Average loss over 22536139 tokens: 2.570, valid loss/error: 2.612 29.19
New best model saved
Average loss over 22565372 tokens: 2.575, valid loss/error: 2.610 29.09
New best model saved
Average loss over 22607242 tokens: 2.570, valid loss/error: 2.612 29.14
Average loss over 22524312 tokens: 2.576, valid loss/error: 2.611 29.13
Average loss over 22581868 tokens: 2.575, valid loss/error: 2.610 29.09
New best model saved
Average loss over 22568923 tokens: 2.562, valid loss/error: 2.611 29.09
Average loss over 22510970 tokens: 2.576, valid loss/error: 2.611 29.07
New best model saved
Average loss over 22528203 tokens: 2.582, valid loss/error: 2.614 29.07
Average loss over 22540391 tokens: 2.571, valid loss/error: 2.610 29.09
Average loss over 22587829 tokens: 2.579, valid loss/error: 2.611 29.11
Average loss over 22534339 tokens: 2.578, valid loss/error: 2.613 29.10
Average loss over 22565464 tokens: 2.569, valid loss/error: 2.612 29.10
Average loss over 22593334 tokens: 2.570, valid loss/error: 2.606 29.14
New best model saved
Average loss over 22533179 tokens: 2.568, valid loss/error: 2.610 29.08
Average loss over 22574568 tokens: 2.576, valid loss/error: 2.608 29.02
New best model saved
Average loss over 22515109 tokens: 2.570, valid loss/error: 2.607 28.99
New best model saved
Average loss over 22578936 tokens: 2.567, valid loss/error: 2.605 29.00
New best model saved
Average loss over 22512066 tokens: 2.567, valid loss/error: 2.608 29.10
Average loss over 22564989 tokens: 2.569, valid loss/error: 2.606 29.06
Average loss over 22451928 tokens: 2.562, valid loss/error: 2.612 28.99
New best model saved
Average loss over 22581911 tokens: 2.572, valid loss/error: 2.609 29.11
Average loss over 22519738 tokens: 2.564, valid loss/error: 2.610 29.07
Average loss over 22530063 tokens: 2.572, valid loss/error: 2.611 29.09
Average loss over 22520720 tokens: 2.579, valid loss/error: 2.607 29.03
Average loss over 22603940 tokens: 2.569, valid loss/error: 2.606 29.04
Average loss over 22581651 tokens: 2.563, valid loss/error: 2.608 28.99
Average loss over 22518017 tokens: 2.565, valid loss/error: 2.608 29.02
Average loss over 22513965 tokens: 2.566, valid loss/error: 2.613 29.07
Average loss over 22493816 tokens: 2.578, valid loss/error: 2.610 29.03
Average loss over 7092689 tokens: 2.554
Epoch: 4, train loss: 2.573, valid loss/error: 2.608 29.09
Average loss over 22500310 tokens: 2.558, valid loss/error: 2.608 28.98
New best model saved
Average loss over 22572837 tokens: 2.566, valid loss/error: 2.604 28.98
New best model saved
Average loss over 22499409 tokens: 2.557, valid loss/error: 2.606 28.97
New best model saved
Average loss over 22566734 tokens: 2.566, valid loss/error: 2.605 28.98
Average loss over 22584068 tokens: 2.572, valid loss/error: 2.606 29.05
Average loss over 22530998 tokens: 2.559, valid loss/error: 2.614 28.96
New best model saved
Average loss over 22631323 tokens: 2.562, valid loss/error: 2.607 28.96
Average loss over 22527737 tokens: 2.557, valid loss/error: 2.608 29.03
Average loss over 22523349 tokens: 2.546, valid loss/error: 2.602 28.97
New best model saved
Average loss over 22562739 tokens: 2.557, valid loss/error: 2.606 28.92
New best model saved
Average loss over 22567658 tokens: 2.568, valid loss/error: 2.605 29.02
Average loss over 22503201 tokens: 2.552, valid loss/error: 2.604 28.98
Average loss over 22474623 tokens: 2.553, valid loss/error: 2.606 29.10
Average loss over 22550967 tokens: 2.562, valid loss/error: 2.603 29.02
Average loss over 22613242 tokens: 2.560, valid loss/error: 2.607 29.01
Average loss over 22504234 tokens: 2.551, valid loss/error: 2.606 29.00
Average loss over 22538774 tokens: 2.564, valid loss/error: 2.606 29.04
Average loss over 22600725 tokens: 2.565, valid loss/error: 2.603 29.03
Average loss over 22546229 tokens: 2.559, valid loss/error: 2.609 29.03
Average loss over 22549186 tokens: 2.558, valid loss/error: 2.602 28.95
New best model saved
Average loss over 22553757 tokens: 2.557, valid loss/error: 2.607 28.97
Average loss over 22527003 tokens: 2.562, valid loss/error: 2.602 28.96
New best model saved
Average loss over 22574971 tokens: 2.557, valid loss/error: 2.599 28.94
New best model saved
Average loss over 22575736 tokens: 2.564, valid loss/error: 2.601 29.04
Average loss over 22543232 tokens: 2.557, valid loss/error: 2.604 29.00
Average loss over 22604254 tokens: 2.577, valid loss/error: 2.604 29.01
Average loss over 22548136 tokens: 2.573, valid loss/error: 2.601 28.96
Average loss over 22542396 tokens: 2.569, valid loss/error: 2.600 28.96
Average loss over 22520162 tokens: 2.556, valid loss/error: 2.595 28.87
New best model saved
Average loss over 22593390 tokens: 2.555, valid loss/error: 2.597 28.86
New best model saved
Average loss over 22554922 tokens: 2.565, valid loss/error: 2.601 28.99
Average loss over 22603590 tokens: 2.564, valid loss/error: 2.603 28.96
Average loss over 22593760 tokens: 2.554, valid loss/error: 2.602 28.94
Average loss over 22532899 tokens: 2.558, valid loss/error: 2.598 28.87
Average loss over 22506786 tokens: 2.555, valid loss/error: 2.600 28.91
Average loss over 22497063 tokens: 2.558, valid loss/error: 2.601 28.97
Average loss over 22567599 tokens: 2.570, valid loss/error: 2.602 28.87
Average loss over 22596799 tokens: 2.571, valid loss/error: 2.600 28.85
New best model saved
Average loss over 22595791 tokens: 2.563, valid loss/error: 2.600 28.88
Average loss over 22492459 tokens: 2.560, valid loss/error: 2.601 28.90
Average loss over 22557436 tokens: 2.550, valid loss/error: 2.600 28.94
Average loss over 22572952 tokens: 2.559, valid loss/error: 2.603 28.92
Average loss over 22527452 tokens: 2.562, valid loss/error: 2.595 28.89
Average loss over 22536292 tokens: 2.551, valid loss/error: 2.599 28.89
Average loss over 22535050 tokens: 2.551, valid loss/error: 2.597 28.87
Average loss over 22572045 tokens: 2.562, valid loss/error: 2.598 28.84
New best model saved
Average loss over 22511870 tokens: 2.570, valid loss/error: 2.598 28.82
New best model saved
Average loss over 22486052 tokens: 2.559, valid loss/error: 2.596 28.86
Average loss over 22540721 tokens: 2.562, valid loss/error: 2.594 28.84
New best model saved
Average loss over 22552954 tokens: 2.567, valid loss/error: 2.596 28.91
Average loss over 22549738 tokens: 2.562, valid loss/error: 2.599 28.96
Average loss over 22569003 tokens: 2.562, valid loss/error: 2.597 28.89
Average loss over 22577469 tokens: 2.570, valid loss/error: 2.599 28.87
Average loss over 22549325 tokens: 2.562, valid loss/error: 2.598 28.93
Average loss over 22514510 tokens: 2.566, valid loss/error: 2.594 28.90
Average loss over 22557439 tokens: 2.564, valid loss/error: 2.594 28.90
New best model saved
Average loss over 22487716 tokens: 2.555, valid loss/error: 2.595 28.86
Average loss over 22558663 tokens: 2.553, valid loss/error: 2.597 28.84
Average loss over 7119382 tokens: 2.541
Epoch: 5, train loss: 2.561, valid loss/error: 2.597 28.83
Average loss over 22568878 tokens: 2.557, valid loss/error: 2.594 28.85
Average loss over 22531637 tokens: 2.548, valid loss/error: 2.596 28.81
New best model saved
Average loss over 22532649 tokens: 2.552, valid loss/error: 2.595 28.86
Average loss over 22602758 tokens: 2.560, valid loss/error: 2.595 28.86
Average loss over 22540230 tokens: 2.559, valid loss/error: 2.599 28.86
Average loss over 22516977 tokens: 2.543, valid loss/error: 2.596 28.88
Average loss over 22524321 tokens: 2.551, valid loss/error: 2.596 28.88
Average loss over 22567065 tokens: 2.558, valid loss/error: 2.594 28.89
Average loss over 22541151 tokens: 2.557, valid loss/error: 2.594 28.86
Average loss over 22579860 tokens: 2.559, valid loss/error: 2.598 28.82
Average loss over 22541556 tokens: 2.544, valid loss/error: 2.593 28.77
New best model saved
Average loss over 22581702 tokens: 2.541, valid loss/error: 2.596 28.78
Average loss over 22586280 tokens: 2.551, valid loss/error: 2.594 28.80
Average loss over 22581196 tokens: 2.544, valid loss/error: 2.593 28.79
Average loss over 22514252 tokens: 2.551, valid loss/error: 2.592 28.71
New best model saved
Average loss over 22534967 tokens: 2.543, valid loss/error: 2.592 28.77
New best model saved
Average loss over 22565274 tokens: 2.563, valid loss/error: 2.594 28.75
Average loss over 22561654 tokens: 2.549, valid loss/error: 2.594 28.75
Average loss over 22570947 tokens: 2.560, valid loss/error: 2.589 28.77
New best model saved
Average loss over 22573298 tokens: 2.554, valid loss/error: 2.593 28.84
Average loss over 22539743 tokens: 2.553, valid loss/error: 2.594 28.77
Average loss over 22499498 tokens: 2.545, valid loss/error: 2.597 28.70
New best model saved
Average loss over 22475179 tokens: 2.547, valid loss/error: 2.591 28.90
Average loss over 22566480 tokens: 2.553, valid loss/error: 2.596 28.86
Average loss over 22575896 tokens: 2.557, valid loss/error: 2.592 28.79
Average loss over 22527224 tokens: 2.546, valid loss/error: 2.592 28.79
Average loss over 22449016 tokens: 2.554, valid loss/error: 2.594 28.77
Average loss over 22560394 tokens: 2.551, valid loss/error: 2.592 28.75
Average loss over 22583575 tokens: 2.552, valid loss/error: 2.592 28.80
Average loss over 22537444 tokens: 2.545, valid loss/error: 2.595 28.81
Average loss over 22602413 tokens: 2.561, valid loss/error: 2.593 28.77
Average loss over 22573967 tokens: 2.536, valid loss/error: 2.590 28.73
Average loss over 22544406 tokens: 2.563, valid loss/error: 2.592 28.77
Average loss over 22459853 tokens: 2.549, valid loss/error: 2.592 28.64
New best model saved
Average loss over 22581481 tokens: 2.561, valid loss/error: 2.591 28.81
Average loss over 22567847 tokens: 2.553, valid loss/error: 2.588 28.75
New best model saved
Average loss over 22601332 tokens: 2.559, valid loss/error: 2.592 28.67
Average loss over 22530823 tokens: 2.557, valid loss/error: 2.590 28.80
Average loss over 22526739 tokens: 2.548, valid loss/error: 2.590 28.76
Average loss over 22535157 tokens: 2.548, valid loss/error: 2.592 28.78
Average loss over 22485125 tokens: 2.551, valid loss/error: 2.590 28.77
Average loss over 22549252 tokens: 2.555, valid loss/error: 2.593 28.81
Average loss over 22563616 tokens: 2.555, valid loss/error: 2.592 28.65
Average loss over 22539640 tokens: 2.548, valid loss/error: 2.591 28.75
Average loss over 22579700 tokens: 2.561, valid loss/error: 2.592 28.81
Average loss over 22562074 tokens: 2.546, valid loss/error: 2.592 28.76
Average loss over 22584627 tokens: 2.558, valid loss/error: 2.591 28.80
Average loss over 22510491 tokens: 2.550, valid loss/error: 2.592 28.70
Average loss over 22558661 tokens: 2.549, valid loss/error: 2.591 28.68
Average loss over 22520919 tokens: 2.553, valid loss/error: 2.590 28.66
Average loss over 22513051 tokens: 2.544, valid loss/error: 2.588 28.62
New best model saved
Average loss over 22581393 tokens: 2.550, valid loss/error: 2.586 28.67
New best model saved
Average loss over 22569832 tokens: 2.563, valid loss/error: 2.585 28.67
New best model saved
Average loss over 22589781 tokens: 2.553, valid loss/error: 2.590 28.72
Average loss over 22504519 tokens: 2.549, valid loss/error: 2.589 28.70
Average loss over 22588039 tokens: 2.553, valid loss/error: 2.589 28.62
Average loss over 22568310 tokens: 2.555, valid loss/error: 2.587 28.64
Average loss over 22515036 tokens: 2.550, valid loss/error: 2.592 28.69
Average loss over 7109932 tokens: 2.549
Epoch: 6, train loss: 2.552, valid loss/error: 2.589 28.65
Average loss over 22532968 tokens: 2.543, valid loss/error: 2.588 28.68
Average loss over 22570194 tokens: 2.543, valid loss/error: 2.587 28.68
Average loss over 22541066 tokens: 2.537, valid loss/error: 2.591 28.74
Average loss over 22529804 tokens: 2.538, valid loss/error: 2.587 28.69
Average loss over 22572134 tokens: 2.551, valid loss/error: 2.589 28.71
Average loss over 22491724 tokens: 2.554, valid loss/error: 2.587 28.63
Average loss over 22562604 tokens: 2.543, valid loss/error: 2.590 28.62
New best model saved
Average loss over 22579674 tokens: 2.555, valid loss/error: 2.587 28.65
Average loss over 22602716 tokens: 2.557, valid loss/error: 2.587 28.80
Average loss over 22557101 tokens: 2.547, valid loss/error: 2.589 28.70
Average loss over 22504331 tokens: 2.552, valid loss/error: 2.587 28.72
Average loss over 18470412 tokens: 2.564
Epoch: 7, train loss: 2.548, valid loss/error: 2.590 28.74
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_base_train.py
Design models with seed: 666666
Init lr: 6.176323555016365e-08, Dev Loss/Error: 10.528 100.00
Initial model saved
Average loss over 22575039 tokens: 8.517, valid loss/error: 7.147 88.79
New best model saved
Average loss over 22529148 tokens: 6.337, valid loss/error: 5.924 77.74
New best model saved
Average loss over 22507425 tokens: 5.229, valid loss/error: 4.859 63.11
New best model saved
Average loss over 22516640 tokens: 4.254, valid loss/error: 4.026 50.37
New best model saved
Average loss over 22495071 tokens: 3.688, valid loss/error: 3.642 44.64
New best model saved
Average loss over 22563214 tokens: 3.436, valid loss/error: 3.450 41.88
New best model saved
Average loss over 22545932 tokens: 3.283, valid loss/error: 3.328 40.03
New best model saved
Average loss over 22507165 tokens: 3.188, valid loss/error: 3.240 38.57
New best model saved
Average loss over 22567725 tokens: 3.139, valid loss/error: 3.177 37.91
New best model saved
Average loss over 22556070 tokens: 3.075, valid loss/error: 3.136 37.28
New best model saved
Average loss over 22569083 tokens: 3.033, valid loss/error: 3.088 36.53
New best model saved
Average loss over 22580758 tokens: 2.981, valid loss/error: 3.051 36.19
New best model saved
Average loss over 22588819 tokens: 2.972, valid loss/error: 3.010 35.45
New best model saved
Average loss over 22551387 tokens: 2.928, valid loss/error: 2.981 35.20
New best model saved
Average loss over 22468270 tokens: 2.888, valid loss/error: 2.965 34.59
New best model saved
Average loss over 22518991 tokens: 2.872, valid loss/error: 2.944 34.33
New best model saved
Average loss over 22543834 tokens: 2.851, valid loss/error: 2.926 34.12
New best model saved
Average loss over 22497122 tokens: 2.856, valid loss/error: 2.908 33.82
New best model saved
Average loss over 22532906 tokens: 2.839, valid loss/error: 2.894 33.65
New best model saved
Average loss over 22504157 tokens: 2.825, valid loss/error: 2.888 33.46
New best model saved
Average loss over 22547128 tokens: 2.824, valid loss/error: 2.871 33.40
New best model saved
Average loss over 22557857 tokens: 2.803, valid loss/error: 2.861 33.16
New best model saved
Average loss over 22539008 tokens: 2.793, valid loss/error: 2.856 33.01
New best model saved
Average loss over 22550284 tokens: 2.787, valid loss/error: 2.845 32.97
New best model saved
Average loss over 22568622 tokens: 2.785, valid loss/error: 2.840 32.83
New best model saved
Average loss over 22617568 tokens: 2.776, valid loss/error: 2.827 32.74
New best model saved
Average loss over 22569560 tokens: 2.770, valid loss/error: 2.827 32.51
New best model saved
Average loss over 22574297 tokens: 2.762, valid loss/error: 2.813 32.44
New best model saved
Average loss over 22604572 tokens: 2.771, valid loss/error: 2.810 32.27
New best model saved
Average loss over 22558644 tokens: 2.747, valid loss/error: 2.805 32.24
New best model saved
Average loss over 22598206 tokens: 2.747, valid loss/error: 2.799 32.12
New best model saved
Average loss over 22567322 tokens: 2.749, valid loss/error: 2.789 32.07
New best model saved
Average loss over 22529100 tokens: 2.742, valid loss/error: 2.787 31.83
New best model saved
Average loss over 22569003 tokens: 2.740, valid loss/error: 2.779 31.88
New best model saved
Average loss over 22621292 tokens: 2.724, valid loss/error: 2.776 31.76
New best model saved
Average loss over 22530223 tokens: 2.722, valid loss/error: 2.771 31.77
New best model saved
Average loss over 22577188 tokens: 2.720, valid loss/error: 2.772 31.69
New best model saved
Average loss over 22432687 tokens: 2.709, valid loss/error: 2.765 31.56
New best model saved
Average loss over 22536705 tokens: 2.723, valid loss/error: 2.755 31.45
New best model saved
Average loss over 22543562 tokens: 2.708, valid loss/error: 2.753 31.36
New best model saved
Average loss over 22559759 tokens: 2.706, valid loss/error: 2.752 31.34
New best model saved
Average loss over 22555398 tokens: 2.704, valid loss/error: 2.756 31.32
New best model saved
Average loss over 22533798 tokens: 2.696, valid loss/error: 2.751 31.37
New best model saved
Average loss over 22581979 tokens: 2.716, valid loss/error: 2.743 31.27
New best model saved
Average loss over 22589665 tokens: 2.694, valid loss/error: 2.740 31.27
New best model saved
Average loss over 22530945 tokens: 2.701, valid loss/error: 2.734 31.13
New best model saved
Average loss over 22526056 tokens: 2.698, valid loss/error: 2.732 31.12
New best model saved
Average loss over 22573218 tokens: 2.688, valid loss/error: 2.731 31.07
New best model saved
Average loss over 22572815 tokens: 2.691, valid loss/error: 2.731 31.09
New best model saved
Average loss over 22575558 tokens: 2.689, valid loss/error: 2.725 31.01
New best model saved
Average loss over 22584184 tokens: 2.667, valid loss/error: 2.721 30.96
New best model saved
Average loss over 22520716 tokens: 2.674, valid loss/error: 2.725 31.02
Average loss over 22516454 tokens: 2.681, valid loss/error: 2.721 30.91
New best model saved
Average loss over 22543662 tokens: 2.678, valid loss/error: 2.720 30.80
New best model saved
Average loss over 22545625 tokens: 2.668, valid loss/error: 2.716 30.94
New best model saved
Average loss over 22547025 tokens: 2.676, valid loss/error: 2.716 30.83
Average loss over 22521701 tokens: 2.666, valid loss/error: 2.711 30.67
New best model saved
Average loss over 22555973 tokens: 2.656, valid loss/error: 2.710 30.76
New best model saved
Average loss over 7103002 tokens: 2.652
Epoch: 1, train loss: 3.043, valid loss/error: 2.706 30.79
New best model saved
Average loss over 22580281 tokens: 2.666, valid loss/error: 2.709 30.74
Average loss over 22548085 tokens: 2.651, valid loss/error: 2.710 30.63
New best model saved
Average loss over 22523391 tokens: 2.658, valid loss/error: 2.708 30.58
New best model saved
Average loss over 22563176 tokens: 2.656, valid loss/error: 2.702 30.62
New best model saved
Average loss over 22558897 tokens: 2.662, valid loss/error: 2.705 30.53
New best model saved
Average loss over 22606985 tokens: 2.657, valid loss/error: 2.698 30.50
New best model saved
Average loss over 22606263 tokens: 2.649, valid loss/error: 2.699 30.51
Average loss over 22568759 tokens: 2.649, valid loss/error: 2.696 30.44
New best model saved
Average loss over 22544064 tokens: 2.638, valid loss/error: 2.695 30.47
New best model saved
Average loss over 22486495 tokens: 2.642, valid loss/error: 2.693 30.47
New best model saved
Average loss over 22493821 tokens: 2.644, valid loss/error: 2.690 30.37
New best model saved
Average loss over 22495491 tokens: 2.646, valid loss/error: 2.693 30.47
Average loss over 22500775 tokens: 2.632, valid loss/error: 2.691 30.41
Average loss over 22543794 tokens: 2.632, valid loss/error: 2.691 30.33
New best model saved
Average loss over 22514986 tokens: 2.646, valid loss/error: 2.689 30.30
New best model saved
Average loss over 22571008 tokens: 2.639, valid loss/error: 2.684 30.29
New best model saved
Average loss over 22531927 tokens: 2.644, valid loss/error: 2.680 30.31
New best model saved
Average loss over 22565075 tokens: 2.635, valid loss/error: 2.685 30.26
New best model saved
Average loss over 22524083 tokens: 2.642, valid loss/error: 2.683 30.19
New best model saved
Average loss over 22470230 tokens: 2.626, valid loss/error: 2.686 30.21
Average loss over 22498589 tokens: 2.635, valid loss/error: 2.677 30.24
New best model saved
Average loss over 22543891 tokens: 2.644, valid loss/error: 2.675 30.16
New best model saved
Average loss over 22561559 tokens: 2.638, valid loss/error: 2.678 30.20
Average loss over 22593206 tokens: 2.642, valid loss/error: 2.676 30.09
New best model saved
Average loss over 22536248 tokens: 2.630, valid loss/error: 2.673 30.13
New best model saved
Average loss over 22532054 tokens: 2.628, valid loss/error: 2.674 30.11
Average loss over 22561832 tokens: 2.641, valid loss/error: 2.674 30.08
New best model saved
Average loss over 22567870 tokens: 2.636, valid loss/error: 2.669 30.02
New best model saved
Average loss over 22571186 tokens: 2.641, valid loss/error: 2.670 30.06
Average loss over 22499891 tokens: 2.626, valid loss/error: 2.669 30.01
New best model saved
Average loss over 22514393 tokens: 2.628, valid loss/error: 2.670 29.96
New best model saved
Average loss over 22531407 tokens: 2.624, valid loss/error: 2.670 30.04
Average loss over 22574300 tokens: 2.627, valid loss/error: 2.661 29.92
New best model saved
Average loss over 22542842 tokens: 2.625, valid loss/error: 2.666 30.00
Average loss over 22548633 tokens: 2.622, valid loss/error: 2.664 29.90
New best model saved
Average loss over 22560258 tokens: 2.625, valid loss/error: 2.661 29.92
Average loss over 22561615 tokens: 2.620, valid loss/error: 2.660 29.91
New best model saved
Average loss over 22524845 tokens: 2.628, valid loss/error: 2.664 29.83
New best model saved
Average loss over 22524520 tokens: 2.629, valid loss/error: 2.661 29.90
Average loss over 22564468 tokens: 2.630, valid loss/error: 2.661 29.87
Average loss over 22567976 tokens: 2.617, valid loss/error: 2.660 29.91
Average loss over 22536071 tokens: 2.621, valid loss/error: 2.660 29.89
Average loss over 22555774 tokens: 2.624, valid loss/error: 2.660 29.84
Average loss over 22587031 tokens: 2.620, valid loss/error: 2.659 29.85
New best model saved
Average loss over 22592547 tokens: 2.610, valid loss/error: 2.654 29.72
New best model saved
Average loss over 22601185 tokens: 2.616, valid loss/error: 2.657 29.73
Average loss over 22618570 tokens: 2.619, valid loss/error: 2.653 29.81
New best model saved
Average loss over 22519755 tokens: 2.602, valid loss/error: 2.655 29.84
Average loss over 22590116 tokens: 2.610, valid loss/error: 2.658 29.76
Average loss over 22627877 tokens: 2.628, valid loss/error: 2.655 29.75
Average loss over 22562596 tokens: 2.611, valid loss/error: 2.653 29.71
New best model saved
Average loss over 22529082 tokens: 2.606, valid loss/error: 2.650 29.79
New best model saved
Average loss over 22548173 tokens: 2.607, valid loss/error: 2.650 29.68
New best model saved
Average loss over 22583712 tokens: 2.604, valid loss/error: 2.650 29.64
New best model saved
Average loss over 22544723 tokens: 2.609, valid loss/error: 2.650 29.67
New best model saved
Average loss over 22489104 tokens: 2.604, valid loss/error: 2.647 29.72
New best model saved
Average loss over 22519490 tokens: 2.604, valid loss/error: 2.648 29.69
Average loss over 22531859 tokens: 2.609, valid loss/error: 2.646 29.71
New best model saved
Average loss over 7132283 tokens: 2.607
Epoch: 2, train loss: 2.630, valid loss/error: 2.645 29.63
New best model saved
Average loss over 22461742 tokens: 2.586, valid loss/error: 2.648 29.60
New best model saved
Average loss over 22576058 tokens: 2.612, valid loss/error: 2.648 29.71
Average loss over 22571123 tokens: 2.602, valid loss/error: 2.646 29.69
Average loss over 20829977 tokens: 2.608
Epoch: 3, train loss: 2.602, valid loss/error: 2.652 29.66
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_300k/std_20epochs/eva_2.590_28.62.h5
Init lr: 1e-05, Dev Loss/Error: 2.590 28.62
Average loss over 5413521 tokens: 2.748, valid loss/error: 2.590 28.72
Average loss over 5400544 tokens: 2.733, valid loss/error: 2.590 28.77
Average loss over 5398517 tokens: 2.741, valid loss/error: 2.588 28.69
New best model saved
Average loss over 5398196 tokens: 2.731, valid loss/error: 2.587 28.67
New best model saved
Average loss over 5404711 tokens: 2.718, valid loss/error: 2.587 28.72
Average loss over 5417765 tokens: 2.717, valid loss/error: 2.586 28.68
New best model saved
Average loss over 5397875 tokens: 2.717, valid loss/error: 2.586 28.69
New best model saved
Average loss over 5414113 tokens: 2.728, valid loss/error: 2.586 28.71
Average loss over 5405859 tokens: 2.726, valid loss/error: 2.586 28.71
Average loss over 5402625 tokens: 2.732, valid loss/error: 2.585 28.70
New best model saved
Average loss over 5402267 tokens: 2.716, valid loss/error: 2.585 28.71
New best model saved
Average loss over 5407236 tokens: 2.724, valid loss/error: 2.585 28.71
New best model saved
Average loss over 5409117 tokens: 2.728, valid loss/error: 2.583 28.71
New best model saved
Average loss over 5428606 tokens: 2.724, valid loss/error: 2.584 28.70
Average loss over 5420355 tokens: 2.730, valid loss/error: 2.584 28.69
Average loss over 5423328 tokens: 2.733, valid loss/error: 2.584 28.71
Average loss over 5408613 tokens: 2.695, valid loss/error: 2.584 28.72
Average loss over 5429897 tokens: 2.722, valid loss/error: 2.583 28.69
New best model saved
Average loss over 5411567 tokens: 2.721, valid loss/error: 2.583 28.70
Average loss over 5418648 tokens: 2.738, valid loss/error: 2.583 28.72
Average loss over 5430752 tokens: 2.727, valid loss/error: 2.583 28.66
Average loss over 5433754 tokens: 2.737, valid loss/error: 2.583 28.64
Average loss over 5400908 tokens: 2.715, valid loss/error: 2.582 28.65
New best model saved
Average loss over 5403663 tokens: 2.731, valid loss/error: 2.582 28.66
New best model saved
Average loss over 5417050 tokens: 2.725, valid loss/error: 2.582 28.68
Average loss over 5405614 tokens: 2.724, valid loss/error: 2.583 28.68
Average loss over 5422166 tokens: 2.719, valid loss/error: 2.581 28.70
New best model saved
Average loss over 5423644 tokens: 2.725, valid loss/error: 2.583 28.69
Average loss over 5424857 tokens: 2.730, valid loss/error: 2.581 28.67
Average loss over 5432800 tokens: 2.721, valid loss/error: 2.581 28.66
Average loss over 5429128 tokens: 2.727, valid loss/error: 2.583 28.71
Average loss over 5416164 tokens: 2.738, valid loss/error: 2.581 28.67
New best model saved
Average loss over 5427960 tokens: 2.726, valid loss/error: 2.581 28.67
Average loss over 5422950 tokens: 2.735, valid loss/error: 2.581 28.70
Average loss over 5410492 tokens: 2.712, valid loss/error: 2.581 28.64
New best model saved
Average loss over 5430911 tokens: 2.734, valid loss/error: 2.581 28.65
Average loss over 5400901 tokens: 2.715, valid loss/error: 2.581 28.68
Average loss over 5409993 tokens: 2.711, valid loss/error: 2.582 28.68
Average loss over 5418006 tokens: 2.718, valid loss/error: 2.580 28.66
New best model saved
Average loss over 5413203 tokens: 2.724, valid loss/error: 2.581 28.68
Average loss over 5411970 tokens: 2.724, valid loss/error: 2.580 28.67
Average loss over 5410125 tokens: 2.710, valid loss/error: 2.580 28.68
New best model saved
Average loss over 5420003 tokens: 2.711, valid loss/error: 2.580 28.67
Average loss over 5402276 tokens: 2.723, valid loss/error: 2.579 28.68
New best model saved
Average loss over 5413386 tokens: 2.696, valid loss/error: 2.579 28.69
New best model saved
Average loss over 5402018 tokens: 2.720, valid loss/error: 2.580 28.68
Average loss over 5419337 tokens: 2.716, valid loss/error: 2.579 28.67
Average loss over 5421316 tokens: 2.735, valid loss/error: 2.579 28.69
New best model saved
Average loss over 5405815 tokens: 2.722, valid loss/error: 2.580 28.68
Average loss over 5430316 tokens: 2.706, valid loss/error: 2.579 28.66
Average loss over 5401434 tokens: 2.709, valid loss/error: 2.580 28.65
Average loss over 5407974 tokens: 2.710, valid loss/error: 2.580 28.65
Average loss over 5420584 tokens: 2.717, valid loss/error: 2.580 28.64
Average loss over 5401489 tokens: 2.711, valid loss/error: 2.579 28.63
Average loss over 5403289 tokens: 2.703, valid loss/error: 2.578 28.61
New best model saved
Average loss over 5396522 tokens: 2.711, valid loss/error: 2.580 28.64
Average loss over 5414043 tokens: 2.711, valid loss/error: 2.578 28.66
New best model saved
Average loss over 5426002 tokens: 2.723, valid loss/error: 2.579 28.67
Average loss over 5429172 tokens: 2.725, valid loss/error: 2.579 28.63
Average loss over 5416490 tokens: 2.709, valid loss/error: 2.579 28.65
Average loss over 5401223 tokens: 2.713, valid loss/error: 2.579 28.62
Average loss over 5399448 tokens: 2.704, valid loss/error: 2.579 28.63
Average loss over 5398330 tokens: 2.720, valid loss/error: 2.577 28.64
New best model saved
Average loss over 5396802 tokens: 2.709, valid loss/error: 2.579 28.65
Average loss over 5410690 tokens: 2.716, valid loss/error: 2.577 28.63
Average loss over 5406911 tokens: 2.720, valid loss/error: 2.578 28.63
Average loss over 5405968 tokens: 2.706, valid loss/error: 2.579 28.64
Average loss over 5423780 tokens: 2.723, valid loss/error: 2.578 28.64
Average loss over 5401216 tokens: 2.704, valid loss/error: 2.577 28.64
Average loss over 5412790 tokens: 2.696, valid loss/error: 2.579 28.64
Average loss over 5406304 tokens: 2.709, valid loss/error: 2.579 28.66
Average loss over 5409970 tokens: 2.702, valid loss/error: 2.578 28.63
Average loss over 5417058 tokens: 2.722, valid loss/error: 2.577 28.63
Average loss over 5411814 tokens: 2.721, valid loss/error: 2.578 28.66
Average loss over 4228761 tokens: 2.721
Epoch: 1, train loss: 2.720, valid loss/error: 2.578 28.64
Average loss over 5403737 tokens: 2.703, valid loss/error: 2.578 28.63
Average loss over 5413501 tokens: 2.717, valid loss/error: 2.579 28.62
Average loss over 5423112 tokens: 2.718, valid loss/error: 2.578 28.63
Average loss over 5404810 tokens: 2.702, valid loss/error: 2.578 28.63
Average loss over 5416237 tokens: 2.704, valid loss/error: 2.578 28.65
Average loss over 5420376 tokens: 2.710, valid loss/error: 2.578 28.64
Average loss over 5420066 tokens: 2.713, valid loss/error: 2.576 28.63
New best model saved
Average loss over 5398480 tokens: 2.703, valid loss/error: 2.578 28.63
Average loss over 5418650 tokens: 2.694, valid loss/error: 2.577 28.64
Average loss over 5410715 tokens: 2.699, valid loss/error: 2.577 28.63
Average loss over 5413776 tokens: 2.704, valid loss/error: 2.578 28.63
Average loss over 5408972 tokens: 2.718, valid loss/error: 2.577 28.62
Average loss over 5418262 tokens: 2.700, valid loss/error: 2.578 28.66
Average loss over 5409184 tokens: 2.702, valid loss/error: 2.576 28.62
New best model saved
Average loss over 5416705 tokens: 2.708, valid loss/error: 2.577 28.62
Average loss over 5413232 tokens: 2.724, valid loss/error: 2.577 28.64
Average loss over 5404317 tokens: 2.704, valid loss/error: 2.576 28.63
New best model saved
Average loss over 5419257 tokens: 2.720, valid loss/error: 2.577 28.65
Average loss over 5413507 tokens: 2.718, valid loss/error: 2.578 28.63
Average loss over 5422580 tokens: 2.711, valid loss/error: 2.577 28.62
Average loss over 5419340 tokens: 2.713, valid loss/error: 2.577 28.63
Average loss over 5413114 tokens: 2.708, valid loss/error: 2.577 28.61
Average loss over 5414929 tokens: 2.712, valid loss/error: 2.577 28.60
New best model saved
Average loss over 5398957 tokens: 2.706, valid loss/error: 2.577 28.58
New best model saved
Average loss over 5407486 tokens: 2.714, valid loss/error: 2.577 28.59
Average loss over 5408318 tokens: 2.710, valid loss/error: 2.576 28.60
Average loss over 5413039 tokens: 2.702, valid loss/error: 2.576 28.60
Average loss over 5397505 tokens: 2.717, valid loss/error: 2.577 28.63
Average loss over 5432073 tokens: 2.715, valid loss/error: 2.576 28.58
Average loss over 5405961 tokens: 2.698, valid loss/error: 2.576 28.58
New best model saved
Average loss over 5433032 tokens: 2.705, valid loss/error: 2.575 28.60
New best model saved
Average loss over 5425328 tokens: 2.707, valid loss/error: 2.576 28.59
Average loss over 5397482 tokens: 2.699, valid loss/error: 2.576 28.60
Average loss over 5408980 tokens: 2.711, valid loss/error: 2.575 28.57
New best model saved
Average loss over 5410313 tokens: 2.712, valid loss/error: 2.576 28.58
Average loss over 5418948 tokens: 2.685, valid loss/error: 2.576 28.55
New best model saved
Average loss over 5404282 tokens: 2.717, valid loss/error: 2.576 28.53
New best model saved
Average loss over 5392947 tokens: 2.691, valid loss/error: 2.576 28.57
Average loss over 5427587 tokens: 2.714, valid loss/error: 2.575 28.58
Average loss over 5432348 tokens: 2.714, valid loss/error: 2.576 28.60
Average loss over 5399896 tokens: 2.701, valid loss/error: 2.576 28.59
Average loss over 5405911 tokens: 2.701, valid loss/error: 2.576 28.63
Average loss over 5415965 tokens: 2.704, valid loss/error: 2.576 28.59
Average loss over 5417750 tokens: 2.701, valid loss/error: 2.576 28.58
Average loss over 5400534 tokens: 2.702, valid loss/error: 2.576 28.59
Average loss over 5408713 tokens: 2.692, valid loss/error: 2.575 28.60
Average loss over 5422928 tokens: 2.688, valid loss/error: 2.576 28.61
Average loss over 5416827 tokens: 2.686, valid loss/error: 2.576 28.61
Average loss over 5420765 tokens: 2.708, valid loss/error: 2.575 28.61
Average loss over 5424621 tokens: 2.718, valid loss/error: 2.577 28.61
Average loss over 5416604 tokens: 2.708, valid loss/error: 2.576 28.62
Average loss over 5402898 tokens: 2.706, valid loss/error: 2.576 28.63
Average loss over 5403954 tokens: 2.703, valid loss/error: 2.576 28.61
Average loss over 5421375 tokens: 2.711, valid loss/error: 2.575 28.59
New best model saved
Average loss over 5391693 tokens: 2.698, valid loss/error: 2.576 28.61
Average loss over 5412309 tokens: 2.718, valid loss/error: 2.576 28.61
Average loss over 5412812 tokens: 2.704, valid loss/error: 2.575 28.60
Average loss over 5413320 tokens: 2.704, valid loss/error: 2.575 28.61
Average loss over 5418118 tokens: 2.716, valid loss/error: 2.574 28.60
New best model saved
Average loss over 5411210 tokens: 2.694, valid loss/error: 2.575 28.55
Average loss over 5406815 tokens: 2.708, valid loss/error: 2.575 28.59
Average loss over 5418476 tokens: 2.700, valid loss/error: 2.576 28.57
Average loss over 5425712 tokens: 2.717, valid loss/error: 2.575 28.54
Average loss over 5413766 tokens: 2.687, valid loss/error: 2.576 28.58
Average loss over 5403236 tokens: 2.687, valid loss/error: 2.575 28.53
Average loss over 5409655 tokens: 2.705, valid loss/error: 2.575 28.57
Average loss over 5428057 tokens: 2.713, valid loss/error: 2.574 28.54
New best model saved
Average loss over 5400922 tokens: 2.687, valid loss/error: 2.574 28.57
Average loss over 5428921 tokens: 2.704, valid loss/error: 2.574 28.57
Average loss over 5398659 tokens: 2.710, valid loss/error: 2.574 28.54
Average loss over 5408241 tokens: 2.695, valid loss/error: 2.575 28.59
Average loss over 5415843 tokens: 2.709, valid loss/error: 2.575 28.61
Average loss over 5420118 tokens: 2.700, valid loss/error: 2.575 28.58
Average loss over 5405987 tokens: 2.688, valid loss/error: 2.576 28.55
Average loss over 4218846 tokens: 2.710
Epoch: 2, train loss: 2.705, valid loss/error: 2.576 28.56
Average loss over 5411604 tokens: 2.695, valid loss/error: 2.575 28.56
Average loss over 5419227 tokens: 2.700, valid loss/error: 2.575 28.54
Average loss over 5402258 tokens: 2.692, valid loss/error: 2.575 28.56
Average loss over 5421284 tokens: 2.704, valid loss/error: 2.574 28.53
New best model saved
Average loss over 5418344 tokens: 2.702, valid loss/error: 2.574 28.57
Average loss over 5402273 tokens: 2.690, valid loss/error: 2.575 28.57
Average loss over 5403413 tokens: 2.694, valid loss/error: 2.575 28.57
Average loss over 5402981 tokens: 2.703, valid loss/error: 2.575 28.59
Average loss over 5421849 tokens: 2.712, valid loss/error: 2.575 28.57
Average loss over 5429726 tokens: 2.685, valid loss/error: 2.574 28.57
Average loss over 5394605 tokens: 2.681, valid loss/error: 2.574 28.56
Average loss over 5413634 tokens: 2.699, valid loss/error: 2.575 28.53
Average loss over 5413131 tokens: 2.698, valid loss/error: 2.574 28.54
New best model saved
Average loss over 5407802 tokens: 2.685, valid loss/error: 2.575 28.54
Average loss over 5405657 tokens: 2.702, valid loss/error: 2.574 28.51
New best model saved
Average loss over 5407707 tokens: 2.697, valid loss/error: 2.574 28.55
Average loss over 5420183 tokens: 2.694, valid loss/error: 2.574 28.53
Average loss over 5406925 tokens: 2.699, valid loss/error: 2.574 28.53
Average loss over 5425563 tokens: 2.702, valid loss/error: 2.575 28.54
Average loss over 5404214 tokens: 2.704, valid loss/error: 2.574 28.55
Average loss over 5406812 tokens: 2.699, valid loss/error: 2.575 28.58
Average loss over 5416984 tokens: 2.714, valid loss/error: 2.575 28.57
Average loss over 5425189 tokens: 2.700, valid loss/error: 2.574 28.56
Average loss over 5411776 tokens: 2.694, valid loss/error: 2.575 28.60
Average loss over 5421925 tokens: 2.705, valid loss/error: 2.574 28.56
Average loss over 5411450 tokens: 2.695, valid loss/error: 2.575 28.60
Average loss over 5418416 tokens: 2.703, valid loss/error: 2.574 28.60
Average loss over 5404116 tokens: 2.686, valid loss/error: 2.575 28.60
Average loss over 5441318 tokens: 2.699, valid loss/error: 2.574 28.57
New best model saved
Average loss over 5402290 tokens: 2.701, valid loss/error: 2.575 28.55
Average loss over 5431864 tokens: 2.695, valid loss/error: 2.574 28.59
Average loss over 5413223 tokens: 2.704, valid loss/error: 2.574 28.59
New best model saved
Average loss over 5423552 tokens: 2.702, valid loss/error: 2.574 28.61
Average loss over 5413785 tokens: 2.688, valid loss/error: 2.574 28.58
Average loss over 5410332 tokens: 2.700, valid loss/error: 2.575 28.59
Average loss over 5417353 tokens: 2.704, valid loss/error: 2.575 28.57
Average loss over 5384214 tokens: 2.700, valid loss/error: 2.574 28.61
Average loss over 5413235 tokens: 2.699, valid loss/error: 2.574 28.56
Average loss over 5414680 tokens: 2.691, valid loss/error: 2.574 28.59
Average loss over 5425201 tokens: 2.711, valid loss/error: 2.574 28.56
Average loss over 5403228 tokens: 2.683, valid loss/error: 2.574 28.57
Average loss over 5409433 tokens: 2.678, valid loss/error: 2.575 28.59
Average loss over 5397374 tokens: 2.694, valid loss/error: 2.575 28.58
Average loss over 5415381 tokens: 2.715, valid loss/error: 2.574 28.59
Average loss over 5412825 tokens: 2.699, valid loss/error: 2.574 28.60
Average loss over 5426226 tokens: 2.698, valid loss/error: 2.573 28.59
New best model saved
Average loss over 5408851 tokens: 2.708, valid loss/error: 2.574 28.60
Average loss over 5411324 tokens: 2.694, valid loss/error: 2.575 28.61
Average loss over 5406634 tokens: 2.697, valid loss/error: 2.574 28.60
Average loss over 5410615 tokens: 2.706, valid loss/error: 2.573 28.59
Average loss over 5424212 tokens: 2.705, valid loss/error: 2.573 28.54
Average loss over 5416711 tokens: 2.696, valid loss/error: 2.574 28.56
Average loss over 5420794 tokens: 2.708, valid loss/error: 2.574 28.60
Average loss over 5421703 tokens: 2.687, valid loss/error: 2.574 28.54
Average loss over 5412588 tokens: 2.686, valid loss/error: 2.574 28.57
Average loss over 5411785 tokens: 2.697, valid loss/error: 2.574 28.57
Average loss over 5421004 tokens: 2.709, valid loss/error: 2.574 28.57
Average loss over 5400693 tokens: 2.694, valid loss/error: 2.574 28.55
Average loss over 5409323 tokens: 2.680, valid loss/error: 2.574 28.57
Average loss over 5413229 tokens: 2.701, valid loss/error: 2.572 28.56
New best model saved
Average loss over 5428698 tokens: 2.704, valid loss/error: 2.573 28.55
Average loss over 5396706 tokens: 2.718, valid loss/error: 2.573 28.55
Average loss over 5402896 tokens: 2.691, valid loss/error: 2.573 28.55
Average loss over 5427807 tokens: 2.701, valid loss/error: 2.573 28.56
Average loss over 5408811 tokens: 2.716, valid loss/error: 2.574 28.59
Average loss over 5401068 tokens: 2.694, valid loss/error: 2.573 28.53
Average loss over 5413860 tokens: 2.718, valid loss/error: 2.573 28.53
Average loss over 5419670 tokens: 2.697, valid loss/error: 2.574 28.55
Average loss over 5413751 tokens: 2.679, valid loss/error: 2.573 28.54
Average loss over 5396999 tokens: 2.698, valid loss/error: 2.573 28.55
Average loss over 5429956 tokens: 2.704, valid loss/error: 2.573 28.53
Average loss over 5410130 tokens: 2.697, valid loss/error: 2.573 28.58
Average loss over 5407339 tokens: 2.697, valid loss/error: 2.573 28.53
Average loss over 5407664 tokens: 2.709, valid loss/error: 2.573 28.56
Average loss over 4213519 tokens: 2.680
Epoch: 3, train loss: 2.698, valid loss/error: 2.573 28.55
Average loss over 5413972 tokens: 2.685, valid loss/error: 2.574 28.57
Average loss over 5416658 tokens: 2.700, valid loss/error: 2.572 28.58
Average loss over 5422515 tokens: 2.697, valid loss/error: 2.573 28.53
Average loss over 5402854 tokens: 2.705, valid loss/error: 2.573 28.53
Average loss over 5408407 tokens: 2.701, valid loss/error: 2.573 28.57
Average loss over 5420256 tokens: 2.688, valid loss/error: 2.573 28.53
Average loss over 5414680 tokens: 2.700, valid loss/error: 2.573 28.56
Average loss over 5418258 tokens: 2.685, valid loss/error: 2.573 28.58
Average loss over 5422101 tokens: 2.683, valid loss/error: 2.573 28.59
Average loss over 5397028 tokens: 2.671, valid loss/error: 2.574 28.59
Average loss over 5392212 tokens: 2.679, valid loss/error: 2.573 28.55
Average loss over 5416411 tokens: 2.699, valid loss/error: 2.573 28.58
Average loss over 5413347 tokens: 2.715, valid loss/error: 2.572 28.57
Average loss over 5415076 tokens: 2.695, valid loss/error: 2.573 28.58
Average loss over 5425412 tokens: 2.697, valid loss/error: 2.574 28.57
Average loss over 5406147 tokens: 2.692, valid loss/error: 2.573 28.57
Average loss over 5416548 tokens: 2.702, valid loss/error: 2.573 28.58
Average loss over 5411474 tokens: 2.689, valid loss/error: 2.573 28.55
Average loss over 5419937 tokens: 2.700, valid loss/error: 2.574 28.57
Average loss over 5410039 tokens: 2.685, valid loss/error: 2.574 28.55
Average loss over 5434126 tokens: 2.706, valid loss/error: 2.574 28.57
Average loss over 5413943 tokens: 2.691, valid loss/error: 2.573 28.54
Average loss over 5404163 tokens: 2.688, valid loss/error: 2.574 28.56
Average loss over 5397174 tokens: 2.677, valid loss/error: 2.572 28.56
Average loss over 5404337 tokens: 2.698, valid loss/error: 2.573 28.58
Average loss over 5413031 tokens: 2.679, valid loss/error: 2.573 28.60
Average loss over 5412345 tokens: 2.693, valid loss/error: 2.574 28.60
Average loss over 5417252 tokens: 2.683, valid loss/error: 2.573 28.57
Average loss over 5418932 tokens: 2.698, valid loss/error: 2.572 28.55
Average loss over 5416624 tokens: 2.701, valid loss/error: 2.574 28.59
Average loss over 5422662 tokens: 2.689, valid loss/error: 2.573 28.55
Average loss over 5402215 tokens: 2.700, valid loss/error: 2.573 28.59
Average loss over 5415903 tokens: 2.692, valid loss/error: 2.573 28.63
Average loss over 5436483 tokens: 2.699, valid loss/error: 2.574 28.62
Average loss over 5396363 tokens: 2.700, valid loss/error: 2.573 28.63
Average loss over 5415450 tokens: 2.687, valid loss/error: 2.573 28.61
Average loss over 5410240 tokens: 2.675, valid loss/error: 2.573 28.61
Average loss over 5423557 tokens: 2.703, valid loss/error: 2.573 28.60
Average loss over 5416869 tokens: 2.695, valid loss/error: 2.574 28.60
Average loss over 5401085 tokens: 2.687, valid loss/error: 2.573 28.60
Average loss over 5410263 tokens: 2.696, valid loss/error: 2.573 28.59
Average loss over 5404922 tokens: 2.696, valid loss/error: 2.572 28.57
New best model saved
Average loss over 5423529 tokens: 2.693, valid loss/error: 2.572 28.56
New best model saved
Average loss over 5399777 tokens: 2.673, valid loss/error: 2.572 28.56
Average loss over 5417713 tokens: 2.701, valid loss/error: 2.573 28.56
Average loss over 5430385 tokens: 2.705, valid loss/error: 2.572 28.57
Average loss over 5408094 tokens: 2.703, valid loss/error: 2.573 28.57
Average loss over 5408729 tokens: 2.681, valid loss/error: 2.572 28.55
Average loss over 5428397 tokens: 2.722, valid loss/error: 2.573 28.53
Average loss over 5421306 tokens: 2.695, valid loss/error: 2.573 28.55
Average loss over 5425497 tokens: 2.700, valid loss/error: 2.573 28.57
Average loss over 5403116 tokens: 2.695, valid loss/error: 2.573 28.59
Average loss over 5417419 tokens: 2.702, valid loss/error: 2.574 28.60
Average loss over 5400150 tokens: 2.682, valid loss/error: 2.573 28.61
Average loss over 5414064 tokens: 2.702, valid loss/error: 2.574 28.59
Average loss over 5407109 tokens: 2.688, valid loss/error: 2.572 28.56
Average loss over 5405428 tokens: 2.691, valid loss/error: 2.573 28.55
Average loss over 5399920 tokens: 2.694, valid loss/error: 2.572 28.55
Average loss over 5414918 tokens: 2.689, valid loss/error: 2.573 28.58
Average loss over 5419889 tokens: 2.692, valid loss/error: 2.573 28.57
Average loss over 5405739 tokens: 2.706, valid loss/error: 2.573 28.54
Average loss over 5414236 tokens: 2.673, valid loss/error: 2.573 28.57
Average loss over 5423436 tokens: 2.701, valid loss/error: 2.572 28.51
New best model saved
Average loss over 5413020 tokens: 2.693, valid loss/error: 2.573 28.57
Average loss over 5409615 tokens: 2.687, valid loss/error: 2.573 28.55
Average loss over 5403680 tokens: 2.707, valid loss/error: 2.573 28.57
Average loss over 5407249 tokens: 2.688, valid loss/error: 2.573 28.55
Average loss over 5400660 tokens: 2.695, valid loss/error: 2.572 28.54
Average loss over 5411439 tokens: 2.686, valid loss/error: 2.572 28.55
Average loss over 5412179 tokens: 2.686, valid loss/error: 2.572 28.53
New best model saved
Average loss over 5417064 tokens: 2.700, valid loss/error: 2.572 28.54
Average loss over 5422538 tokens: 2.679, valid loss/error: 2.572 28.56
Average loss over 5421646 tokens: 2.697, valid loss/error: 2.572 28.53
Average loss over 5391923 tokens: 2.693, valid loss/error: 2.572 28.55
Average loss over 4221767 tokens: 2.700
Epoch: 4, train loss: 2.693, valid loss/error: 2.572 28.55
Average loss over 5420419 tokens: 2.691, valid loss/error: 2.573 28.54
Average loss over 5422276 tokens: 2.697, valid loss/error: 2.572 28.55
Average loss over 5399501 tokens: 2.673, valid loss/error: 2.573 28.54
Average loss over 5411735 tokens: 2.677, valid loss/error: 2.572 28.53
Average loss over 5403005 tokens: 2.688, valid loss/error: 2.572 28.55
Average loss over 5404463 tokens: 2.692, valid loss/error: 2.573 28.52
Average loss over 5407748 tokens: 2.696, valid loss/error: 2.572 28.55
Average loss over 5398781 tokens: 2.679, valid loss/error: 2.573 28.55
Average loss over 5417251 tokens: 2.682, valid loss/error: 2.573 28.53
Average loss over 5410681 tokens: 2.679, valid loss/error: 2.571 28.57
New best model saved
Average loss over 5393232 tokens: 2.674, valid loss/error: 2.571 28.57
New best model saved
Average loss over 5414726 tokens: 2.699, valid loss/error: 2.573 28.55
Average loss over 5414209 tokens: 2.697, valid loss/error: 2.572 28.56
Average loss over 5419907 tokens: 2.705, valid loss/error: 2.572 28.54
Average loss over 5418152 tokens: 2.699, valid loss/error: 2.572 28.53
Average loss over 5415423 tokens: 2.704, valid loss/error: 2.573 28.54
Average loss over 5404943 tokens: 2.688, valid loss/error: 2.572 28.52
Average loss over 5414107 tokens: 2.697, valid loss/error: 2.572 28.54
Average loss over 5411509 tokens: 2.695, valid loss/error: 2.572 28.59
Average loss over 5416424 tokens: 2.702, valid loss/error: 2.573 28.59
Average loss over 5416307 tokens: 2.682, valid loss/error: 2.572 28.59
Average loss over 5406743 tokens: 2.674, valid loss/error: 2.572 28.55
Average loss over 5405936 tokens: 2.683, valid loss/error: 2.574 28.60
Average loss over 5408811 tokens: 2.686, valid loss/error: 2.574 28.57
Average loss over 5394423 tokens: 2.687, valid loss/error: 2.573 28.57
Average loss over 5413182 tokens: 2.684, valid loss/error: 2.573 28.58
Average loss over 5422601 tokens: 2.680, valid loss/error: 2.571 28.55
Average loss over 5426298 tokens: 2.694, valid loss/error: 2.573 28.57
Average loss over 5407799 tokens: 2.685, valid loss/error: 2.573 28.56
Average loss over 5418775 tokens: 2.697, valid loss/error: 2.573 28.55
Average loss over 5395907 tokens: 2.686, valid loss/error: 2.572 28.52
Average loss over 5411853 tokens: 2.684, valid loss/error: 2.572 28.56
Average loss over 5400687 tokens: 2.687, valid loss/error: 2.572 28.56
Average loss over 5412908 tokens: 2.703, valid loss/error: 2.572 28.55
Average loss over 5421817 tokens: 2.683, valid loss/error: 2.573 28.54
Average loss over 5406769 tokens: 2.686, valid loss/error: 2.574 28.56
Average loss over 5412622 tokens: 2.698, valid loss/error: 2.573 28.57
Average loss over 5409906 tokens: 2.691, valid loss/error: 2.573 28.56
Average loss over 5413554 tokens: 2.699, valid loss/error: 2.573 28.56
Average loss over 5439760 tokens: 2.690, valid loss/error: 2.572 28.58
Average loss over 5434041 tokens: 2.710, valid loss/error: 2.572 28.57
Average loss over 5411373 tokens: 2.687, valid loss/error: 2.572 28.57
Average loss over 5410493 tokens: 2.686, valid loss/error: 2.572 28.57
Average loss over 5437435 tokens: 2.687, valid loss/error: 2.573 28.57
Average loss over 5414128 tokens: 2.693, valid loss/error: 2.573 28.55
Average loss over 5404911 tokens: 2.687, valid loss/error: 2.573 28.56
Average loss over 5415816 tokens: 2.703, valid loss/error: 2.573 28.52
Average loss over 5408083 tokens: 2.681, valid loss/error: 2.573 28.53
Average loss over 5408723 tokens: 2.674, valid loss/error: 2.572 28.54
Average loss over 5416470 tokens: 2.689, valid loss/error: 2.572 28.52
Average loss over 5388368 tokens: 2.675, valid loss/error: 2.574 28.57
Average loss over 5413078 tokens: 2.672, valid loss/error: 2.572 28.55
Average loss over 5415252 tokens: 2.695, valid loss/error: 2.572 28.54
Average loss over 5403783 tokens: 2.703, valid loss/error: 2.573 28.54
Average loss over 5415169 tokens: 2.673, valid loss/error: 2.573 28.57
Average loss over 5430122 tokens: 2.695, valid loss/error: 2.573 28.55
Average loss over 5415754 tokens: 2.695, valid loss/error: 2.573 28.51
Average loss over 5428856 tokens: 2.696, valid loss/error: 2.572 28.55
Average loss over 5420575 tokens: 2.672, valid loss/error: 2.572 28.54
Average loss over 5418205 tokens: 2.687, valid loss/error: 2.571 28.53
New best model saved
Average loss over 5413844 tokens: 2.707, valid loss/error: 2.572 28.53
Average loss over 5407208 tokens: 2.692, valid loss/error: 2.571 28.54
Average loss over 5404205 tokens: 2.685, valid loss/error: 2.571 28.51
New best model saved
Average loss over 5420034 tokens: 2.692, valid loss/error: 2.571 28.49
New best model saved
Average loss over 5419480 tokens: 2.672, valid loss/error: 2.573 28.59
Average loss over 5419489 tokens: 2.707, valid loss/error: 2.571 28.55
Average loss over 5407952 tokens: 2.695, valid loss/error: 2.572 28.61
Average loss over 5419558 tokens: 2.701, valid loss/error: 2.572 28.58
Average loss over 5410134 tokens: 2.683, valid loss/error: 2.572 28.57
Average loss over 5399976 tokens: 2.680, valid loss/error: 2.571 28.56
Average loss over 5425452 tokens: 2.692, valid loss/error: 2.572 28.53
Average loss over 5420234 tokens: 2.695, valid loss/error: 2.571 28.55
New best model saved
Average loss over 5402994 tokens: 2.694, valid loss/error: 2.572 28.55
Average loss over 5413395 tokens: 2.685, valid loss/error: 2.572 28.56
Average loss over 4213162 tokens: 2.690
Epoch: 5, train loss: 2.689, valid loss/error: 2.571 28.51
Average loss over 5410518 tokens: 2.693, valid loss/error: 2.572 28.52
Average loss over 5429115 tokens: 2.704, valid loss/error: 2.572 28.51
Average loss over 5411034 tokens: 2.679, valid loss/error: 2.572 28.51
Average loss over 5420086 tokens: 2.679, valid loss/error: 2.571 28.52
New best model saved
Average loss over 5426380 tokens: 2.686, valid loss/error: 2.571 28.56
Average loss over 5422267 tokens: 2.703, valid loss/error: 2.572 28.56
Average loss over 5419112 tokens: 2.686, valid loss/error: 2.572 28.54
Average loss over 5403866 tokens: 2.675, valid loss/error: 2.571 28.54
Average loss over 5404388 tokens: 2.685, valid loss/error: 2.571 28.55
Average loss over 5420884 tokens: 2.676, valid loss/error: 2.571 28.55
Average loss over 5413705 tokens: 2.689, valid loss/error: 2.573 28.55
Average loss over 5423352 tokens: 2.691, valid loss/error: 2.573 28.61
Average loss over 5417554 tokens: 2.678, valid loss/error: 2.572 28.54
Average loss over 5425991 tokens: 2.688, valid loss/error: 2.572 28.55
Average loss over 5399303 tokens: 2.694, valid loss/error: 2.572 28.55
Average loss over 5415883 tokens: 2.669, valid loss/error: 2.572 28.58
Average loss over 5417805 tokens: 2.683, valid loss/error: 2.573 28.57
Average loss over 5396003 tokens: 2.693, valid loss/error: 2.572 28.55
Average loss over 5409653 tokens: 2.683, valid loss/error: 2.572 28.55
Average loss over 5415301 tokens: 2.691, valid loss/error: 2.572 28.52
Average loss over 5417060 tokens: 2.688, valid loss/error: 2.572 28.54
Average loss over 5413449 tokens: 2.678, valid loss/error: 2.572 28.55
Average loss over 5395842 tokens: 2.682, valid loss/error: 2.572 28.55
Average loss over 5423790 tokens: 2.684, valid loss/error: 2.572 28.57
Average loss over 5424852 tokens: 2.684, valid loss/error: 2.572 28.58
Average loss over 5432002 tokens: 2.712, valid loss/error: 2.572 28.56
Average loss over 5402456 tokens: 2.693, valid loss/error: 2.572 28.55
Average loss over 5421677 tokens: 2.682, valid loss/error: 2.573 28.55
Average loss over 5421179 tokens: 2.680, valid loss/error: 2.572 28.60
Average loss over 5419189 tokens: 2.689, valid loss/error: 2.572 28.54
Average loss over 5423915 tokens: 2.690, valid loss/error: 2.572 28.58
Average loss over 5398952 tokens: 2.676, valid loss/error: 2.571 28.56
Average loss over 5411981 tokens: 2.672, valid loss/error: 2.572 28.55
Average loss over 5402231 tokens: 2.693, valid loss/error: 2.573 28.55
Average loss over 5405590 tokens: 2.688, valid loss/error: 2.573 28.59
Average loss over 5407740 tokens: 2.685, valid loss/error: 2.572 28.56
Average loss over 5400414 tokens: 2.682, valid loss/error: 2.572 28.55
Average loss over 5412087 tokens: 2.693, valid loss/error: 2.572 28.57
Average loss over 5413381 tokens: 2.690, valid loss/error: 2.572 28.57
Average loss over 5418392 tokens: 2.692, valid loss/error: 2.572 28.57
Average loss over 5400073 tokens: 2.682, valid loss/error: 2.571 28.55
Average loss over 5414166 tokens: 2.679, valid loss/error: 2.571 28.53
Average loss over 5415434 tokens: 2.691, valid loss/error: 2.572 28.56
Average loss over 5404826 tokens: 2.671, valid loss/error: 2.572 28.55
Average loss over 5403162 tokens: 2.678, valid loss/error: 2.572 28.54
Average loss over 5403184 tokens: 2.693, valid loss/error: 2.572 28.53
Average loss over 5422900 tokens: 2.694, valid loss/error: 2.571 28.53
Average loss over 5431587 tokens: 2.696, valid loss/error: 2.572 28.55
Average loss over 5424231 tokens: 2.685, valid loss/error: 2.572 28.57
Average loss over 5406075 tokens: 2.680, valid loss/error: 2.573 28.55
Average loss over 5417731 tokens: 2.698, valid loss/error: 2.571 28.55
Average loss over 5411545 tokens: 2.689, valid loss/error: 2.571 28.59
Average loss over 5412759 tokens: 2.678, valid loss/error: 2.571 28.57
Average loss over 5408375 tokens: 2.684, valid loss/error: 2.572 28.57
Average loss over 5413648 tokens: 2.690, valid loss/error: 2.572 28.59
Average loss over 5410777 tokens: 2.688, valid loss/error: 2.571 28.54
Average loss over 5415916 tokens: 2.680, valid loss/error: 2.571 28.55
Average loss over 5400287 tokens: 2.669, valid loss/error: 2.573 28.60
Average loss over 5411290 tokens: 2.677, valid loss/error: 2.573 28.61
Average loss over 5414322 tokens: 2.681, valid loss/error: 2.571 28.57
Average loss over 5411464 tokens: 2.678, valid loss/error: 2.572 28.57
Average loss over 5404553 tokens: 2.676, valid loss/error: 2.571 28.57
Average loss over 5414273 tokens: 2.689, valid loss/error: 2.572 28.60
Average loss over 5417698 tokens: 2.689, valid loss/error: 2.572 28.58
Average loss over 5404817 tokens: 2.700, valid loss/error: 2.572 28.57
Average loss over 5416171 tokens: 2.708, valid loss/error: 2.572 28.58
Average loss over 5412435 tokens: 2.688, valid loss/error: 2.571 28.60
Average loss over 5401342 tokens: 2.694, valid loss/error: 2.571 28.56
Average loss over 5407934 tokens: 2.670, valid loss/error: 2.571 28.54
Average loss over 5418606 tokens: 2.698, valid loss/error: 2.572 28.53
Average loss over 5412422 tokens: 2.689, valid loss/error: 2.573 28.56
Average loss over 5413879 tokens: 2.689, valid loss/error: 2.572 28.58
Average loss over 5403593 tokens: 2.698, valid loss/error: 2.571 28.55
Average loss over 5408519 tokens: 2.680, valid loss/error: 2.572 28.56
Average loss over 4214529 tokens: 2.686
Epoch: 6, train loss: 2.686, valid loss/error: 2.572 28.58
Average loss over 5398303 tokens: 2.667, valid loss/error: 2.572 28.53
Average loss over 5424336 tokens: 2.702, valid loss/error: 2.572 28.56
Average loss over 5405467 tokens: 2.679, valid loss/error: 2.571 28.53
Average loss over 5413723 tokens: 2.676, valid loss/error: 2.572 28.57
Average loss over 5405936 tokens: 2.686, valid loss/error: 2.571 28.54
Average loss over 5417449 tokens: 2.681, valid loss/error: 2.572 28.55
Average loss over 5415563 tokens: 2.676, valid loss/error: 2.572 28.55
Average loss over 5430481 tokens: 2.681, valid loss/error: 2.573 28.52
Average loss over 5416356 tokens: 2.679, valid loss/error: 2.572 28.57
Average loss over 5419423 tokens: 2.686, valid loss/error: 2.572 28.55
Average loss over 5398921 tokens: 2.675, valid loss/error: 2.573 28.56
Average loss over 5410798 tokens: 2.685, valid loss/error: 2.572 28.61
Average loss over 5403517 tokens: 2.682, valid loss/error: 2.572 28.60
Average loss over 5404295 tokens: 2.683, valid loss/error: 2.572 28.58
Average loss over 5402475 tokens: 2.674, valid loss/error: 2.573 28.57
Average loss over 5411547 tokens: 2.673, valid loss/error: 2.572 28.54
Average loss over 5410600 tokens: 2.676, valid loss/error: 2.572 28.56
Average loss over 5412992 tokens: 2.696, valid loss/error: 2.573 28.59
Average loss over 5421999 tokens: 2.678, valid loss/error: 2.572 28.52
Average loss over 5417942 tokens: 2.687, valid loss/error: 2.572 28.52
Average loss over 5411002 tokens: 2.672, valid loss/error: 2.572 28.53
Average loss over 5438699 tokens: 2.693, valid loss/error: 2.573 28.57
Average loss over 5421069 tokens: 2.670, valid loss/error: 2.571 28.56
Average loss over 1747002 tokens: 2.666
Epoch: 7, train loss: 2.681, valid loss/error: 2.572 28.54
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/train_3_2.602_2.652_29.66.h5
Init lr: 1e-05, Dev Loss/Error: 2.652 29.66
Average loss over 5413521 tokens: 2.816, valid loss/error: 2.645 29.66
New best model saved
Average loss over 5400544 tokens: 2.798, valid loss/error: 2.645 29.67
New best model saved
Average loss over 5398517 tokens: 2.807, valid loss/error: 2.642 29.60
New best model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/train_3_2.602_2.652_29.66.h5
Init lr: 1e-05, Dev Loss/Error: 2.652 29.66
Average loss over 5413521 tokens: 2.816, valid loss/error: 2.645 29.66
New best model saved
Average loss over 5400544 tokens: 2.798, valid loss/error: 2.645 29.67
New best model saved
Average loss over 5398517 tokens: 2.807, valid loss/error: 2.642 29.60
New best model saved
Average loss over 5398196 tokens: 2.796, valid loss/error: 2.641 29.60
New best model saved
Average loss over 5404711 tokens: 2.782, valid loss/error: 2.641 29.60
Average loss over 5417765 tokens: 2.780, valid loss/error: 2.639 29.59
New best model saved
Average loss over 5397875 tokens: 2.780, valid loss/error: 2.638 29.53
New best model saved
Average loss over 5414113 tokens: 2.791, valid loss/error: 2.638 29.51
New best model saved
Average loss over 5405859 tokens: 2.788, valid loss/error: 2.638 29.52
Average loss over 5402625 tokens: 2.794, valid loss/error: 2.637 29.51
New best model saved
Average loss over 5402267 tokens: 2.777, valid loss/error: 2.637 29.50
New best model saved
Average loss over 5407236 tokens: 2.786, valid loss/error: 2.636 29.52
New best model saved
Average loss over 5409117 tokens: 2.789, valid loss/error: 2.635 29.49
New best model saved
Average loss over 5428606 tokens: 2.785, valid loss/error: 2.635 29.48
New best model saved
Average loss over 5420355 tokens: 2.791, valid loss/error: 2.635 29.47
New best model saved
Average loss over 5423328 tokens: 2.794, valid loss/error: 2.635 29.49
Average loss over 5408613 tokens: 2.755, valid loss/error: 2.634 29.47
New best model saved
Average loss over 5429897 tokens: 2.782, valid loss/error: 2.634 29.43
New best model saved
Average loss over 5411567 tokens: 2.782, valid loss/error: 2.634 29.40
New best model saved
Average loss over 5418648 tokens: 2.797, valid loss/error: 2.634 29.38
New best model saved
Average loss over 5430752 tokens: 2.787, valid loss/error: 2.634 29.41
New best model saved
Average loss over 5433754 tokens: 2.797, valid loss/error: 2.633 29.40
New best model saved
Average loss over 5400908 tokens: 2.774, valid loss/error: 2.632 29.38
New best model saved
Average loss over 5403663 tokens: 2.790, valid loss/error: 2.632 29.37
New best model saved
Average loss over 5417050 tokens: 2.784, valid loss/error: 2.631 29.38
New best model saved
Average loss over 5405614 tokens: 2.782, valid loss/error: 2.633 29.42
Average loss over 5422166 tokens: 2.777, valid loss/error: 2.631 29.38
New best model saved
Average loss over 5423644 tokens: 2.784, valid loss/error: 2.632 29.42
Average loss over 5424857 tokens: 2.789, valid loss/error: 2.631 29.37
New best model saved
Average loss over 5432800 tokens: 2.780, valid loss/error: 2.631 29.38
New best model saved
Average loss over 5429128 tokens: 2.785, valid loss/error: 2.631 29.38
Average loss over 5416164 tokens: 2.796, valid loss/error: 2.630 29.36
New best model saved
Average loss over 5427960 tokens: 2.784, valid loss/error: 2.630 29.39
Average loss over 5422950 tokens: 2.794, valid loss/error: 2.630 29.40
Average loss over 5410492 tokens: 2.769, valid loss/error: 2.630 29.33
New best model saved
Average loss over 5430911 tokens: 2.792, valid loss/error: 2.630 29.35
Average loss over 5400901 tokens: 2.773, valid loss/error: 2.630 29.35
Average loss over 5409993 tokens: 2.768, valid loss/error: 2.631 29.38
Average loss over 5418006 tokens: 2.776, valid loss/error: 2.629 29.34
New best model saved
Average loss over 5413203 tokens: 2.781, valid loss/error: 2.630 29.33
New best model saved
Average loss over 5411970 tokens: 2.781, valid loss/error: 2.628 29.32
New best model saved
Average loss over 5410125 tokens: 2.766, valid loss/error: 2.628 29.34
Average loss over 5420003 tokens: 2.768, valid loss/error: 2.629 29.34
Average loss over 5402276 tokens: 2.780, valid loss/error: 2.628 29.36
New best model saved
Average loss over 5413386 tokens: 2.753, valid loss/error: 2.628 29.31
New best model saved
Average loss over 5402018 tokens: 2.777, valid loss/error: 2.628 29.32
Average loss over 5419337 tokens: 2.773, valid loss/error: 2.627 29.32
New best model saved
Average loss over 5421316 tokens: 2.792, valid loss/error: 2.626 29.35
New best model saved
Average loss over 5405815 tokens: 2.779, valid loss/error: 2.628 29.36
Average loss over 5430316 tokens: 2.761, valid loss/error: 2.627 29.33
Average loss over 5401434 tokens: 2.766, valid loss/error: 2.627 29.32
Average loss over 5407974 tokens: 2.766, valid loss/error: 2.628 29.30
New best model saved
Average loss over 5420584 tokens: 2.773, valid loss/error: 2.627 29.31
Average loss over 5401489 tokens: 2.767, valid loss/error: 2.627 29.32
Average loss over 5403289 tokens: 2.758, valid loss/error: 2.626 29.29
New best model saved
Average loss over 5396522 tokens: 2.766, valid loss/error: 2.627 29.30
Average loss over 5414043 tokens: 2.768, valid loss/error: 2.625 29.30
New best model saved
Average loss over 5426002 tokens: 2.780, valid loss/error: 2.626 29.28
New best model saved
Average loss over 5429172 tokens: 2.781, valid loss/error: 2.626 29.29
Average loss over 5416490 tokens: 2.764, valid loss/error: 2.626 29.30
Average loss over 5401223 tokens: 2.769, valid loss/error: 2.627 29.33
Average loss over 5399448 tokens: 2.760, valid loss/error: 2.626 29.31
Average loss over 5398330 tokens: 2.776, valid loss/error: 2.625 29.30
New best model saved
Average loss over 5396802 tokens: 2.764, valid loss/error: 2.627 29.32
Average loss over 5410690 tokens: 2.771, valid loss/error: 2.625 29.32
Average loss over 5406911 tokens: 2.775, valid loss/error: 2.626 29.35
Average loss over 5405968 tokens: 2.760, valid loss/error: 2.626 29.31
Average loss over 5423780 tokens: 2.779, valid loss/error: 2.626 29.32
Average loss over 5401216 tokens: 2.759, valid loss/error: 2.624 29.31
New best model saved
Average loss over 5412790 tokens: 2.750, valid loss/error: 2.626 29.31
Average loss over 5406304 tokens: 2.763, valid loss/error: 2.626 29.28
New best model saved
Average loss over 5409970 tokens: 2.757, valid loss/error: 2.625 29.31
Average loss over 5417058 tokens: 2.777, valid loss/error: 2.624 29.31
New best model saved
Average loss over 5411814 tokens: 2.776, valid loss/error: 2.624 29.30
Average loss over 4228761 tokens: 2.775
Epoch: 1, train loss: 2.778, valid loss/error: 2.625 29.32
Average loss over 5403737 tokens: 2.757, valid loss/error: 2.625 29.34
Average loss over 5413501 tokens: 2.771, valid loss/error: 2.625 29.34
Average loss over 5423112 tokens: 2.772, valid loss/error: 2.625 29.31
Average loss over 5404810 tokens: 2.757, valid loss/error: 2.625 29.32
Average loss over 5416237 tokens: 2.758, valid loss/error: 2.625 29.34
Average loss over 5420376 tokens: 2.765, valid loss/error: 2.624 29.28
New best model saved
Average loss over 5420066 tokens: 2.767, valid loss/error: 2.623 29.28
New best model saved
Average loss over 5398480 tokens: 2.757, valid loss/error: 2.624 29.27
New best model saved
Average loss over 5418650 tokens: 2.748, valid loss/error: 2.623 29.28
Average loss over 5410715 tokens: 2.753, valid loss/error: 2.624 29.27
Average loss over 5413776 tokens: 2.758, valid loss/error: 2.624 29.29
Average loss over 5408972 tokens: 2.772, valid loss/error: 2.624 29.28
Average loss over 5418262 tokens: 2.753, valid loss/error: 2.623 29.30
Average loss over 5409184 tokens: 2.756, valid loss/error: 2.622 29.23
New best model saved
Average loss over 5416705 tokens: 2.762, valid loss/error: 2.623 29.26
Average loss over 5413232 tokens: 2.778, valid loss/error: 2.624 29.28
Average loss over 5404317 tokens: 2.758, valid loss/error: 2.623 29.25
Average loss over 5419257 tokens: 2.774, valid loss/error: 2.623 29.28
Average loss over 5413507 tokens: 2.772, valid loss/error: 2.623 29.29
Average loss over 5422580 tokens: 2.764, valid loss/error: 2.623 29.26
Average loss over 5419340 tokens: 2.766, valid loss/error: 2.622 29.24
Average loss over 5413114 tokens: 2.761, valid loss/error: 2.623 29.24
Average loss over 5414929 tokens: 2.766, valid loss/error: 2.622 29.26
Average loss over 5398957 tokens: 2.759, valid loss/error: 2.623 29.26
Average loss over 5407486 tokens: 2.767, valid loss/error: 2.623 29.28
Average loss over 5408318 tokens: 2.763, valid loss/error: 2.622 29.27
Average loss over 5413039 tokens: 2.756, valid loss/error: 2.621 29.22
New best model saved
Average loss over 5397505 tokens: 2.771, valid loss/error: 2.622 29.24
Average loss over 5432073 tokens: 2.768, valid loss/error: 2.622 29.24
Average loss over 5405961 tokens: 2.750, valid loss/error: 2.621 29.22
New best model saved
Average loss over 5433032 tokens: 2.758, valid loss/error: 2.621 29.20
New best model saved
Average loss over 5425328 tokens: 2.759, valid loss/error: 2.621 29.22
Average loss over 5397482 tokens: 2.751, valid loss/error: 2.621 29.23
Average loss over 5408980 tokens: 2.764, valid loss/error: 2.621 29.21
Average loss over 5410313 tokens: 2.765, valid loss/error: 2.622 29.24
Average loss over 5418948 tokens: 2.738, valid loss/error: 2.621 29.23
Average loss over 5404282 tokens: 2.770, valid loss/error: 2.621 29.24
Average loss over 5392947 tokens: 2.743, valid loss/error: 2.621 29.22
Average loss over 5427587 tokens: 2.767, valid loss/error: 2.621 29.24
Average loss over 5432348 tokens: 2.767, valid loss/error: 2.621 29.26
Average loss over 5399896 tokens: 2.754, valid loss/error: 2.621 29.22
Average loss over 5405911 tokens: 2.753, valid loss/error: 2.621 29.21
Average loss over 5415965 tokens: 2.756, valid loss/error: 2.621 29.24
Average loss over 5417750 tokens: 2.753, valid loss/error: 2.621 29.23
Average loss over 5400534 tokens: 2.754, valid loss/error: 2.621 29.23
Average loss over 5408713 tokens: 2.744, valid loss/error: 2.620 29.24
New best model saved
Average loss over 5422928 tokens: 2.739, valid loss/error: 2.621 29.23
Average loss over 5416827 tokens: 2.738, valid loss/error: 2.621 29.20
New best model saved
Average loss over 5420765 tokens: 2.760, valid loss/error: 2.620 29.23
New best model saved
Average loss over 5424621 tokens: 2.770, valid loss/error: 2.621 29.23
Average loss over 5416604 tokens: 2.760, valid loss/error: 2.621 29.22
Average loss over 5402898 tokens: 2.758, valid loss/error: 2.621 29.20
Average loss over 5403954 tokens: 2.755, valid loss/error: 2.620 29.22
Average loss over 5421375 tokens: 2.763, valid loss/error: 2.620 29.18
New best model saved
Average loss over 5391693 tokens: 2.750, valid loss/error: 2.621 29.22
Average loss over 5412309 tokens: 2.769, valid loss/error: 2.621 29.23
Average loss over 5412812 tokens: 2.756, valid loss/error: 2.620 29.20
Average loss over 5413320 tokens: 2.755, valid loss/error: 2.620 29.21
Average loss over 5418118 tokens: 2.767, valid loss/error: 2.619 29.19
New best model saved
Average loss over 5411210 tokens: 2.745, valid loss/error: 2.620 29.22
Average loss over 5406815 tokens: 2.760, valid loss/error: 2.620 29.20
Average loss over 5418476 tokens: 2.752, valid loss/error: 2.621 29.19
Average loss over 5425712 tokens: 2.768, valid loss/error: 2.620 29.19
Average loss over 5413766 tokens: 2.739, valid loss/error: 2.621 29.21
Average loss over 5403236 tokens: 2.739, valid loss/error: 2.620 29.21
Average loss over 5409655 tokens: 2.756, valid loss/error: 2.619 29.21
Average loss over 5428057 tokens: 2.764, valid loss/error: 2.618 29.21
New best model saved
Average loss over 5400922 tokens: 2.738, valid loss/error: 2.619 29.22
Average loss over 5428921 tokens: 2.755, valid loss/error: 2.619 29.20
Average loss over 5398659 tokens: 2.762, valid loss/error: 2.618 29.19
Average loss over 5408241 tokens: 2.746, valid loss/error: 2.619 29.22
Average loss over 5415843 tokens: 2.760, valid loss/error: 2.619 29.20
Average loss over 5420118 tokens: 2.752, valid loss/error: 2.619 29.21
Average loss over 5405987 tokens: 2.739, valid loss/error: 2.619 29.22
Average loss over 4218846 tokens: 2.762
Epoch: 2, train loss: 2.758, valid loss/error: 2.619 29.24
Average loss over 5411604 tokens: 2.746, valid loss/error: 2.619 29.22
Average loss over 5419227 tokens: 2.751, valid loss/error: 2.619 29.21
Average loss over 5402258 tokens: 2.742, valid loss/error: 2.619 29.19
Average loss over 5421284 tokens: 2.755, valid loss/error: 2.618 29.20
New best model saved
Average loss over 5418344 tokens: 2.753, valid loss/error: 2.618 29.18
New best model saved
Average loss over 5402273 tokens: 2.740, valid loss/error: 2.619 29.20
Average loss over 5403413 tokens: 2.745, valid loss/error: 2.618 29.19
Average loss over 5402981 tokens: 2.753, valid loss/error: 2.619 29.19
Average loss over 5421849 tokens: 2.763, valid loss/error: 2.619 29.21
Average loss over 5429726 tokens: 2.735, valid loss/error: 2.618 29.21
New best model saved
Average loss over 5394605 tokens: 2.731, valid loss/error: 2.618 29.19
Average loss over 5413634 tokens: 2.750, valid loss/error: 2.619 29.18
New best model saved
Average loss over 5413131 tokens: 2.749, valid loss/error: 2.618 29.19
Average loss over 5407802 tokens: 2.735, valid loss/error: 2.618 29.18
Average loss over 5405657 tokens: 2.752, valid loss/error: 2.618 29.18
Average loss over 5407707 tokens: 2.748, valid loss/error: 2.619 29.20
Average loss over 5420183 tokens: 2.744, valid loss/error: 2.618 29.19
Average loss over 5406925 tokens: 2.749, valid loss/error: 2.618 29.17
New best model saved
Average loss over 5425563 tokens: 2.752, valid loss/error: 2.619 29.15
New best model saved
Average loss over 5404214 tokens: 2.754, valid loss/error: 2.618 29.18
Average loss over 5406812 tokens: 2.749, valid loss/error: 2.618 29.18
Average loss over 5416984 tokens: 2.765, valid loss/error: 2.619 29.18
Average loss over 5425189 tokens: 2.749, valid loss/error: 2.618 29.18
New best model saved
Average loss over 5411776 tokens: 2.743, valid loss/error: 2.619 29.22
Average loss over 5421925 tokens: 2.756, valid loss/error: 2.617 29.19
New best model saved
Average loss over 5411450 tokens: 2.745, valid loss/error: 2.619 29.20
Average loss over 5418416 tokens: 2.752, valid loss/error: 2.618 29.19
Average loss over 5404116 tokens: 2.736, valid loss/error: 2.618 29.20
Average loss over 5441318 tokens: 2.749, valid loss/error: 2.617 29.19
New best model saved
Average loss over 5402290 tokens: 2.751, valid loss/error: 2.618 29.21
Average loss over 5431864 tokens: 2.745, valid loss/error: 2.618 29.20
Average loss over 5413223 tokens: 2.754, valid loss/error: 2.617 29.19
Average loss over 5423552 tokens: 2.752, valid loss/error: 2.617 29.22
Average loss over 5413785 tokens: 2.738, valid loss/error: 2.618 29.21
Average loss over 5410332 tokens: 2.749, valid loss/error: 2.618 29.21
Average loss over 5417353 tokens: 2.754, valid loss/error: 2.618 29.19
Average loss over 5384214 tokens: 2.749, valid loss/error: 2.618 29.22
Average loss over 5413235 tokens: 2.749, valid loss/error: 2.617 29.22
Average loss over 5414680 tokens: 2.741, valid loss/error: 2.617 29.18
Average loss over 5425201 tokens: 2.761, valid loss/error: 2.618 29.23
Average loss over 5403228 tokens: 2.732, valid loss/error: 2.617 29.17
New best model saved
Average loss over 5409433 tokens: 2.727, valid loss/error: 2.618 29.23
Average loss over 5397374 tokens: 2.743, valid loss/error: 2.618 29.26
Average loss over 5415381 tokens: 2.765, valid loss/error: 2.618 29.20
Average loss over 5412825 tokens: 2.749, valid loss/error: 2.617 29.22
Average loss over 5426226 tokens: 2.747, valid loss/error: 2.617 29.24
New best model saved
Average loss over 5408851 tokens: 2.757, valid loss/error: 2.617 29.25
Average loss over 5411324 tokens: 2.743, valid loss/error: 2.618 29.25
Average loss over 5406634 tokens: 2.746, valid loss/error: 2.617 29.24
New best model saved
Average loss over 5410615 tokens: 2.755, valid loss/error: 2.617 29.22
New best model saved
Average loss over 5424212 tokens: 2.754, valid loss/error: 2.617 29.22
Average loss over 5416711 tokens: 2.745, valid loss/error: 2.617 29.24
Average loss over 5420794 tokens: 2.757, valid loss/error: 2.617 29.23
Average loss over 5421703 tokens: 2.736, valid loss/error: 2.616 29.22
New best model saved
Average loss over 5412588 tokens: 2.735, valid loss/error: 2.616 29.24
New best model saved
Average loss over 5411785 tokens: 2.746, valid loss/error: 2.617 29.21
Average loss over 5421004 tokens: 2.759, valid loss/error: 2.616 29.18
Average loss over 5400693 tokens: 2.743, valid loss/error: 2.617 29.22
Average loss over 5409323 tokens: 2.729, valid loss/error: 2.616 29.23
Average loss over 5413229 tokens: 2.750, valid loss/error: 2.615 29.19
New best model saved
Average loss over 5428698 tokens: 2.753, valid loss/error: 2.616 29.17
Average loss over 5396706 tokens: 2.767, valid loss/error: 2.616 29.18
Average loss over 5402896 tokens: 2.740, valid loss/error: 2.616 29.19
Average loss over 5427807 tokens: 2.750, valid loss/error: 2.616 29.17
Average loss over 5408811 tokens: 2.765, valid loss/error: 2.616 29.21
Average loss over 5401068 tokens: 2.743, valid loss/error: 2.616 29.17
Average loss over 5413860 tokens: 2.767, valid loss/error: 2.615 29.19
Average loss over 5419670 tokens: 2.745, valid loss/error: 2.617 29.18
Average loss over 5413751 tokens: 2.728, valid loss/error: 2.616 29.19
Average loss over 5396999 tokens: 2.747, valid loss/error: 2.616 29.17
Average loss over 5429956 tokens: 2.752, valid loss/error: 2.616 29.17
Average loss over 5410130 tokens: 2.746, valid loss/error: 2.615 29.18
Average loss over 5407339 tokens: 2.746, valid loss/error: 2.615 29.15
New best model saved
Average loss over 5407664 tokens: 2.758, valid loss/error: 2.615 29.21
Average loss over 4213519 tokens: 2.728
Epoch: 3, train loss: 2.748, valid loss/error: 2.615 29.17
Average loss over 5413972 tokens: 2.733, valid loss/error: 2.616 29.18
Average loss over 5416658 tokens: 2.748, valid loss/error: 2.615 29.18
Average loss over 5422515 tokens: 2.745, valid loss/error: 2.615 29.20
Average loss over 5402854 tokens: 2.754, valid loss/error: 2.616 29.18
Average loss over 5408407 tokens: 2.750, valid loss/error: 2.616 29.22
Average loss over 5420256 tokens: 2.736, valid loss/error: 2.616 29.17
Average loss over 5414680 tokens: 2.748, valid loss/error: 2.616 29.16
Average loss over 5418258 tokens: 2.733, valid loss/error: 2.616 29.19
Average loss over 5422101 tokens: 2.731, valid loss/error: 2.616 29.18
Average loss over 5397028 tokens: 2.719, valid loss/error: 2.616 29.15
New best model saved
Average loss over 5392212 tokens: 2.726, valid loss/error: 2.616 29.14
New best model saved
Average loss over 5416411 tokens: 2.748, valid loss/error: 2.616 29.19
Average loss over 5413347 tokens: 2.763, valid loss/error: 2.615 29.14
Average loss over 5415076 tokens: 2.744, valid loss/error: 2.616 29.18
Average loss over 5425412 tokens: 2.745, valid loss/error: 2.616 29.18
Average loss over 5406147 tokens: 2.740, valid loss/error: 2.616 29.18
Average loss over 5416548 tokens: 2.750, valid loss/error: 2.616 29.18
Average loss over 5411474 tokens: 2.737, valid loss/error: 2.615 29.14
New best model saved
Average loss over 5419937 tokens: 2.748, valid loss/error: 2.616 29.18
Average loss over 5410039 tokens: 2.733, valid loss/error: 2.616 29.18
Average loss over 5434126 tokens: 2.754, valid loss/error: 2.616 29.18
Average loss over 5413943 tokens: 2.739, valid loss/error: 2.615 29.12
New best model saved
Average loss over 5404163 tokens: 2.736, valid loss/error: 2.616 29.17
Average loss over 5397174 tokens: 2.725, valid loss/error: 2.614 29.16
New best model saved
Average loss over 5404337 tokens: 2.745, valid loss/error: 2.615 29.16
Average loss over 5413031 tokens: 2.727, valid loss/error: 2.615 29.19
Average loss over 5412345 tokens: 2.741, valid loss/error: 2.616 29.18
Average loss over 5417252 tokens: 2.730, valid loss/error: 2.615 29.19
Average loss over 5418932 tokens: 2.745, valid loss/error: 2.614 29.18
New best model saved
Average loss over 5416624 tokens: 2.748, valid loss/error: 2.616 29.20
Average loss over 5422662 tokens: 2.736, valid loss/error: 2.614 29.15
Average loss over 5402215 tokens: 2.748, valid loss/error: 2.615 29.20
Average loss over 5415903 tokens: 2.740, valid loss/error: 2.615 29.21
Average loss over 5436483 tokens: 2.747, valid loss/error: 2.615 29.20
Average loss over 5396363 tokens: 2.748, valid loss/error: 2.615 29.18
Average loss over 5415450 tokens: 2.735, valid loss/error: 2.615 29.20
Average loss over 5410240 tokens: 2.722, valid loss/error: 2.615 29.19
Average loss over 5423557 tokens: 2.750, valid loss/error: 2.615 29.18
Average loss over 5416869 tokens: 2.743, valid loss/error: 2.616 29.19
Average loss over 5401085 tokens: 2.734, valid loss/error: 2.615 29.23
Average loss over 5410263 tokens: 2.744, valid loss/error: 2.615 29.19
Average loss over 5404922 tokens: 2.743, valid loss/error: 2.615 29.20
Average loss over 5423529 tokens: 2.740, valid loss/error: 2.614 29.17
Average loss over 5399777 tokens: 2.721, valid loss/error: 2.614 29.15
Average loss over 5417713 tokens: 2.748, valid loss/error: 2.615 29.15
Average loss over 5430385 tokens: 2.753, valid loss/error: 2.614 29.13
Average loss over 5408094 tokens: 2.750, valid loss/error: 2.615 29.18
Average loss over 5408729 tokens: 2.728, valid loss/error: 2.614 29.16
Average loss over 5428397 tokens: 2.770, valid loss/error: 2.614 29.15
Average loss over 5421306 tokens: 2.742, valid loss/error: 2.615 29.17
Average loss over 5425497 tokens: 2.747, valid loss/error: 2.615 29.18
Average loss over 5403116 tokens: 2.742, valid loss/error: 2.615 29.18
Average loss over 5417419 tokens: 2.749, valid loss/error: 2.615 29.16
Average loss over 5400150 tokens: 2.729, valid loss/error: 2.615 29.19
Average loss over 5414064 tokens: 2.749, valid loss/error: 2.615 29.14
Average loss over 5407109 tokens: 2.735, valid loss/error: 2.614 29.12
New best model saved
Average loss over 5405428 tokens: 2.738, valid loss/error: 2.614 29.16
Average loss over 5399920 tokens: 2.741, valid loss/error: 2.614 29.14
Average loss over 5414918 tokens: 2.736, valid loss/error: 2.614 29.11
New best model saved
Average loss over 5419889 tokens: 2.738, valid loss/error: 2.614 29.16
Average loss over 5405739 tokens: 2.753, valid loss/error: 2.614 29.17
Average loss over 5414236 tokens: 2.719, valid loss/error: 2.614 29.14
Average loss over 5423436 tokens: 2.748, valid loss/error: 2.613 29.13
New best model saved
Average loss over 5413020 tokens: 2.740, valid loss/error: 2.614 29.13
Average loss over 5409615 tokens: 2.733, valid loss/error: 2.614 29.11
Average loss over 5403680 tokens: 2.754, valid loss/error: 2.614 29.17
Average loss over 5407249 tokens: 2.735, valid loss/error: 2.614 29.17
Average loss over 5400660 tokens: 2.742, valid loss/error: 2.613 29.19
New best model saved
Average loss over 5411439 tokens: 2.733, valid loss/error: 2.614 29.17
Average loss over 5412179 tokens: 2.732, valid loss/error: 2.613 29.12
New best model saved
Average loss over 5417064 tokens: 2.747, valid loss/error: 2.612 29.10
New best model saved
Average loss over 5422538 tokens: 2.725, valid loss/error: 2.613 29.12
Average loss over 5421646 tokens: 2.744, valid loss/error: 2.613 29.16
Average loss over 5391923 tokens: 2.740, valid loss/error: 2.613 29.16
Average loss over 4221767 tokens: 2.746
Epoch: 4, train loss: 2.741, valid loss/error: 2.613 29.13
Average loss over 5420419 tokens: 2.737, valid loss/error: 2.614 29.16
Average loss over 5422276 tokens: 2.744, valid loss/error: 2.613 29.13
Average loss over 5399501 tokens: 2.719, valid loss/error: 2.613 29.15
Average loss over 5411735 tokens: 2.723, valid loss/error: 2.613 29.15
Average loss over 5403005 tokens: 2.735, valid loss/error: 2.613 29.14
Average loss over 5404463 tokens: 2.739, valid loss/error: 2.613 29.13
Average loss over 5407748 tokens: 2.743, valid loss/error: 2.613 29.14
Average loss over 5398781 tokens: 2.726, valid loss/error: 2.613 29.17
Average loss over 5417251 tokens: 2.728, valid loss/error: 2.614 29.24
Average loss over 5410681 tokens: 2.726, valid loss/error: 2.613 29.18
Average loss over 5393232 tokens: 2.720, valid loss/error: 2.613 29.17
Average loss over 5414726 tokens: 2.746, valid loss/error: 2.614 29.21
Average loss over 5414209 tokens: 2.743, valid loss/error: 2.612 29.17
Average loss over 5419907 tokens: 2.752, valid loss/error: 2.613 29.20
Average loss over 5418152 tokens: 2.746, valid loss/error: 2.613 29.15
Average loss over 5415423 tokens: 2.751, valid loss/error: 2.613 29.15
Average loss over 5404943 tokens: 2.734, valid loss/error: 2.613 29.18
Average loss over 5414107 tokens: 2.743, valid loss/error: 2.613 29.18
Average loss over 5411509 tokens: 2.741, valid loss/error: 2.612 29.17
New best model saved
Average loss over 5416424 tokens: 2.748, valid loss/error: 2.613 29.18
Average loss over 5416307 tokens: 2.729, valid loss/error: 2.612 29.17
Average loss over 5406743 tokens: 2.720, valid loss/error: 2.613 29.16
Average loss over 5405936 tokens: 2.729, valid loss/error: 2.615 29.20
Average loss over 5408811 tokens: 2.732, valid loss/error: 2.614 29.18
Average loss over 5394423 tokens: 2.733, valid loss/error: 2.613 29.20
Average loss over 5413182 tokens: 2.730, valid loss/error: 2.613 29.19
Average loss over 5422601 tokens: 2.726, valid loss/error: 2.612 29.15
New best model saved
Average loss over 5426298 tokens: 2.741, valid loss/error: 2.613 29.17
Average loss over 5407799 tokens: 2.732, valid loss/error: 2.613 29.17
Average loss over 5418775 tokens: 2.743, valid loss/error: 2.613 29.15
Average loss over 5395907 tokens: 2.732, valid loss/error: 2.612 29.16
Average loss over 5411853 tokens: 2.730, valid loss/error: 2.612 29.16
New best model saved
Average loss over 5400687 tokens: 2.733, valid loss/error: 2.612 29.18
Average loss over 5412908 tokens: 2.749, valid loss/error: 2.613 29.16
Average loss over 5421817 tokens: 2.729, valid loss/error: 2.613 29.16
Average loss over 5406769 tokens: 2.732, valid loss/error: 2.614 29.17
Average loss over 5412622 tokens: 2.744, valid loss/error: 2.614 29.12
Average loss over 5409906 tokens: 2.736, valid loss/error: 2.613 29.14
Average loss over 5413554 tokens: 2.746, valid loss/error: 2.613 29.18
Average loss over 5439760 tokens: 2.736, valid loss/error: 2.612 29.10
Average loss over 5434041 tokens: 2.756, valid loss/error: 2.612 29.10
New best model saved
Average loss over 5411373 tokens: 2.733, valid loss/error: 2.612 29.17
Average loss over 5410493 tokens: 2.732, valid loss/error: 2.612 29.13
New best model saved
Average loss over 5437435 tokens: 2.733, valid loss/error: 2.613 29.16
Average loss over 5414128 tokens: 2.738, valid loss/error: 2.612 29.15
Average loss over 5404911 tokens: 2.732, valid loss/error: 2.613 29.14
Average loss over 5415816 tokens: 2.748, valid loss/error: 2.613 29.14
Average loss over 5408083 tokens: 2.726, valid loss/error: 2.613 29.18
Average loss over 5408723 tokens: 2.719, valid loss/error: 2.613 29.14
Average loss over 5416470 tokens: 2.735, valid loss/error: 2.611 29.15
New best model saved
Average loss over 5388368 tokens: 2.721, valid loss/error: 2.613 29.13
Average loss over 5413078 tokens: 2.717, valid loss/error: 2.612 29.16
Average loss over 5415252 tokens: 2.741, valid loss/error: 2.612 29.17
Average loss over 5403783 tokens: 2.748, valid loss/error: 2.613 29.19
Average loss over 5415169 tokens: 2.718, valid loss/error: 2.613 29.17
Average loss over 5430122 tokens: 2.740, valid loss/error: 2.612 29.15
Average loss over 5415754 tokens: 2.741, valid loss/error: 2.612 29.16
Average loss over 5428856 tokens: 2.743, valid loss/error: 2.612 29.15
Average loss over 5420575 tokens: 2.717, valid loss/error: 2.612 29.18
Average loss over 5418205 tokens: 2.732, valid loss/error: 2.611 29.14
New best model saved
Average loss over 5413844 tokens: 2.753, valid loss/error: 2.612 29.16
Average loss over 5407208 tokens: 2.737, valid loss/error: 2.611 29.19
New best model saved
Average loss over 5404205 tokens: 2.730, valid loss/error: 2.611 29.17
New best model saved
Average loss over 5420034 tokens: 2.737, valid loss/error: 2.611 29.16
Average loss over 5419480 tokens: 2.717, valid loss/error: 2.613 29.19
Average loss over 5419489 tokens: 2.752, valid loss/error: 2.611 29.14
New best model saved
Average loss over 5407952 tokens: 2.740, valid loss/error: 2.612 29.18
Average loss over 5419558 tokens: 2.747, valid loss/error: 2.612 29.18
Average loss over 5410134 tokens: 2.728, valid loss/error: 2.612 29.16
Average loss over 5399976 tokens: 2.725, valid loss/error: 2.611 29.20
Average loss over 5425452 tokens: 2.737, valid loss/error: 2.612 29.16
Average loss over 5420234 tokens: 2.740, valid loss/error: 2.610 29.19
New best model saved
Average loss over 5402994 tokens: 2.739, valid loss/error: 2.612 29.20
Average loss over 5413395 tokens: 2.730, valid loss/error: 2.612 29.18
Average loss over 4213162 tokens: 2.736
Epoch: 5, train loss: 2.735, valid loss/error: 2.611 29.16
Average loss over 5410518 tokens: 2.739, valid loss/error: 2.611 29.18
Average loss over 5429115 tokens: 2.750, valid loss/error: 2.612 29.17
Average loss over 5411034 tokens: 2.724, valid loss/error: 2.612 29.20
Average loss over 5420086 tokens: 2.724, valid loss/error: 2.611 29.17
Average loss over 5426380 tokens: 2.732, valid loss/error: 2.610 29.14
Average loss over 5422267 tokens: 2.749, valid loss/error: 2.612 29.18
Average loss over 5419112 tokens: 2.731, valid loss/error: 2.611 29.18
Average loss over 5403866 tokens: 2.720, valid loss/error: 2.611 29.20
Average loss over 5404388 tokens: 2.731, valid loss/error: 2.611 29.16
Average loss over 5420884 tokens: 2.721, valid loss/error: 2.611 29.18
Average loss over 5413705 tokens: 2.734, valid loss/error: 2.612 29.19
Average loss over 5423352 tokens: 2.737, valid loss/error: 2.613 29.17
Average loss over 5417554 tokens: 2.722, valid loss/error: 2.612 29.18
Average loss over 5425991 tokens: 2.734, valid loss/error: 2.612 29.17
Average loss over 5399303 tokens: 2.739, valid loss/error: 2.612 29.20
Average loss over 5415883 tokens: 2.714, valid loss/error: 2.612 29.17
Average loss over 5417805 tokens: 2.728, valid loss/error: 2.612 29.18
Average loss over 5396003 tokens: 2.738, valid loss/error: 2.611 29.16
Average loss over 5409653 tokens: 2.727, valid loss/error: 2.612 29.17
Average loss over 5415301 tokens: 2.736, valid loss/error: 2.612 29.16
Average loss over 5417060 tokens: 2.733, valid loss/error: 2.611 29.15
Average loss over 5413449 tokens: 2.723, valid loss/error: 2.612 29.18
Average loss over 5395842 tokens: 2.726, valid loss/error: 2.612 29.16
Average loss over 5423790 tokens: 2.728, valid loss/error: 2.611 29.18
Average loss over 5424852 tokens: 2.728, valid loss/error: 2.612 29.17
Average loss over 5432002 tokens: 2.757, valid loss/error: 2.612 29.18
Average loss over 5402456 tokens: 2.737, valid loss/error: 2.611 29.16
Average loss over 5421677 tokens: 2.727, valid loss/error: 2.612 29.17
Average loss over 5421179 tokens: 2.725, valid loss/error: 2.611 29.19
Average loss over 5419189 tokens: 2.734, valid loss/error: 2.611 29.18
Average loss over 5423915 tokens: 2.734, valid loss/error: 2.612 29.17
Average loss over 5398952 tokens: 2.720, valid loss/error: 2.610 29.16
New best model saved
Average loss over 5411981 tokens: 2.716, valid loss/error: 2.611 29.17
Average loss over 5402231 tokens: 2.737, valid loss/error: 2.612 29.21
Average loss over 5405590 tokens: 2.732, valid loss/error: 2.612 29.17
Average loss over 5407740 tokens: 2.729, valid loss/error: 2.612 29.16
Average loss over 5400414 tokens: 2.727, valid loss/error: 2.611 29.13
Average loss over 5412087 tokens: 2.737, valid loss/error: 2.611 29.15
Average loss over 5413381 tokens: 2.734, valid loss/error: 2.611 29.15
Average loss over 5418392 tokens: 2.737, valid loss/error: 2.611 29.17
Average loss over 5400073 tokens: 2.726, valid loss/error: 2.611 29.17
Average loss over 5414166 tokens: 2.723, valid loss/error: 2.611 29.12
Average loss over 5415434 tokens: 2.735, valid loss/error: 2.611 29.17
Average loss over 5404826 tokens: 2.716, valid loss/error: 2.611 29.14
Average loss over 5403162 tokens: 2.723, valid loss/error: 2.611 29.18
Average loss over 5403184 tokens: 2.737, valid loss/error: 2.611 29.17
Average loss over 5422900 tokens: 2.739, valid loss/error: 2.611 29.17
Average loss over 5431587 tokens: 2.740, valid loss/error: 2.612 29.17
Average loss over 5424231 tokens: 2.729, valid loss/error: 2.612 29.20
Average loss over 5406075 tokens: 2.724, valid loss/error: 2.611 29.12
Average loss over 5417731 tokens: 2.742, valid loss/error: 2.610 29.16
Average loss over 5411545 tokens: 2.733, valid loss/error: 2.610 29.16
Average loss over 5412759 tokens: 2.722, valid loss/error: 2.610 29.14
New best model saved
Average loss over 5408375 tokens: 2.727, valid loss/error: 2.611 29.14
Average loss over 5413648 tokens: 2.734, valid loss/error: 2.612 29.18
Average loss over 5410777 tokens: 2.731, valid loss/error: 2.610 29.17
Average loss over 5415916 tokens: 2.725, valid loss/error: 2.610 29.19
Average loss over 5400287 tokens: 2.712, valid loss/error: 2.611 29.14
Average loss over 5411290 tokens: 2.721, valid loss/error: 2.612 29.16
Average loss over 5414322 tokens: 2.725, valid loss/error: 2.611 29.14
Average loss over 5411464 tokens: 2.722, valid loss/error: 2.611 29.14
Average loss over 5404553 tokens: 2.720, valid loss/error: 2.610 29.13
Average loss over 5414273 tokens: 2.733, valid loss/error: 2.612 29.16
Average loss over 5417698 tokens: 2.733, valid loss/error: 2.611 29.14
Average loss over 5404817 tokens: 2.744, valid loss/error: 2.611 29.17
Average loss over 5416171 tokens: 2.753, valid loss/error: 2.611 29.13
Average loss over 5412435 tokens: 2.732, valid loss/error: 2.610 29.13
Average loss over 5401342 tokens: 2.737, valid loss/error: 2.610 29.10
Average loss over 5407934 tokens: 2.714, valid loss/error: 2.610 29.14
Average loss over 5418606 tokens: 2.742, valid loss/error: 2.611 29.16
Average loss over 5412422 tokens: 2.732, valid loss/error: 2.612 29.16
Average loss over 5413879 tokens: 2.732, valid loss/error: 2.611 29.15
Average loss over 5403593 tokens: 2.742, valid loss/error: 2.610 29.13
Average loss over 5408519 tokens: 2.724, valid loss/error: 2.612 29.16
Average loss over 4214529 tokens: 2.730
Epoch: 6, train loss: 2.731, valid loss/error: 2.611 29.15
Average loss over 5398303 tokens: 2.711, valid loss/error: 2.610 29.15
Average loss over 5424336 tokens: 2.746, valid loss/error: 2.611 29.12
Average loss over 5405467 tokens: 2.723, valid loss/error: 2.610 29.17
Average loss over 5413723 tokens: 2.720, valid loss/error: 2.611 29.12
Average loss over 5405936 tokens: 2.730, valid loss/error: 2.610 29.16
Average loss over 5417449 tokens: 2.725, valid loss/error: 2.611 29.12
Average loss over 5415563 tokens: 2.720, valid loss/error: 2.611 29.16
Average loss over 5430481 tokens: 2.725, valid loss/error: 2.612 29.16
Average loss over 5416356 tokens: 2.723, valid loss/error: 2.610 29.14
Average loss over 5419423 tokens: 2.730, valid loss/error: 2.611 29.13
Average loss over 5398921 tokens: 2.718, valid loss/error: 2.610 29.13
Average loss over 5410798 tokens: 2.728, valid loss/error: 2.611 29.17
Average loss over 5403517 tokens: 2.726, valid loss/error: 2.610 29.14
Average loss over 5404295 tokens: 2.726, valid loss/error: 2.611 29.12
Average loss over 5402475 tokens: 2.718, valid loss/error: 2.611 29.14
Average loss over 5411547 tokens: 2.716, valid loss/error: 2.610 29.11
Average loss over 5410600 tokens: 2.720, valid loss/error: 2.610 29.13
Average loss over 5412992 tokens: 2.740, valid loss/error: 2.611 29.13
Average loss over 5421999 tokens: 2.722, valid loss/error: 2.610 29.13
Average loss over 5417942 tokens: 2.730, valid loss/error: 2.611 29.15
Average loss over 5411002 tokens: 2.715, valid loss/error: 2.610 29.18
Average loss over 5438699 tokens: 2.736, valid loss/error: 2.612 29.18
Average loss over 5421069 tokens: 2.713, valid loss/error: 2.610 29.16
New best model saved
Average loss over 1747002 tokens: 2.709
Epoch: 7, train loss: 2.724, valid loss/error: 2.610 29.17
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/eva_2.571_28.52.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2_2.630_2.645_29.63.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_300k/std_20epochs/eva_2.590_28.62.h5
Init lr: 1e-05, Dev Loss/Error: 4.173 29.63
Average loss over 10922631 tokens: 2.093, valid loss/error: 3.864 29.51
New best model saved
Average loss over 10912242 tokens: 2.091, valid loss/error: 3.690 29.45
New best model saved
Average loss over 10903525 tokens: 2.087, valid loss/error: 3.537 29.42
New best model saved
Average loss over 10935674 tokens: 2.084, valid loss/error: 3.381 29.40
New best model saved
Average loss over 10927192 tokens: 2.085, valid loss/error: 3.192 29.38
New best model saved
Average loss over 10898419 tokens: 2.081, valid loss/error: 3.012 29.34
New best model saved
Average loss over 10919645 tokens: 2.085, valid loss/error: 2.791 29.37
New best model saved
Average loss over 10909413 tokens: 2.084, valid loss/error: 2.616 29.37
New best model saved
Average loss over 10912747 tokens: 2.084, valid loss/error: 2.430 29.40
New best model saved
Average loss over 10926721 tokens: 2.074, valid loss/error: 2.343 29.36
New best model saved
Average loss over 10930853 tokens: 2.080, valid loss/error: 2.233 29.34
New best model saved
Average loss over 10922578 tokens: 2.075, valid loss/error: 2.177 29.32
New best model saved
Average loss over 10924595 tokens: 2.078, valid loss/error: 2.157 29.36
New best model saved
Average loss over 10953441 tokens: 2.082, valid loss/error: 2.158 29.30
New best model saved
Average loss over 10919643 tokens: 2.073, valid loss/error: 2.151 29.31
New best model saved
Average loss over 10928755 tokens: 2.077, valid loss/error: 2.167 29.32
Average loss over 10909990 tokens: 2.065, valid loss/error: 2.164 29.27
New best model saved
Average loss over 10929670 tokens: 2.067, valid loss/error: 2.162 29.26
New best model saved
Average loss over 10914681 tokens: 2.068, valid loss/error: 2.163 29.26
New best model saved
Average loss over 10911148 tokens: 2.073, valid loss/error: 2.176 29.27
Average loss over 10928578 tokens: 2.076, valid loss/error: 2.155 29.28
Average loss over 10944320 tokens: 2.079, valid loss/error: 2.167 29.29
Average loss over 10956653 tokens: 2.086, valid loss/error: 2.156 29.25
New best model saved
Average loss over 10934354 tokens: 2.074, valid loss/error: 2.156 29.28
Average loss over 10922102 tokens: 2.074, valid loss/error: 2.165 29.25
New best model saved
Average loss over 10927618 tokens: 2.070, valid loss/error: 2.157 29.25
New best model saved
Average loss over 10915702 tokens: 2.068, valid loss/error: 2.174 29.26
Average loss over 10918736 tokens: 2.066, valid loss/error: 2.157 29.24
New best model saved
Average loss over 10925325 tokens: 2.063, valid loss/error: 2.143 29.23
New best model saved
Average loss over 10926712 tokens: 2.077, valid loss/error: 2.162 29.26
Average loss over 10930992 tokens: 2.063, valid loss/error: 2.166 29.24
Average loss over 10914732 tokens: 2.070, valid loss/error: 2.163 29.22
New best model saved
Average loss over 10930820 tokens: 2.069, valid loss/error: 2.146 29.19
New best model saved
Average loss over 10931017 tokens: 2.071, valid loss/error: 2.178 29.20
Average loss over 10887027 tokens: 2.066, valid loss/error: 2.151 29.22
Average loss over 10909935 tokens: 2.073, valid loss/error: 2.138 29.21
New best model saved
Average loss over 10915059 tokens: 2.072, valid loss/error: 2.152 29.22
Average loss over 10932874 tokens: 2.068, valid loss/error: 2.151 29.23
Average loss over 10904063 tokens: 2.064, valid loss/error: 2.166 29.20
Average loss over 10929757 tokens: 2.059, valid loss/error: 2.158 29.22
Average loss over 10919318 tokens: 2.069, valid loss/error: 2.138 29.19
New best model saved
Average loss over 10911529 tokens: 2.066, valid loss/error: 2.146 29.21
Average loss over 2702362 tokens: 2.070
Epoch: 1, train loss: 2.074, valid loss/error: 2.159 29.22
Average loss over 10915069 tokens: 2.066, valid loss/error: 2.162 29.20
Average loss over 10919908 tokens: 2.068, valid loss/error: 2.139 29.20
Average loss over 10910541 tokens: 2.061, valid loss/error: 2.142 29.18
New best model saved
Average loss over 10913219 tokens: 2.067, valid loss/error: 2.142 29.23
Average loss over 10909479 tokens: 2.066, valid loss/error: 2.154 29.20
Average loss over 10915739 tokens: 2.062, valid loss/error: 2.156 29.19
Average loss over 10917230 tokens: 2.064, valid loss/error: 2.138 29.16
New best model saved
Average loss over 10943326 tokens: 2.063, valid loss/error: 2.130 29.22
New best model saved
Average loss over 10925690 tokens: 2.061, valid loss/error: 2.126 29.21
New best model saved
Average loss over 10941515 tokens: 2.069, valid loss/error: 2.154 29.18
Average loss over 10917631 tokens: 2.064, valid loss/error: 2.134 29.18
Average loss over 10926463 tokens: 2.059, valid loss/error: 2.140 29.21
Average loss over 10896138 tokens: 2.064, valid loss/error: 2.135 29.17
Average loss over 10917844 tokens: 2.062, valid loss/error: 2.134 29.18
Average loss over 10918215 tokens: 2.061, valid loss/error: 2.151 29.21
Average loss over 10935570 tokens: 2.066, valid loss/error: 2.150 29.18
Average loss over 10936462 tokens: 2.067, valid loss/error: 2.130 29.15
New best model saved
Average loss over 10892257 tokens: 2.048, valid loss/error: 2.128 29.17
Average loss over 10907670 tokens: 2.061, valid loss/error: 2.138 29.18
Average loss over 10918091 tokens: 2.065, valid loss/error: 2.138 29.16
Average loss over 10890575 tokens: 2.056, valid loss/error: 2.133 29.19
Average loss over 10936376 tokens: 2.065, valid loss/error: 2.146 29.16
Average loss over 10908565 tokens: 2.061, valid loss/error: 2.134 29.15
Average loss over 10916592 tokens: 2.064, valid loss/error: 2.141 29.16
Average loss over 10906876 tokens: 2.057, valid loss/error: 2.126 29.17
Average loss over 10926222 tokens: 2.053, valid loss/error: 2.145 29.19
Average loss over 10920727 tokens: 2.058, valid loss/error: 2.130 29.16
Average loss over 10921172 tokens: 2.053, valid loss/error: 2.168 29.12
New best model saved
Average loss over 10909962 tokens: 2.064, valid loss/error: 2.126 29.11
New best model saved
Average loss over 10909993 tokens: 2.066, valid loss/error: 2.129 29.12
Average loss over 10946439 tokens: 2.062, valid loss/error: 2.138 29.14
Average loss over 10915860 tokens: 2.064, valid loss/error: 2.156 29.15
Average loss over 10931337 tokens: 2.061, valid loss/error: 2.121 29.11
New best model saved
Average loss over 10926077 tokens: 2.069, valid loss/error: 2.133 29.15
Average loss over 10934202 tokens: 2.071, valid loss/error: 2.141 29.17
Average loss over 10935996 tokens: 2.063, valid loss/error: 2.135 29.14
Average loss over 10932755 tokens: 2.069, valid loss/error: 2.122 29.18
Average loss over 10919012 tokens: 2.057, valid loss/error: 2.136 29.13
Average loss over 10924230 tokens: 2.061, valid loss/error: 2.135 29.12
Average loss over 10938007 tokens: 2.065, valid loss/error: 2.127 29.18
Average loss over 10908018 tokens: 2.056, valid loss/error: 2.168 29.16
Average loss over 10927313 tokens: 2.052, valid loss/error: 2.119 29.14
New best model saved
Average loss over 2709010 tokens: 2.071
Epoch: 2, train loss: 2.062, valid loss/error: 2.143 29.12
Average loss over 10906824 tokens: 2.054, valid loss/error: 2.124 29.12
Average loss over 10931446 tokens: 2.058, valid loss/error: 2.110 29.11
New best model saved
Average loss over 10926454 tokens: 2.057, valid loss/error: 2.130 29.12
Average loss over 10928786 tokens: 2.058, valid loss/error: 2.130 29.12
Average loss over 10932819 tokens: 2.054, valid loss/error: 2.125 29.13
Average loss over 10913180 tokens: 2.056, valid loss/error: 2.142 29.16
Average loss over 10920168 tokens: 2.059, valid loss/error: 2.113 29.14
Average loss over 10881473 tokens: 2.050, valid loss/error: 2.121 29.11
Average loss over 10915107 tokens: 2.055, valid loss/error: 2.130 29.10
New best model saved
Average loss over 10937911 tokens: 2.059, valid loss/error: 2.125 29.08
New best model saved
Average loss over 10918480 tokens: 2.050, valid loss/error: 2.121 29.09
Average loss over 10904888 tokens: 2.051, valid loss/error: 2.120 29.09
Average loss over 10934199 tokens: 2.060, valid loss/error: 2.124 29.07
New best model saved
Average loss over 10929309 tokens: 2.060, valid loss/error: 2.134 29.12
Average loss over 10922486 tokens: 2.059, valid loss/error: 2.120 29.11
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/eva_2.571_28.52.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2_2.630_2.645_29.63.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_300k/std_20epochs/eva_2.590_28.62.h5
Init lr: 1e-05, Dev Loss/Error: 4.173 29.63
Average loss over 10922631 tokens: 2.093, valid loss/error: 3.864 29.51
New best model saved
Average loss over 10912242 tokens: 2.091, valid loss/error: 3.690 29.45
New best model saved
Average loss over 10903525 tokens: 2.087, valid loss/error: 3.537 29.42
New best model saved
Average loss over 10935674 tokens: 2.084, valid loss/error: 3.381 29.40
New best model saved
Average loss over 10927192 tokens: 2.085, valid loss/error: 3.192 29.38
New best model saved
Average loss over 10898419 tokens: 2.081, valid loss/error: 3.012 29.34
New best model saved
Average loss over 10919645 tokens: 2.085, valid loss/error: 2.791 29.37
New best model saved
Average loss over 10909413 tokens: 2.084, valid loss/error: 2.616 29.37
New best model saved
Average loss over 10912747 tokens: 2.084, valid loss/error: 2.430 29.40
New best model saved
Average loss over 10926721 tokens: 2.074, valid loss/error: 2.343 29.36
New best model saved
Average loss over 10930853 tokens: 2.080, valid loss/error: 2.233 29.34
New best model saved
Average loss over 10922578 tokens: 2.075, valid loss/error: 2.177 29.32
New best model saved
Average loss over 10924595 tokens: 2.078, valid loss/error: 2.157 29.36
New best model saved
Average loss over 10953441 tokens: 2.082, valid loss/error: 2.158 29.30
New best model saved
Average loss over 10919643 tokens: 2.073, valid loss/error: 2.151 29.31
New best model saved
Average loss over 10928755 tokens: 2.077, valid loss/error: 2.167 29.32
Average loss over 10909990 tokens: 2.065, valid loss/error: 2.164 29.27
New best model saved
Average loss over 10929670 tokens: 2.067, valid loss/error: 2.162 29.26
New best model saved
Average loss over 10914681 tokens: 2.068, valid loss/error: 2.163 29.26
New best model saved
Average loss over 10911148 tokens: 2.073, valid loss/error: 2.176 29.27
Average loss over 10928578 tokens: 2.076, valid loss/error: 2.155 29.28
Average loss over 10944320 tokens: 2.079, valid loss/error: 2.167 29.29
Average loss over 10956653 tokens: 2.086, valid loss/error: 2.156 29.25
New best model saved
Average loss over 10934354 tokens: 2.074, valid loss/error: 2.156 29.28
Average loss over 10922102 tokens: 2.074, valid loss/error: 2.165 29.25
New best model saved
Average loss over 10927618 tokens: 2.070, valid loss/error: 2.157 29.25
New best model saved
Average loss over 10915702 tokens: 2.068, valid loss/error: 2.174 29.26
Average loss over 10918736 tokens: 2.066, valid loss/error: 2.157 29.24
New best model saved
Average loss over 10925325 tokens: 2.063, valid loss/error: 2.143 29.23
New best model saved
Average loss over 10926712 tokens: 2.077, valid loss/error: 2.162 29.26
Average loss over 10930992 tokens: 2.063, valid loss/error: 2.166 29.24
Average loss over 10914732 tokens: 2.070, valid loss/error: 2.163 29.22
New best model saved
Average loss over 10930820 tokens: 2.069, valid loss/error: 2.146 29.19
New best model saved
Average loss over 10931017 tokens: 2.071, valid loss/error: 2.178 29.20
Average loss over 10887027 tokens: 2.066, valid loss/error: 2.151 29.22
Average loss over 10909935 tokens: 2.073, valid loss/error: 2.138 29.21
New best model saved
Average loss over 10915059 tokens: 2.072, valid loss/error: 2.152 29.22
Average loss over 10932874 tokens: 2.068, valid loss/error: 2.151 29.23
Average loss over 10904063 tokens: 2.064, valid loss/error: 2.166 29.20
Average loss over 10929757 tokens: 2.059, valid loss/error: 2.158 29.22
Average loss over 10919318 tokens: 2.069, valid loss/error: 2.138 29.19
New best model saved
Average loss over 10911529 tokens: 2.066, valid loss/error: 2.146 29.21
Average loss over 2702362 tokens: 2.070
Epoch: 1, train loss: 2.074, valid loss/error: 2.159 29.22
Average loss over 10915069 tokens: 2.066, valid loss/error: 2.162 29.20
Average loss over 10919908 tokens: 2.068, valid loss/error: 2.139 29.20
Average loss over 10910541 tokens: 2.061, valid loss/error: 2.142 29.18
New best model saved
Average loss over 10913219 tokens: 2.067, valid loss/error: 2.142 29.23
Average loss over 10909479 tokens: 2.066, valid loss/error: 2.154 29.20
Average loss over 10915739 tokens: 2.062, valid loss/error: 2.156 29.19
Average loss over 10917230 tokens: 2.064, valid loss/error: 2.138 29.16
New best model saved
Average loss over 10943326 tokens: 2.063, valid loss/error: 2.130 29.22
New best model saved
Average loss over 10925690 tokens: 2.061, valid loss/error: 2.126 29.21
New best model saved
Average loss over 10941515 tokens: 2.069, valid loss/error: 2.154 29.18
Average loss over 10917631 tokens: 2.064, valid loss/error: 2.134 29.18
Average loss over 10926463 tokens: 2.059, valid loss/error: 2.140 29.21
Average loss over 10896138 tokens: 2.064, valid loss/error: 2.135 29.17
Average loss over 10917844 tokens: 2.062, valid loss/error: 2.134 29.18
Average loss over 10918215 tokens: 2.061, valid loss/error: 2.151 29.21
Average loss over 10935570 tokens: 2.066, valid loss/error: 2.150 29.18
Average loss over 10936462 tokens: 2.067, valid loss/error: 2.130 29.15
New best model saved
Average loss over 10892257 tokens: 2.048, valid loss/error: 2.128 29.17
Average loss over 10907670 tokens: 2.061, valid loss/error: 2.138 29.18
Average loss over 10918091 tokens: 2.065, valid loss/error: 2.138 29.16
Average loss over 10890575 tokens: 2.056, valid loss/error: 2.133 29.19
Average loss over 10936376 tokens: 2.065, valid loss/error: 2.146 29.16
Average loss over 10908565 tokens: 2.061, valid loss/error: 2.134 29.15
Average loss over 10916592 tokens: 2.064, valid loss/error: 2.141 29.16
Average loss over 10906876 tokens: 2.057, valid loss/error: 2.126 29.17
Average loss over 10926222 tokens: 2.053, valid loss/error: 2.145 29.19
Average loss over 10920727 tokens: 2.058, valid loss/error: 2.130 29.16
Average loss over 10921172 tokens: 2.053, valid loss/error: 2.168 29.12
New best model saved
Average loss over 10909962 tokens: 2.064, valid loss/error: 2.126 29.11
New best model saved
Average loss over 10909993 tokens: 2.066, valid loss/error: 2.129 29.12
Average loss over 10946439 tokens: 2.062, valid loss/error: 2.138 29.14
Average loss over 10915860 tokens: 2.064, valid loss/error: 2.156 29.15
Average loss over 10931337 tokens: 2.061, valid loss/error: 2.121 29.11
New best model saved
Average loss over 10926077 tokens: 2.069, valid loss/error: 2.133 29.15
Average loss over 10934202 tokens: 2.071, valid loss/error: 2.141 29.17
Average loss over 10935996 tokens: 2.063, valid loss/error: 2.135 29.14
Average loss over 10932755 tokens: 2.069, valid loss/error: 2.122 29.18
Average loss over 10919012 tokens: 2.057, valid loss/error: 2.136 29.13
Average loss over 10924230 tokens: 2.061, valid loss/error: 2.135 29.12
Average loss over 10938007 tokens: 2.065, valid loss/error: 2.127 29.18
Average loss over 10908018 tokens: 2.056, valid loss/error: 2.168 29.16
Average loss over 10927313 tokens: 2.052, valid loss/error: 2.119 29.14
New best model saved
Average loss over 2709010 tokens: 2.071
Epoch: 2, train loss: 2.062, valid loss/error: 2.143 29.12
Average loss over 10906824 tokens: 2.054, valid loss/error: 2.124 29.12
Average loss over 10931446 tokens: 2.058, valid loss/error: 2.110 29.11
New best model saved
Average loss over 10926454 tokens: 2.057, valid loss/error: 2.130 29.12
Average loss over 10928786 tokens: 2.058, valid loss/error: 2.130 29.12
Average loss over 10932819 tokens: 2.054, valid loss/error: 2.125 29.13
Average loss over 10913180 tokens: 2.056, valid loss/error: 2.142 29.16
Average loss over 10920168 tokens: 2.059, valid loss/error: 2.113 29.14
Average loss over 10881473 tokens: 2.050, valid loss/error: 2.121 29.11
Average loss over 10915107 tokens: 2.055, valid loss/error: 2.130 29.10
New best model saved
Average loss over 10937911 tokens: 2.059, valid loss/error: 2.125 29.08
New best model saved
Average loss over 10918480 tokens: 2.050, valid loss/error: 2.121 29.09
Average loss over 10904888 tokens: 2.051, valid loss/error: 2.120 29.09
Average loss over 10934199 tokens: 2.060, valid loss/error: 2.124 29.07
New best model saved
Average loss over 10929309 tokens: 2.060, valid loss/error: 2.134 29.12
Average loss over 10922486 tokens: 2.059, valid loss/error: 2.120 29.11
Average loss over 10928361 tokens: 2.055, valid loss/error: 2.114 29.07
Average loss over 10926018 tokens: 2.062, valid loss/error: 2.127 29.09
Average loss over 10918300 tokens: 2.058, valid loss/error: 2.144 29.08
Average loss over 10944646 tokens: 2.057, valid loss/error: 2.117 29.09
Average loss over 10931294 tokens: 2.054, valid loss/error: 2.117 29.09
Average loss over 10901832 tokens: 2.051, valid loss/error: 2.121 29.06
New best model saved
Average loss over 10934579 tokens: 2.056, valid loss/error: 2.139 29.08
Average loss over 10927213 tokens: 2.060, valid loss/error: 2.114 29.04
New best model saved
Average loss over 10904522 tokens: 2.055, valid loss/error: 2.124 29.07
Average loss over 10926241 tokens: 2.055, valid loss/error: 2.137 29.06
Average loss over 10942082 tokens: 2.050, valid loss/error: 2.137 29.04
New best model saved
Average loss over 10933833 tokens: 2.066, valid loss/error: 2.138 29.02
New best model saved
Average loss over 10918447 tokens: 2.057, valid loss/error: 2.144 29.07
Average loss over 10889689 tokens: 2.061, valid loss/error: 2.125 29.08
Average loss over 10920811 tokens: 2.053, valid loss/error: 2.126 29.06
Average loss over 10926092 tokens: 2.051, valid loss/error: 2.123 29.05
Average loss over 10919109 tokens: 2.058, valid loss/error: 2.119 29.08
Average loss over 10941766 tokens: 2.058, valid loss/error: 2.131 29.08
Average loss over 10912336 tokens: 2.058, valid loss/error: 2.123 29.09
Average loss over 10917563 tokens: 2.058, valid loss/error: 2.138 29.07
Average loss over 10894860 tokens: 2.060, valid loss/error: 2.129 29.06
Average loss over 10936767 tokens: 2.050, valid loss/error: 2.128 29.07
Average loss over 10915276 tokens: 2.066, valid loss/error: 2.134 29.11
Average loss over 10917798 tokens: 2.055, valid loss/error: 2.131 29.09
Average loss over 10906830 tokens: 2.051, valid loss/error: 2.146 29.08
Average loss over 10921435 tokens: 2.059, valid loss/error: 2.113 29.09
Average loss over 10892853 tokens: 2.059, valid loss/error: 2.121 29.09
Average loss over 2700218 tokens: 2.067
Epoch: 3, train loss: 2.056, valid loss/error: 2.119 29.08
Average loss over 10895514 tokens: 2.049, valid loss/error: 2.115 29.09
Average loss over 10909372 tokens: 2.050, valid loss/error: 2.127 29.07
Average loss over 10911524 tokens: 2.050, valid loss/error: 2.121 29.04
Average loss over 10934113 tokens: 2.056, valid loss/error: 2.127 29.05
Average loss over 10924149 tokens: 2.052, valid loss/error: 2.109 29.07
New best model saved
Average loss over 10918475 tokens: 2.051, valid loss/error: 2.098 29.06
New best model saved
Average loss over 10910378 tokens: 2.055, valid loss/error: 2.129 29.05
Average loss over 10920755 tokens: 2.059, valid loss/error: 2.131 29.05
Average loss over 10917882 tokens: 2.055, valid loss/error: 2.135 29.04
Average loss over 10955502 tokens: 2.048, valid loss/error: 2.105 29.06
Average loss over 10940791 tokens: 2.061, valid loss/error: 2.152 29.05
Average loss over 10928687 tokens: 2.058, valid loss/error: 2.115 29.06
Average loss over 10899147 tokens: 2.052, valid loss/error: 2.111 29.02
Average loss over 10930531 tokens: 2.049, valid loss/error: 2.115 29.04
Average loss over 10919011 tokens: 2.061, valid loss/error: 2.121 29.05
Average loss over 10923968 tokens: 2.063, valid loss/error: 2.117 29.03
Average loss over 10921735 tokens: 2.058, valid loss/error: 2.115 29.06
Average loss over 10918856 tokens: 2.052, valid loss/error: 2.111 29.00
New best model saved
Average loss over 10925111 tokens: 2.056, valid loss/error: 2.115 29.05
Average loss over 10913723 tokens: 2.059, valid loss/error: 2.117 29.05
Average loss over 10923276 tokens: 2.052, valid loss/error: 2.119 29.05
Average loss over 10926618 tokens: 2.047, valid loss/error: 2.106 29.05
Average loss over 10934139 tokens: 2.058, valid loss/error: 2.136 29.04
Average loss over 10930522 tokens: 2.053, valid loss/error: 2.105 29.01
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/enfr_latest_2teacher_train_distill_sample.py", line 509, in <module>
    terr, done_tokens, cur_checkid, remain_steps, _Dws = train(low_td,middle_td,high_td, tl, vd, nvalid, stu_optimizer, stu_lrsch, high_teach_model,teach_model,student_model, lossf,distilllossf,
  File "/home/yfguo/transformer_924/enfr_latest_2teacher_train_distill_sample.py", line 100, in train
    distill_loss = distilllossf(lossf,high_teach_out_softmax_withoutT,teach_out_softmax_withoutT,stu_out_softmax_withoutT,
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/loss/distill_double_base.py", line 66, in forward
    total_batch_word_num = data_mask.int().sum().item()
RuntimeError: CUDA error: unspecified launch failure
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/train_7_2.681_2.572_28.54.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2.648_29.60.h5
Init lr: 1e-05, Dev Loss/Error: -1.285 29.60
Average loss over 10946395 tokens: -0.742, valid loss/error: -1.591 29.70
New best model saved
Average loss over 10937129 tokens: -0.751, valid loss/error: -1.470 29.69
Average loss over 10933913 tokens: -0.758, valid loss/error: -1.756 29.68
New best model saved
Average loss over 10952335 tokens: -0.762, valid loss/error: -1.817 29.63
New best model saved
Average loss over 10952197 tokens: -0.766, valid loss/error: -1.831 29.63
New best model saved
Average loss over 10938866 tokens: -0.766, valid loss/error: -1.894 29.61
New best model saved
Average loss over 10954407 tokens: -0.764, valid loss/error: -1.939 29.64
New best model saved
Average loss over 10949858 tokens: -0.773, valid loss/error: -2.036 29.58
New best model saved
Average loss over 10934974 tokens: -0.773, valid loss/error: -2.150 29.57
New best model saved
Average loss over 10974340 tokens: -0.773, valid loss/error: -2.217 29.58
New best model saved
Average loss over 10951118 tokens: -0.771, valid loss/error: -2.243 29.53
New best model saved
Average loss over 10952330 tokens: -0.772, valid loss/error: -2.164 29.54
Average loss over 10967906 tokens: -0.775, valid loss/error: -2.241 29.51
New best model saved
Average loss over 10981867 tokens: -0.778, valid loss/error: -2.307 29.50
New best model saved
Average loss over 10946695 tokens: -0.774, valid loss/error: -2.269 29.52
Average loss over 10972009 tokens: -0.779, valid loss/error: -2.266 29.49
New best model saved
Average loss over 10957519 tokens: -0.773, valid loss/error: -2.229 29.49
Average loss over 10962618 tokens: -0.781, valid loss/error: -2.223 29.46
New best model saved
Average loss over 10956656 tokens: -0.777, valid loss/error: -2.310 29.46
New best model saved
Average loss over 10934052 tokens: -0.779, valid loss/error: -2.201 29.47
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_train_distill_sample.py

Session terminated, killing shell... ...killed.
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/train_7_2.681_2.572_28.54.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2.648_29.60.h5
Init lr: 1e-05, Dev Loss/Error: -1.285 29.60

Session terminated, killing shell... ...killed.
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/train_7_2.681_2.572_28.54.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2.648_29.60.h5
Init lr: 1e-05, Dev Loss/Error: -1.285 29.60
Average loss over 10946395 tokens: -0.742, valid loss/error: -1.591 29.70
New best model saved
Average loss over 10937129 tokens: -0.751, valid loss/error: -1.470 29.69
Average loss over 10933913 tokens: -0.758, valid loss/error: -1.756 29.68
New best model saved
Average loss over 10952335 tokens: -0.762, valid loss/error: -1.817 29.63
New best model saved
Average loss over 10952197 tokens: -0.766, valid loss/error: -1.831 29.63
New best model saved
Average loss over 10938866 tokens: -0.766, valid loss/error: -1.894 29.61
New best model saved
Average loss over 10954407 tokens: -0.764, valid loss/error: -1.939 29.64
New best model saved
Average loss over 10949858 tokens: -0.773, valid loss/error: -2.036 29.58
New best model saved
Average loss over 10934974 tokens: -0.773, valid loss/error: -2.150 29.57
New best model saved
Average loss over 10974340 tokens: -0.773, valid loss/error: -2.217 29.58
New best model saved
Average loss over 10951118 tokens: -0.771, valid loss/error: -2.243 29.53
New best model saved
Average loss over 10952330 tokens: -0.772, valid loss/error: -2.164 29.54
Average loss over 10967906 tokens: -0.775, valid loss/error: -2.241 29.51
New best model saved
Average loss over 10981867 tokens: -0.778, valid loss/error: -2.307 29.50
New best model saved
Average loss over 10946695 tokens: -0.774, valid loss/error: -2.269 29.52
Average loss over 10972009 tokens: -0.779, valid loss/error: -2.266 29.49
New best model saved
Average loss over 10957519 tokens: -0.773, valid loss/error: -2.229 29.49
Average loss over 10962618 tokens: -0.781, valid loss/error: -2.223 29.46
New best model saved
Average loss over 10956656 tokens: -0.777, valid loss/error: -2.310 29.46
New best model saved
Average loss over 10934052 tokens: -0.779, valid loss/error: -2.201 29.47
Average loss over 10969344 tokens: -0.781, valid loss/error: -2.250 29.44
New best model saved
Average loss over 10973467 tokens: -0.777, valid loss/error: -2.233 29.44
Average loss over 10982522 tokens: -0.782, valid loss/error: -2.217 29.48
Average loss over 10947066 tokens: -0.778, valid loss/error: -2.250 29.45
Average loss over 10949937 tokens: -0.779, valid loss/error: -2.258 29.46
Average loss over 10951460 tokens: -0.783, valid loss/error: -2.286 29.43
New best model saved
Average loss over 10948430 tokens: -0.783, valid loss/error: -2.213 29.41
New best model saved
Average loss over 10944799 tokens: -0.780, valid loss/error: -2.320 29.45
New best model saved
Average loss over 10955327 tokens: -0.777, valid loss/error: -2.375 29.40
New best model saved
Average loss over 10954006 tokens: -0.775, valid loss/error: -2.303 29.43
Average loss over 10965976 tokens: -0.784, valid loss/error: -2.238 29.41
Average loss over 10959365 tokens: -0.786, valid loss/error: -2.305 29.40
New best model saved
Average loss over 10944787 tokens: -0.787, valid loss/error: -2.402 29.40
New best model saved
Average loss over 10964107 tokens: -0.779, valid loss/error: -2.223 29.41
Average loss over 10944243 tokens: -0.783, valid loss/error: -2.355 29.46
Average loss over 10954133 tokens: -0.786, valid loss/error: -2.359 29.42
Average loss over 10970472 tokens: -0.781, valid loss/error: -2.332 29.39
New best model saved
Average loss over 10951856 tokens: -0.786, valid loss/error: -2.272 29.40
Average loss over 10931285 tokens: -0.783, valid loss/error: -2.339 29.41
Average loss over 10939239 tokens: -0.788, valid loss/error: -2.317 29.41
Average loss over 10957750 tokens: -0.790, valid loss/error: -2.370 29.38
New best model saved
Average loss over 10953143 tokens: -0.789, valid loss/error: -2.383 29.38
New best model saved
Average loss over 2707220 tokens: -0.777
Epoch: 1, train loss: -0.776, valid loss/error: -2.273 29.37
New best model saved
Average loss over 10947481 tokens: -0.785, valid loss/error: -2.314 29.42
Average loss over 10944867 tokens: -0.786, valid loss/error: -2.295 29.40
Average loss over 10949182 tokens: -0.782, valid loss/error: -2.354 29.41
Average loss over 10950365 tokens: -0.789, valid loss/error: -2.314 29.39
Average loss over 10938482 tokens: -0.786, valid loss/error: -2.404 29.40
New best model saved
Average loss over 10947409 tokens: -0.791, valid loss/error: -2.333 29.41
Average loss over 10932228 tokens: -0.794, valid loss/error: -2.352 29.41
Average loss over 10972027 tokens: -0.787, valid loss/error: -2.337 29.39
Average loss over 10947105 tokens: -0.783, valid loss/error: -2.424 29.41
New best model saved
Average loss over 10973572 tokens: -0.789, valid loss/error: -2.234 29.42
Average loss over 10937194 tokens: -0.788, valid loss/error: -2.413 29.38
Average loss over 10957191 tokens: -0.796, valid loss/error: -2.366 29.38
Average loss over 10940645 tokens: -0.788, valid loss/error: -2.417 29.35
New best model saved
Average loss over 10945851 tokens: -0.794, valid loss/error: -2.324 29.36
Average loss over 10961675 tokens: -0.789, valid loss/error: -2.359 29.36
Average loss over 10959168 tokens: -0.789, valid loss/error: -2.351 29.34
New best model saved
Average loss over 10943967 tokens: -0.790, valid loss/error: -2.377 29.33
New best model saved
Average loss over 10923318 tokens: -0.792, valid loss/error: -2.441 29.35
New best model saved
Average loss over 10944583 tokens: -0.792, valid loss/error: -2.346 29.35
Average loss over 10959785 tokens: -0.787, valid loss/error: -2.291 29.36
Average loss over 10934909 tokens: -0.791, valid loss/error: -2.393 29.36
Average loss over 10958778 tokens: -0.790, valid loss/error: -2.393 29.34
Average loss over 10941007 tokens: -0.792, valid loss/error: -2.401 29.34
Average loss over 10940457 tokens: -0.793, valid loss/error: -2.381 29.32
New best model saved
Average loss over 10935972 tokens: -0.788, valid loss/error: -2.294 29.35
Average loss over 10969145 tokens: -0.791, valid loss/error: -2.296 29.34
Average loss over 10955700 tokens: -0.791, valid loss/error: -2.399 29.32
Average loss over 10952344 tokens: -0.794, valid loss/error: -2.334 29.37
Average loss over 10929176 tokens: -0.792, valid loss/error: -2.378 29.37
Average loss over 10959767 tokens: -0.793, valid loss/error: -2.468 29.30
New best model saved
Average loss over 10967793 tokens: -0.795, valid loss/error: -2.331 29.31
Average loss over 10950012 tokens: -0.792, valid loss/error: -2.313 29.36
Average loss over 10951924 tokens: -0.793, valid loss/error: -2.429 29.34
Average loss over 10954038 tokens: -0.791, valid loss/error: -2.390 29.31
Average loss over 10968555 tokens: -0.794, valid loss/error: -2.376 29.31
Average loss over 10958915 tokens: -0.795, valid loss/error: -2.335 29.30
New best model saved
Average loss over 10960971 tokens: -0.793, valid loss/error: -2.461 29.33
Average loss over 10947508 tokens: -0.792, valid loss/error: -2.405 29.29
New best model saved
Average loss over 10953707 tokens: -0.796, valid loss/error: -2.459 29.29
Average loss over 10951204 tokens: -0.800, valid loss/error: -2.373 29.32
Average loss over 10936745 tokens: -0.797, valid loss/error: -2.281 29.32
Average loss over 10947425 tokens: -0.791, valid loss/error: -2.413 29.32
Average loss over 2710911 tokens: -0.790
Epoch: 2, train loss: -0.791, valid loss/error: -2.382 29.32
Average loss over 10958344 tokens: -0.795, valid loss/error: -2.445 29.33
Average loss over 10957116 tokens: -0.793, valid loss/error: -2.434 29.32
Average loss over 10952940 tokens: -0.794, valid loss/error: -2.411 29.32
Average loss over 10952510 tokens: -0.795, valid loss/error: -2.381 29.31
Average loss over 10968036 tokens: -0.798, valid loss/error: -2.452 29.31
Average loss over 10945220 tokens: -0.792, valid loss/error: -2.354 29.33
Average loss over 10955354 tokens: -0.796, valid loss/error: -2.441 29.32
Average loss over 10920940 tokens: -0.798, valid loss/error: -2.422 29.30
Average loss over 10950410 tokens: -0.793, valid loss/error: -2.391 29.31
Average loss over 10976713 tokens: -0.795, valid loss/error: -2.416 29.30
Average loss over 10942283 tokens: -0.798, valid loss/error: -2.441 29.32
Average loss over 10947093 tokens: -0.795, valid loss/error: -2.421 29.29
Average loss over 10972385 tokens: -0.800, valid loss/error: -2.399 29.30
Average loss over 10947631 tokens: -0.799, valid loss/error: -2.344 29.31
Average loss over 10947475 tokens: -0.798, valid loss/error: -2.424 29.31
Average loss over 10952332 tokens: -0.796, valid loss/error: -2.455 29.29
Average loss over 10939973 tokens: -0.802, valid loss/error: -2.340 29.28
New best model saved
Average loss over 10947228 tokens: -0.799, valid loss/error: -2.351 29.30
Average loss over 10977812 tokens: -0.793, valid loss/error: -2.439 29.27
New best model saved
Average loss over 10958990 tokens: -0.796, valid loss/error: -2.418 29.29
Average loss over 10930156 tokens: -0.798, valid loss/error: -2.382 29.31
Average loss over 10953180 tokens: -0.796, valid loss/error: -2.379 29.30
Average loss over 10941187 tokens: -0.799, valid loss/error: -2.427 29.33
Average loss over 10941597 tokens: -0.798, valid loss/error: -2.400 29.37
Average loss over 10946367 tokens: -0.805, valid loss/error: -2.343 29.30
Average loss over 10963243 tokens: -0.800, valid loss/error: -2.406 29.29
Average loss over 10973577 tokens: -0.797, valid loss/error: -2.383 29.34
Average loss over 10943093 tokens: -0.799, valid loss/error: -2.390 29.30
Average loss over 10921251 tokens: -0.798, valid loss/error: -2.376 29.36
Average loss over 10963549 tokens: -0.800, valid loss/error: -2.464 29.32
Average loss over 10960398 tokens: -0.794, valid loss/error: -2.471 29.36
New best model saved
Average loss over 10953951 tokens: -0.802, valid loss/error: -2.486 29.32
New best model saved
Average loss over 10970912 tokens: -0.802, valid loss/error: -2.373 29.32
Average loss over 10948760 tokens: -0.797, valid loss/error: -2.468 29.35
Average loss over 10955699 tokens: -0.798, valid loss/error: -2.448 29.32
Average loss over 10928410 tokens: -0.799, valid loss/error: -2.442 29.30
Average loss over 10967752 tokens: -0.801, valid loss/error: -2.447 29.34
Average loss over 10951206 tokens: -0.796, valid loss/error: -2.384 29.28
Average loss over 10941951 tokens: -0.799, valid loss/error: -2.383 29.26
New best model saved
Average loss over 10947388 tokens: -0.800, valid loss/error: -2.393 29.26
New best model saved
Average loss over 10955532 tokens: -0.800, valid loss/error: -2.458 29.26
New best model saved
Average loss over 10931553 tokens: -0.795, valid loss/error: -2.418 29.27
Average loss over 2717909 tokens: -0.802
Epoch: 3, train loss: -0.798, valid loss/error: -2.435 29.28
Average loss over 10927734 tokens: -0.796, valid loss/error: -2.440 29.27
Average loss over 10931152 tokens: -0.800, valid loss/error: -2.359 29.32
Average loss over 10953906 tokens: -0.801, valid loss/error: -2.435 29.28
Average loss over 10962344 tokens: -0.805, valid loss/error: -2.429 29.30
Average loss over 10951723 tokens: -0.804, valid loss/error: -2.447 29.26
Average loss over 10964913 tokens: -0.802, valid loss/error: -2.488 29.25
New best model saved
Average loss over 10940878 tokens: -0.803, valid loss/error: -2.393 29.26
Average loss over 10946206 tokens: -0.806, valid loss/error: -2.385 29.28
Average loss over 10943306 tokens: -0.801, valid loss/error: -2.334 29.32
Average loss over 10967690 tokens: -0.802, valid loss/error: -2.424 29.25
Average loss over 10966081 tokens: -0.807, valid loss/error: -2.338 29.26
Average loss over 10958636 tokens: -0.802, valid loss/error: -2.448 29.25
Average loss over 10938506 tokens: -0.802, valid loss/error: -2.389 29.26
Average loss over 10953518 tokens: -0.804, valid loss/error: -2.490 29.23
New best model saved
Average loss over 10959362 tokens: -0.802, valid loss/error: -2.449 29.23
New best model saved
Average loss over 10937687 tokens: -0.799, valid loss/error: -2.408 29.23
Average loss over 10945676 tokens: -0.798, valid loss/error: -2.426 29.21
New best model saved
Average loss over 10948074 tokens: -0.798, valid loss/error: -2.472 29.26
Average loss over 10946893 tokens: -0.800, valid loss/error: -2.448 29.24
Average loss over 10939035 tokens: -0.800, valid loss/error: -2.454 29.23
Average loss over 10944467 tokens: -0.805, valid loss/error: -2.379 29.22
Average loss over 10961894 tokens: -0.802, valid loss/error: -2.520 29.21
New best model saved
Average loss over 10959292 tokens: -0.801, valid loss/error: -2.447 29.19
New best model saved
Average loss over 10962182 tokens: -0.803, valid loss/error: -2.401 29.22
Average loss over 10957141 tokens: -0.808, valid loss/error: -2.459 29.24
Average loss over 10967902 tokens: -0.802, valid loss/error: -2.420 29.27
Average loss over 10927049 tokens: -0.803, valid loss/error: -2.395 29.24
Average loss over 10960198 tokens: -0.800, valid loss/error: -2.380 29.22
Average loss over 10960215 tokens: -0.800, valid loss/error: -2.451 29.23
Average loss over 10955634 tokens: -0.805, valid loss/error: -2.405 29.24
Average loss over 10945047 tokens: -0.807, valid loss/error: -2.416 29.25
Average loss over 10933469 tokens: -0.800, valid loss/error: -2.463 29.25
Average loss over 10959734 tokens: -0.800, valid loss/error: -2.492 29.25
Average loss over 10943554 tokens: -0.800, valid loss/error: -2.474 29.23
Average loss over 10941880 tokens: -0.801, valid loss/error: -2.477 29.20
Average loss over 10959261 tokens: -0.801, valid loss/error: -2.426 29.25
Average loss over 10944548 tokens: -0.801, valid loss/error: -2.474 29.27
Average loss over 10970166 tokens: -0.800, valid loss/error: -2.473 29.26
Average loss over 10959188 tokens: -0.804, valid loss/error: -2.426 29.22
Average loss over 10965693 tokens: -0.805, valid loss/error: -2.453 29.21
Average loss over 10964201 tokens: -0.801, valid loss/error: -2.469 29.20
Average loss over 10955185 tokens: -0.803, valid loss/error: -2.425 29.25
Average loss over 2721552 tokens: -0.807
Epoch: 4, train loss: -0.802, valid loss/error: -2.416 29.25
Average loss over 10968696 tokens: -0.808, valid loss/error: -2.475 29.25
Average loss over 10949012 tokens: -0.806, valid loss/error: -2.523 29.20
New best model saved
Average loss over 10945747 tokens: -0.805, valid loss/error: -2.396 29.25
Average loss over 10965993 tokens: -0.804, valid loss/error: -2.482 29.23
Average loss over 10960739 tokens: -0.805, valid loss/error: -2.417 29.22
Average loss over 10922356 tokens: -0.800, valid loss/error: -2.547 29.23
New best model saved
Average loss over 10944648 tokens: -0.808, valid loss/error: -2.511 29.21
Average loss over 10952781 tokens: -0.804, valid loss/error: -2.498 29.19
Average loss over 10973539 tokens: -0.803, valid loss/error: -2.371 29.19
Average loss over 10963116 tokens: -0.804, valid loss/error: -2.413 29.22
Average loss over 10945589 tokens: -0.804, valid loss/error: -2.436 29.22
Average loss over 10938512 tokens: -0.807, valid loss/error: -2.442 29.22
Average loss over 10947840 tokens: -0.800, valid loss/error: -2.452 29.26
Average loss over 10943321 tokens: -0.805, valid loss/error: -2.415 29.21
Average loss over 10973874 tokens: -0.801, valid loss/error: -2.406 29.23
Average loss over 10916353 tokens: -0.805, valid loss/error: -2.501 29.23
Average loss over 10968768 tokens: -0.807, valid loss/error: -2.405 29.24
Average loss over 10956573 tokens: -0.801, valid loss/error: -2.534 29.21
Average loss over 10978455 tokens: -0.807, valid loss/error: -2.463 29.23
Average loss over 10931019 tokens: -0.799, valid loss/error: -2.408 29.23
Average loss over 10958762 tokens: -0.808, valid loss/error: -2.458 29.20
Average loss over 10968549 tokens: -0.805, valid loss/error: -2.457 29.22
Average loss over 10966445 tokens: -0.808, valid loss/error: -2.379 29.21
Average loss over 10944664 tokens: -0.810, valid loss/error: -2.530 29.22
Average loss over 10951585 tokens: -0.806, valid loss/error: -2.463 29.21
Average loss over 10971863 tokens: -0.805, valid loss/error: -2.459 29.21
Average loss over 10954169 tokens: -0.807, valid loss/error: -2.374 29.20
Average loss over 10936096 tokens: -0.805, valid loss/error: -2.392 29.18
New best model saved
Average loss over 10957304 tokens: -0.805, valid loss/error: -2.483 29.20
Average loss over 10938468 tokens: -0.808, valid loss/error: -2.521 29.21
Average loss over 10947508 tokens: -0.802, valid loss/error: -2.476 29.21
Average loss over 10957475 tokens: -0.805, valid loss/error: -2.521 29.23
Average loss over 10947079 tokens: -0.806, valid loss/error: -2.543 29.22
Average loss over 10928299 tokens: -0.808, valid loss/error: -2.489 29.24
Average loss over 10941894 tokens: -0.810, valid loss/error: -2.553 29.23
New best model saved
Average loss over 10952964 tokens: -0.807, valid loss/error: -2.396 29.22
Average loss over 10948190 tokens: -0.806, valid loss/error: -2.385 29.24
Average loss over 10937481 tokens: -0.806, valid loss/error: -2.398 29.18
Average loss over 10934532 tokens: -0.807, valid loss/error: -2.522 29.22
Average loss over 10950818 tokens: -0.803, valid loss/error: -2.491 29.22
Average loss over 10948754 tokens: -0.808, valid loss/error: -2.527 29.24
Average loss over 10948373 tokens: -0.807, valid loss/error: -2.491 29.21
Average loss over 2712229 tokens: -0.802
Epoch: 5, train loss: -0.805, valid loss/error: -2.501 29.23
Average loss over 10957073 tokens: -0.810, valid loss/error: -2.429 29.20
Average loss over 10944726 tokens: -0.804, valid loss/error: -2.528 29.19
Average loss over 10950617 tokens: -0.808, valid loss/error: -2.467 29.23
Average loss over 10972676 tokens: -0.806, valid loss/error: -2.565 29.26
New best model saved
Average loss over 10952039 tokens: -0.806, valid loss/error: -2.524 29.18
Average loss over 10931875 tokens: -0.814, valid loss/error: -2.509 29.21
Average loss over 10954105 tokens: -0.810, valid loss/error: -2.444 29.22
Average loss over 10975253 tokens: -0.807, valid loss/error: -2.482 29.19
Average loss over 10975997 tokens: -0.808, valid loss/error: -2.482 29.22
Average loss over 10923736 tokens: -0.812, valid loss/error: -2.481 29.22
Average loss over 10956673 tokens: -0.813, valid loss/error: -2.536 29.23
Average loss over 10931770 tokens: -0.811, valid loss/error: -2.521 29.20
Average loss over 10944910 tokens: -0.807, valid loss/error: -2.518 29.22
Average loss over 10955676 tokens: -0.813, valid loss/error: -2.509 29.21
Average loss over 10949859 tokens: -0.813, valid loss/error: -2.521 29.22
Average loss over 10953732 tokens: -0.811, valid loss/error: -2.468 29.23
Average loss over 10926294 tokens: -0.813, valid loss/error: -2.485 29.22
Average loss over 10955441 tokens: -0.809, valid loss/error: -2.441 29.23
Average loss over 10955021 tokens: -0.806, valid loss/error: -2.471 29.22
Average loss over 10942704 tokens: -0.806, valid loss/error: -2.431 29.19
Average loss over 10930770 tokens: -0.807, valid loss/error: -2.468 29.16
New best model saved
Average loss over 10966506 tokens: -0.811, valid loss/error: -2.551 29.20
Average loss over 649054 tokens: -0.812
Epoch: 6, train loss: -0.809, valid loss/error: -2.449 29.23
Last training step reached
model saved
enfr_finetune_train.py: 行 3: import: 未找到命令
enfr_finetune_train.py: 行 4: from: 未找到命令
enfr_finetune_train.py: 行 6: from: 未找到命令
enfr_finetune_train.py: 行 8: from: 未找到命令
enfr_finetune_train.py: 行 10: from: 未找到命令
enfr_finetune_train.py: 行 11: from: 未找到命令
enfr_finetune_train.py: 行 12: from: 未找到命令
enfr_finetune_train.py: 行 13: from: 未找到命令
enfr_finetune_train.py: 行 14: from: 未找到命令
enfr_finetune_train.py: 行 15: from: 未找到命令
enfr_finetune_train.py: 行 16: from: 未找到命令
enfr_finetune_train.py: 行 17: from: 未找到命令
enfr_finetune_train.py: 行 18: from: 未找到命令
enfr_finetune_train.py: 行 19: from: 未找到命令
enfr_finetune_train.py: 行 20: from: 未找到命令
enfr_finetune_train.py: 行 21: from: 未找到命令
enfr_finetune_train.py: 行 22: from: 未找到命令
enfr_finetune_train.py: 行 23: from: 未找到命令
enfr_finetune_train.py: 行 24: from: 未找到命令
enfr_finetune_train.py: 行 25: from: 未找到命令
enfr_finetune_train.py: 行 26: from: 未找到命令
enfr_finetune_train.py: 行 27: from: 未找到命令
enfr_finetune_train.py: 行 28: from: 未找到命令
enfr_finetune_train.py: 行 30: import: 未找到命令
enfr_finetune_train.py: 行 31: from: 未找到命令
enfr_finetune_train.py: 行 32: from: 未找到命令
enfr_finetune_train.py: 行 34: 未预期的记号 "(" 附近有语法错误
enfr_finetune_train.py: 行 34: `def train(td, tl, ed, nd, optm, lrsch, model, lossf, mv_device, logger, done_tokens, multi_gpu, multi_gpu_optimizer, tokens_optm=32768, nreport=None, save_every=None, chkpf=None, state_holder=None, statesf=None, num_checkpoint=1, cur_checkid=0, report_eva=True, remain_steps=None, save_loss=False, save_checkp_epoch=False, scaler=None):'
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/train_3_2.602_2.652_29.66.h5
Init lr: 1e-05, Dev Loss/Error: 2.652 29.66
Average loss over 22575039 tokens: 2.586, valid loss/error: 2.637 29.45
New best model saved
Average loss over 22529148 tokens: 2.591, valid loss/error: 2.635 29.43
New best model saved
Average loss over 22507425 tokens: 2.581, valid loss/error: 2.632 29.42
New best model saved
Average loss over 22516640 tokens: 2.575, valid loss/error: 2.632 29.35
New best model saved
Average loss over 22495071 tokens: 2.570, valid loss/error: 2.630 29.35
New best model saved
Average loss over 22563214 tokens: 2.579, valid loss/error: 2.629 29.35
New best model saved
Average loss over 22545932 tokens: 2.576, valid loss/error: 2.628 29.30
New best model saved
Average loss over 22507165 tokens: 2.579, valid loss/error: 2.627 29.27
New best model saved
Average loss over 22567725 tokens: 2.589, valid loss/error: 2.627 29.28
New best model saved
Average loss over 22556070 tokens: 2.574, valid loss/error: 2.627 29.25
New best model saved
Average loss over 22569083 tokens: 2.579, valid loss/error: 2.626 29.25
New best model saved
Average loss over 22580758 tokens: 2.567, valid loss/error: 2.625 29.24
New best model saved
Average loss over 22588819 tokens: 2.590, valid loss/error: 2.625 29.24
Average loss over 22551387 tokens: 2.574, valid loss/error: 2.624 29.26
New best model saved
Average loss over 22468270 tokens: 2.558, valid loss/error: 2.623 29.23
New best model saved
Average loss over 22518991 tokens: 2.561, valid loss/error: 2.624 29.21
New best model saved
Average loss over 22543834 tokens: 2.555, valid loss/error: 2.623 29.19
New best model saved
Average loss over 22497122 tokens: 2.576, valid loss/error: 2.622 29.16
New best model saved
Average loss over 22532906 tokens: 2.570, valid loss/error: 2.623 29.20
Average loss over 22504157 tokens: 2.568, valid loss/error: 2.622 29.17
Average loss over 22547128 tokens: 2.576, valid loss/error: 2.621 29.14
New best model saved
Average loss over 22557857 tokens: 2.567, valid loss/error: 2.620 29.15
New best model saved
Average loss over 22539008 tokens: 2.565, valid loss/error: 2.620 29.14
New best model saved
Average loss over 22550284 tokens: 2.567, valid loss/error: 2.620 29.14
New best model saved
Average loss over 22568622 tokens: 2.573, valid loss/error: 2.620 29.13
New best model saved
Average loss over 22617568 tokens: 2.571, valid loss/error: 2.618 29.15
New best model saved
Average loss over 22569560 tokens: 2.570, valid loss/error: 2.621 29.14
Average loss over 22574297 tokens: 2.568, valid loss/error: 2.619 29.15
Average loss over 22604572 tokens: 2.581, valid loss/error: 2.619 29.12
New best model saved
Average loss over 22558644 tokens: 2.564, valid loss/error: 2.617 29.07
New best model saved
Average loss over 22598206 tokens: 2.569, valid loss/error: 2.618 29.14
Average loss over 22567322 tokens: 2.575, valid loss/error: 2.619 29.08
Average loss over 22529100 tokens: 2.573, valid loss/error: 2.618 29.12
Average loss over 22569003 tokens: 2.574, valid loss/error: 2.617 29.09
New best model saved
Average loss over 22621292 tokens: 2.563, valid loss/error: 2.617 29.10
New best model saved
Average loss over 22530223 tokens: 2.564, valid loss/error: 2.618 29.14
Average loss over 22577188 tokens: 2.566, valid loss/error: 2.616 29.09
New best model saved
Average loss over 22432687 tokens: 2.559, valid loss/error: 2.617 29.10
Average loss over 22536705 tokens: 2.575, valid loss/error: 2.616 29.09
Average loss over 22543562 tokens: 2.563, valid loss/error: 2.616 29.08
Average loss over 22559759 tokens: 2.564, valid loss/error: 2.616 29.08
Average loss over 22555398 tokens: 2.565, valid loss/error: 2.616 29.09
Average loss over 22533798 tokens: 2.560, valid loss/error: 2.617 29.10
Average loss over 22581979 tokens: 2.582, valid loss/error: 2.617 29.07
Average loss over 22589665 tokens: 2.563, valid loss/error: 2.615 29.08
New best model saved
Average loss over 22530945 tokens: 2.572, valid loss/error: 2.617 29.03
New best model saved
Average loss over 22526056 tokens: 2.571, valid loss/error: 2.616 29.10
Average loss over 22573218 tokens: 2.563, valid loss/error: 2.615 29.07
Average loss over 22572815 tokens: 2.568, valid loss/error: 2.615 29.04
Average loss over 22575558 tokens: 2.569, valid loss/error: 2.615 29.03
Average loss over 22584184 tokens: 2.549, valid loss/error: 2.614 29.02
New best model saved
Average loss over 22520716 tokens: 2.557, valid loss/error: 2.615 29.05
Average loss over 22516454 tokens: 2.566, valid loss/error: 2.615 29.05
Average loss over 22543662 tokens: 2.565, valid loss/error: 2.613 29.03
New best model saved
Average loss over 22545625 tokens: 2.558, valid loss/error: 2.613 28.99
New best model saved
Average loss over 22547025 tokens: 2.566, valid loss/error: 2.614 29.00
Average loss over 22521701 tokens: 2.559, valid loss/error: 2.614 29.00
Average loss over 22555973 tokens: 2.550, valid loss/error: 2.613 28.98
New best model saved
Average loss over 7103002 tokens: 2.547
Epoch: 1, train loss: 2.569, valid loss/error: 2.615 28.98
New best model saved
Average loss over 22580281 tokens: 2.568, valid loss/error: 2.613 28.99
New best model saved
Average loss over 22548085 tokens: 2.555, valid loss/error: 2.613 28.97
New best model saved
Average loss over 22523391 tokens: 2.563, valid loss/error: 2.613 28.98
Average loss over 22563176 tokens: 2.562, valid loss/error: 2.612 28.98
New best model saved
Average loss over 22558897 tokens: 2.568, valid loss/error: 2.613 29.00
Average loss over 22606985 tokens: 2.564, valid loss/error: 2.612 28.99
New best model saved
Average loss over 22606263 tokens: 2.557, valid loss/error: 2.613 28.99
Average loss over 22568759 tokens: 2.558, valid loss/error: 2.612 28.97
Average loss over 22544064 tokens: 2.548, valid loss/error: 2.612 29.02
Average loss over 22486495 tokens: 2.553, valid loss/error: 2.613 29.02
Average loss over 22493821 tokens: 2.556, valid loss/error: 2.612 29.00
Average loss over 22495491 tokens: 2.559, valid loss/error: 2.612 29.02
Average loss over 22500775 tokens: 2.546, valid loss/error: 2.613 29.02
Average loss over 22543794 tokens: 2.548, valid loss/error: 2.612 29.02
Average loss over 22514986 tokens: 2.562, valid loss/error: 2.613 28.98
Average loss over 22571008 tokens: 2.556, valid loss/error: 2.612 28.98
Average loss over 22531927 tokens: 2.561, valid loss/error: 2.611 28.96
New best model saved
Average loss over 22565075 tokens: 2.553, valid loss/error: 2.612 28.98
Average loss over 22524083 tokens: 2.560, valid loss/error: 2.612 29.01
Average loss over 22470230 tokens: 2.546, valid loss/error: 2.611 28.99
Average loss over 22498589 tokens: 2.555, valid loss/error: 2.612 29.03
Average loss over 22543891 tokens: 2.565, valid loss/error: 2.613 28.98
Average loss over 22561559 tokens: 2.559, valid loss/error: 2.612 28.97
Average loss over 22593206 tokens: 2.564, valid loss/error: 2.611 28.98
New best model saved
Average loss over 22536248 tokens: 2.553, valid loss/error: 2.611 28.97
Average loss over 22532054 tokens: 2.551, valid loss/error: 2.611 29.00
Average loss over 22561832 tokens: 2.565, valid loss/error: 2.612 29.01
Average loss over 22567870 tokens: 2.561, valid loss/error: 2.611 28.96
Average loss over 22571186 tokens: 2.566, valid loss/error: 2.611 28.92
New best model saved
Average loss over 22499891 tokens: 2.552, valid loss/error: 2.611 28.97
Average loss over 22514393 tokens: 2.555, valid loss/error: 2.611 28.95
New best model saved
Average loss over 22531407 tokens: 2.551, valid loss/error: 2.610 28.96
New best model saved
Average loss over 22574300 tokens: 2.554, valid loss/error: 2.611 28.96
Average loss over 22542842 tokens: 2.553, valid loss/error: 2.609 28.94
New best model saved
Average loss over 22548633 tokens: 2.550, valid loss/error: 2.609 28.92
Average loss over 22560258 tokens: 2.553, valid loss/error: 2.610 28.92
Average loss over 22561615 tokens: 2.549, valid loss/error: 2.610 28.96
Average loss over 22524845 tokens: 2.557, valid loss/error: 2.610 28.90
New best model saved
Average loss over 22524520 tokens: 2.558, valid loss/error: 2.610 28.93
Average loss over 22564468 tokens: 2.559, valid loss/error: 2.609 28.93
Average loss over 22567976 tokens: 2.546, valid loss/error: 2.610 28.93
Average loss over 22536071 tokens: 2.551, valid loss/error: 2.610 28.91
Average loss over 22555774 tokens: 2.553, valid loss/error: 2.611 28.97
Average loss over 22587031 tokens: 2.550, valid loss/error: 2.609 28.97
Average loss over 22592547 tokens: 2.540, valid loss/error: 2.610 28.92
Average loss over 22601185 tokens: 2.546, valid loss/error: 2.609 28.93
Average loss over 22618570 tokens: 2.549, valid loss/error: 2.610 28.97
Average loss over 22519755 tokens: 2.533, valid loss/error: 2.609 28.92
New best model saved
Average loss over 22590116 tokens: 2.540, valid loss/error: 2.610 28.90
New best model saved
Average loss over 22627877 tokens: 2.557, valid loss/error: 2.610 28.98
Average loss over 22562596 tokens: 2.540, valid loss/error: 2.611 28.92
Average loss over 22529082 tokens: 2.535, valid loss/error: 2.609 28.91
Average loss over 22548173 tokens: 2.535, valid loss/error: 2.610 28.93
Average loss over 22583712 tokens: 2.532, valid loss/error: 2.610 28.88
New best model saved
Average loss over 22544723 tokens: 2.537, valid loss/error: 2.610 28.91
Average loss over 22489104 tokens: 2.531, valid loss/error: 2.611 28.96
Average loss over 22519490 tokens: 2.530, valid loss/error: 2.610 28.93
Average loss over 22531859 tokens: 2.534, valid loss/error: 2.609 28.91
Average loss over 7132283 tokens: 2.532
Epoch: 2, train loss: 2.552, valid loss/error: 2.610 28.92
Average loss over 22461742 tokens: 2.511, valid loss/error: 2.613 28.93
Average loss over 22576058 tokens: 2.535, valid loss/error: 2.611 28.90
Average loss over 22571123 tokens: 2.523, valid loss/error: 2.611 28.94
Average loss over 20829977 tokens: 2.527
Epoch: 3, train loss: 2.524, valid loss/error: 2.612 28.94
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/eva_2.571_28.52.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2_2.630_2.645_29.63.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_300k/std_20epochs/eva_2.590_28.62.h5
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/enfr_latest_2teacher_train_distill_sample.py", line 353, in <module>
    teach_model = load_model_cpu(fine_tune_teach, mymodel_teach)
  File "/home/yfguo/transformer_924/utils/io.py", line 33, in load_model_cpu_auto
    _mp = h5load(modf, restore_list=True) if mp is None else mp
  File "/home/yfguo/transformer_924/utils/h5serial.py", line 82, in h5load
    with h5File(fname, "r") as f:
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 567, in __init__
    fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 231, in make_fid
    fid = h5f.open(name, flags, fapl=fapl)
  File "h5py/_objects.pyx", line 54, in h5py._objects.with_phil.wrapper
  File "h5py/_objects.pyx", line 55, in h5py._objects.with_phil.wrapper
  File "h5py/h5f.pyx", line 106, in h5py.h5f.open
FileNotFoundError: [Errno 2] Unable to open file (unable to open file: name = '/home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k/std/eva_2.571_28.52.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/train_3_2.602_2.652_29.66.h5
Init lr: 1e-05, Dev Loss/Error: 2.652 29.66
Average loss over 22575039 tokens: 2.586, valid loss/error: 2.637 29.45
New best model saved
Average loss over 22529148 tokens: 2.591, valid loss/error: 2.635 29.43
New best model saved
Average loss over 22507425 tokens: 2.581, valid loss/error: 2.632 29.42
New best model saved
Average loss over 22516640 tokens: 2.575, valid loss/error: 2.632 29.35
New best model saved
Average loss over 22495071 tokens: 2.570, valid loss/error: 2.630 29.35
New best model saved
Average loss over 22563214 tokens: 2.579, valid loss/error: 2.629 29.35
New best model saved
Average loss over 22545932 tokens: 2.576, valid loss/error: 2.628 29.30
New best model saved
Average loss over 22507165 tokens: 2.579, valid loss/error: 2.627 29.27
New best model saved
Average loss over 22567725 tokens: 2.589, valid loss/error: 2.627 29.28
New best model saved
Average loss over 22556070 tokens: 2.574, valid loss/error: 2.627 29.25
New best model saved
Average loss over 22569083 tokens: 2.579, valid loss/error: 2.626 29.25
New best model saved
Average loss over 22580758 tokens: 2.567, valid loss/error: 2.625 29.24
New best model saved
Average loss over 22588819 tokens: 2.590, valid loss/error: 2.625 29.24
Average loss over 22551387 tokens: 2.574, valid loss/error: 2.624 29.26
New best model saved
Average loss over 22468270 tokens: 2.558, valid loss/error: 2.623 29.23
New best model saved
Average loss over 22518991 tokens: 2.561, valid loss/error: 2.624 29.21
New best model saved
Average loss over 22543834 tokens: 2.555, valid loss/error: 2.623 29.19
New best model saved
Average loss over 22497122 tokens: 2.576, valid loss/error: 2.622 29.16
New best model saved
Average loss over 22532906 tokens: 2.570, valid loss/error: 2.623 29.20
Average loss over 22504157 tokens: 2.568, valid loss/error: 2.622 29.17
Average loss over 22547128 tokens: 2.576, valid loss/error: 2.621 29.14
New best model saved
Average loss over 22557857 tokens: 2.567, valid loss/error: 2.620 29.15
New best model saved
Average loss over 22539008 tokens: 2.565, valid loss/error: 2.620 29.14
New best model saved
Average loss over 22550284 tokens: 2.567, valid loss/error: 2.620 29.14
New best model saved
Average loss over 22568622 tokens: 2.573, valid loss/error: 2.620 29.13
New best model saved
Average loss over 22617568 tokens: 2.571, valid loss/error: 2.618 29.15
New best model saved
Average loss over 22569560 tokens: 2.570, valid loss/error: 2.621 29.14
Average loss over 22574297 tokens: 2.568, valid loss/error: 2.619 29.15
Average loss over 22604572 tokens: 2.581, valid loss/error: 2.619 29.12
New best model saved
Average loss over 22558644 tokens: 2.564, valid loss/error: 2.617 29.07
New best model saved
Average loss over 22598206 tokens: 2.569, valid loss/error: 2.618 29.14
Average loss over 22567322 tokens: 2.575, valid loss/error: 2.619 29.08
Average loss over 22529100 tokens: 2.573, valid loss/error: 2.618 29.12
Average loss over 22569003 tokens: 2.574, valid loss/error: 2.617 29.09
New best model saved
Average loss over 22621292 tokens: 2.563, valid loss/error: 2.617 29.10
New best model saved
Average loss over 22530223 tokens: 2.564, valid loss/error: 2.618 29.14
Average loss over 22577188 tokens: 2.566, valid loss/error: 2.616 29.09
New best model saved
Average loss over 22432687 tokens: 2.559, valid loss/error: 2.617 29.10
Average loss over 22536705 tokens: 2.575, valid loss/error: 2.616 29.09
Average loss over 22543562 tokens: 2.563, valid loss/error: 2.616 29.08
Average loss over 22559759 tokens: 2.564, valid loss/error: 2.616 29.08
Average loss over 22555398 tokens: 2.565, valid loss/error: 2.616 29.09
Average loss over 22533798 tokens: 2.560, valid loss/error: 2.617 29.10
Average loss over 22581979 tokens: 2.582, valid loss/error: 2.617 29.07
Average loss over 22589665 tokens: 2.563, valid loss/error: 2.615 29.08
New best model saved
Average loss over 22530945 tokens: 2.572, valid loss/error: 2.617 29.03
New best model saved
Average loss over 22526056 tokens: 2.571, valid loss/error: 2.616 29.10
Average loss over 22573218 tokens: 2.563, valid loss/error: 2.615 29.07
Average loss over 22572815 tokens: 2.568, valid loss/error: 2.615 29.04
Average loss over 22575558 tokens: 2.569, valid loss/error: 2.615 29.03
Average loss over 22584184 tokens: 2.549, valid loss/error: 2.614 29.02
New best model saved
Average loss over 22520716 tokens: 2.557, valid loss/error: 2.615 29.05
Average loss over 22516454 tokens: 2.566, valid loss/error: 2.615 29.05
Average loss over 22543662 tokens: 2.565, valid loss/error: 2.613 29.03
New best model saved
Average loss over 22545625 tokens: 2.558, valid loss/error: 2.613 28.99
New best model saved
Average loss over 22547025 tokens: 2.566, valid loss/error: 2.614 29.00
Average loss over 22521701 tokens: 2.559, valid loss/error: 2.614 29.00
Average loss over 22555973 tokens: 2.550, valid loss/error: 2.613 28.98
New best model saved
Average loss over 7103002 tokens: 2.547
Epoch: 1, train loss: 2.569, valid loss/error: 2.615 28.98
New best model saved
Average loss over 22580281 tokens: 2.568, valid loss/error: 2.613 28.99
New best model saved
Average loss over 22548085 tokens: 2.555, valid loss/error: 2.613 28.97
New best model saved
Average loss over 22523391 tokens: 2.563, valid loss/error: 2.613 28.98
Average loss over 22563176 tokens: 2.562, valid loss/error: 2.612 28.98
New best model saved
Average loss over 22558897 tokens: 2.568, valid loss/error: 2.613 29.00
Average loss over 22606985 tokens: 2.564, valid loss/error: 2.612 28.99
New best model saved
Average loss over 22606263 tokens: 2.557, valid loss/error: 2.613 28.99
Average loss over 22568759 tokens: 2.558, valid loss/error: 2.612 28.97
Average loss over 22544064 tokens: 2.548, valid loss/error: 2.612 29.02
Average loss over 22486495 tokens: 2.553, valid loss/error: 2.613 29.02
Average loss over 22493821 tokens: 2.556, valid loss/error: 2.612 29.00
Average loss over 22495491 tokens: 2.559, valid loss/error: 2.612 29.02
Average loss over 22500775 tokens: 2.546, valid loss/error: 2.613 29.02
Average loss over 22543794 tokens: 2.548, valid loss/error: 2.612 29.02
Average loss over 22514986 tokens: 2.562, valid loss/error: 2.613 28.98
Average loss over 22571008 tokens: 2.556, valid loss/error: 2.612 28.98
Average loss over 22531927 tokens: 2.561, valid loss/error: 2.611 28.96
New best model saved
Average loss over 22565075 tokens: 2.553, valid loss/error: 2.612 28.98
Average loss over 22524083 tokens: 2.560, valid loss/error: 2.612 29.01
Average loss over 22470230 tokens: 2.546, valid loss/error: 2.611 28.99
Average loss over 22498589 tokens: 2.555, valid loss/error: 2.612 29.03
Average loss over 22543891 tokens: 2.565, valid loss/error: 2.613 28.98
Average loss over 22561559 tokens: 2.559, valid loss/error: 2.612 28.97
Average loss over 22593206 tokens: 2.564, valid loss/error: 2.611 28.98
New best model saved
Average loss over 22536248 tokens: 2.553, valid loss/error: 2.611 28.97
Average loss over 22532054 tokens: 2.551, valid loss/error: 2.611 29.00
Average loss over 22561832 tokens: 2.565, valid loss/error: 2.612 29.01
Average loss over 22567870 tokens: 2.561, valid loss/error: 2.611 28.96
Average loss over 22571186 tokens: 2.566, valid loss/error: 2.611 28.92
New best model saved
Average loss over 22499891 tokens: 2.552, valid loss/error: 2.611 28.97
Average loss over 22514393 tokens: 2.555, valid loss/error: 2.611 28.95
New best model saved
Average loss over 22531407 tokens: 2.551, valid loss/error: 2.610 28.96
New best model saved
Average loss over 22574300 tokens: 2.554, valid loss/error: 2.611 28.96
Average loss over 22542842 tokens: 2.553, valid loss/error: 2.609 28.94
New best model saved
Average loss over 22548633 tokens: 2.550, valid loss/error: 2.609 28.92
Average loss over 22560258 tokens: 2.553, valid loss/error: 2.610 28.92
Average loss over 22561615 tokens: 2.549, valid loss/error: 2.610 28.96
Average loss over 22524845 tokens: 2.557, valid loss/error: 2.610 28.90
New best model saved
Average loss over 22524520 tokens: 2.558, valid loss/error: 2.610 28.93
Average loss over 22564468 tokens: 2.559, valid loss/error: 2.609 28.93
Average loss over 22567976 tokens: 2.546, valid loss/error: 2.610 28.93
Average loss over 22536071 tokens: 2.551, valid loss/error: 2.610 28.91
Average loss over 22555774 tokens: 2.553, valid loss/error: 2.611 28.97
Average loss over 22587031 tokens: 2.550, valid loss/error: 2.609 28.97
Average loss over 22592547 tokens: 2.540, valid loss/error: 2.610 28.92
Average loss over 22601185 tokens: 2.546, valid loss/error: 2.609 28.93
Average loss over 22618570 tokens: 2.549, valid loss/error: 2.610 28.97
Average loss over 22519755 tokens: 2.533, valid loss/error: 2.609 28.92
New best model saved
Average loss over 22590116 tokens: 2.540, valid loss/error: 2.610 28.90
New best model saved
Average loss over 22627877 tokens: 2.557, valid loss/error: 2.610 28.98
Average loss over 22562596 tokens: 2.540, valid loss/error: 2.611 28.92
Average loss over 22529082 tokens: 2.535, valid loss/error: 2.609 28.91
Average loss over 22548173 tokens: 2.535, valid loss/error: 2.610 28.93
Average loss over 22583712 tokens: 2.532, valid loss/error: 2.610 28.88
New best model saved
Average loss over 22544723 tokens: 2.537, valid loss/error: 2.610 28.91
Average loss over 22489104 tokens: 2.531, valid loss/error: 2.611 28.96
Average loss over 22519490 tokens: 2.530, valid loss/error: 2.610 28.93
Average loss over 22531859 tokens: 2.534, valid loss/error: 2.609 28.91
Average loss over 7132283 tokens: 2.532
Epoch: 2, train loss: 2.552, valid loss/error: 2.610 28.92
Average loss over 22461742 tokens: 2.511, valid loss/error: 2.613 28.93
Average loss over 22576058 tokens: 2.535, valid loss/error: 2.611 28.90
Average loss over 22571123 tokens: 2.523, valid loss/error: 2.611 28.94
Average loss over 22538261 tokens: 2.527, valid loss/error: 2.609 28.92
New best model saved
Average loss over 22542870 tokens: 2.558, valid loss/error: 2.607 28.93
New best model saved
Average loss over 22545283 tokens: 2.559, valid loss/error: 2.608 28.97
Average loss over 22531889 tokens: 2.556, valid loss/error: 2.608 28.93
Average loss over 22591095 tokens: 2.563, valid loss/error: 2.607 28.92
New best model saved
Average loss over 22575618 tokens: 2.552, valid loss/error: 2.608 28.93
Average loss over 22513701 tokens: 2.553, valid loss/error: 2.608 28.91
Average loss over 22522526 tokens: 2.549, valid loss/error: 2.608 28.91
Average loss over 22614615 tokens: 2.560, valid loss/error: 2.607 28.91
New best model saved
Average loss over 22498015 tokens: 2.556, valid loss/error: 2.607 28.89
New best model saved
Average loss over 22500797 tokens: 2.551, valid loss/error: 2.607 28.91
Average loss over 22570542 tokens: 2.554, valid loss/error: 2.608 28.89
Average loss over 22512972 tokens: 2.554, valid loss/error: 2.608 28.91
Average loss over 22525973 tokens: 2.559, valid loss/error: 2.608 28.88
New best model saved
Average loss over 22552522 tokens: 2.551, valid loss/error: 2.607 28.91
Average loss over 22587187 tokens: 2.572, valid loss/error: 2.607 28.90
Average loss over 22538209 tokens: 2.554, valid loss/error: 2.607 28.90
Average loss over 22605889 tokens: 2.566, valid loss/error: 2.607 28.90
Average loss over 22548470 tokens: 2.568, valid loss/error: 2.607 28.91
Average loss over 22546846 tokens: 2.583, valid loss/error: 2.606 28.86
New best model saved
Average loss over 22564724 tokens: 2.553, valid loss/error: 2.606 28.87
Average loss over 22529341 tokens: 2.554, valid loss/error: 2.606 28.91
New best model saved
Average loss over 22592434 tokens: 2.567, valid loss/error: 2.606 28.90
New best model saved
Average loss over 22508677 tokens: 2.564, valid loss/error: 2.605 28.89
New best model saved
Average loss over 22550106 tokens: 2.565, valid loss/error: 2.605 28.88
Average loss over 22538344 tokens: 2.559, valid loss/error: 2.605 28.86
New best model saved
Average loss over 22528554 tokens: 2.566, valid loss/error: 2.606 28.89
Average loss over 22500331 tokens: 2.561, valid loss/error: 2.605 28.90
Average loss over 22547382 tokens: 2.569, valid loss/error: 2.606 28.86
Average loss over 22612821 tokens: 2.562, valid loss/error: 2.605 28.90
New best model saved
Average loss over 22583558 tokens: 2.569, valid loss/error: 2.606 28.85
New best model saved
Average loss over 22557252 tokens: 2.562, valid loss/error: 2.604 28.86
New best model saved
Average loss over 22516902 tokens: 2.572, valid loss/error: 2.605 28.91
Average loss over 22490416 tokens: 2.564, valid loss/error: 2.605 28.84
New best model saved
Average loss over 22535657 tokens: 2.564, valid loss/error: 2.605 28.88
Average loss over 22647111 tokens: 2.554, valid loss/error: 2.606 28.92
Average loss over 22468980 tokens: 2.551, valid loss/error: 2.606 28.89
Average loss over 22573793 tokens: 2.558, valid loss/error: 2.605 28.87
Average loss over 22561495 tokens: 2.565, valid loss/error: 2.605 28.88
Average loss over 22546972 tokens: 2.555, valid loss/error: 2.604 28.87
New best model saved
Average loss over 22557498 tokens: 2.557, valid loss/error: 2.604 28.93
New best model saved
Average loss over 22571675 tokens: 2.560, valid loss/error: 2.605 28.91
Average loss over 22540818 tokens: 2.556, valid loss/error: 2.605 28.90
Average loss over 22548340 tokens: 2.548, valid loss/error: 2.605 28.91
Average loss over 22604072 tokens: 2.554, valid loss/error: 2.603 28.87
New best model saved
Average loss over 22583687 tokens: 2.562, valid loss/error: 2.605 28.86
Average loss over 22527113 tokens: 2.550, valid loss/error: 2.604 28.87
Average loss over 22502099 tokens: 2.553, valid loss/error: 2.604 28.85
Average loss over 22515832 tokens: 2.564, valid loss/error: 2.603 28.85
New best model saved
Average loss over 22515614 tokens: 2.563, valid loss/error: 2.603 28.91
Average loss over 22568374 tokens: 2.560, valid loss/error: 2.604 28.87
Average loss over 22564074 tokens: 2.562, valid loss/error: 2.604 28.87
Average loss over 22575845 tokens: 2.553, valid loss/error: 2.604 28.90
Average loss over 22555381 tokens: 2.560, valid loss/error: 2.603 28.85
Average loss over 22577424 tokens: 2.546, valid loss/error: 2.603 28.84
New best model saved
Average loss over 7114218 tokens: 2.542
Epoch: 3, train loss: 2.557, valid loss/error: 2.604 28.83
New best model saved
Average loss over 22509831 tokens: 2.552, valid loss/error: 2.604 28.83
New best model saved
Average loss over 22555918 tokens: 2.566, valid loss/error: 2.603 28.86
New best model saved
Average loss over 22572203 tokens: 2.560, valid loss/error: 2.604 28.89
Average loss over 22559850 tokens: 2.554, valid loss/error: 2.603 28.84
Average loss over 22544020 tokens: 2.548, valid loss/error: 2.603 28.86
Average loss over 22576442 tokens: 2.556, valid loss/error: 2.604 28.87
Average loss over 22576005 tokens: 2.562, valid loss/error: 2.603 28.84
Average loss over 22536940 tokens: 2.560, valid loss/error: 2.604 28.87
Average loss over 22563006 tokens: 2.553, valid loss/error: 2.603 28.84
Average loss over 22611826 tokens: 2.552, valid loss/error: 2.602 28.84
New best model saved
Average loss over 22578836 tokens: 2.553, valid loss/error: 2.603 28.84
Average loss over 22555909 tokens: 2.559, valid loss/error: 2.603 28.90
Average loss over 22503825 tokens: 2.552, valid loss/error: 2.602 28.86
Average loss over 22577322 tokens: 2.549, valid loss/error: 2.603 28.85
Average loss over 22555979 tokens: 2.569, valid loss/error: 2.602 28.90
Average loss over 22566844 tokens: 2.558, valid loss/error: 2.602 28.88
Average loss over 22546092 tokens: 2.559, valid loss/error: 2.602 28.86
Average loss over 22479125 tokens: 2.556, valid loss/error: 2.602 28.85
Average loss over 22489241 tokens: 2.553, valid loss/error: 2.603 28.81
New best model saved
Average loss over 22538750 tokens: 2.550, valid loss/error: 2.603 28.81
New best model saved
Average loss over 22519297 tokens: 2.549, valid loss/error: 2.601 28.82
New best model saved
Average loss over 22535205 tokens: 2.542, valid loss/error: 2.603 28.84
Average loss over 22546578 tokens: 2.558, valid loss/error: 2.603 28.88
Average loss over 22551783 tokens: 2.550, valid loss/error: 2.603 28.85
Average loss over 22535425 tokens: 2.551, valid loss/error: 2.603 28.86
Average loss over 22613165 tokens: 2.556, valid loss/error: 2.604 28.86
Average loss over 22576829 tokens: 2.551, valid loss/error: 2.603 28.80
New best model saved
Average loss over 22607142 tokens: 2.556, valid loss/error: 2.602 28.82
Average loss over 22534058 tokens: 2.554, valid loss/error: 2.602 28.87
Average loss over 22536139 tokens: 2.553, valid loss/error: 2.602 28.82
Average loss over 22565372 tokens: 2.558, valid loss/error: 2.602 28.84
Average loss over 22607242 tokens: 2.553, valid loss/error: 2.601 28.83
New best model saved
Average loss over 22524312 tokens: 2.559, valid loss/error: 2.601 28.82
Average loss over 22581868 tokens: 2.558, valid loss/error: 2.601 28.83
Average loss over 22568923 tokens: 2.545, valid loss/error: 2.602 28.84
Average loss over 22510970 tokens: 2.559, valid loss/error: 2.602 28.87
Average loss over 22528203 tokens: 2.566, valid loss/error: 2.601 28.83
New best model saved
Average loss over 22540391 tokens: 2.554, valid loss/error: 2.601 28.84
Average loss over 22587829 tokens: 2.562, valid loss/error: 2.601 28.84
New best model saved
Average loss over 22534339 tokens: 2.562, valid loss/error: 2.602 28.84
Average loss over 22565464 tokens: 2.553, valid loss/error: 2.601 28.84
Average loss over 22593334 tokens: 2.554, valid loss/error: 2.602 28.87
Average loss over 22533179 tokens: 2.553, valid loss/error: 2.602 28.86
Average loss over 22574568 tokens: 2.561, valid loss/error: 2.602 28.84
Average loss over 22515109 tokens: 2.555, valid loss/error: 2.601 28.83
Average loss over 22578936 tokens: 2.552, valid loss/error: 2.602 28.84
Average loss over 22512066 tokens: 2.552, valid loss/error: 2.600 28.82
New best model saved
Average loss over 22564989 tokens: 2.554, valid loss/error: 2.601 28.86
Average loss over 22451928 tokens: 2.548, valid loss/error: 2.602 28.84
Average loss over 22581911 tokens: 2.557, valid loss/error: 2.601 28.84
Average loss over 22519738 tokens: 2.549, valid loss/error: 2.602 28.84
Average loss over 22530063 tokens: 2.558, valid loss/error: 2.602 28.84
Average loss over 22520720 tokens: 2.565, valid loss/error: 2.601 28.84
Average loss over 22603940 tokens: 2.556, valid loss/error: 2.601 28.83
Average loss over 22581651 tokens: 2.549, valid loss/error: 2.602 28.83
Average loss over 22518017 tokens: 2.552, valid loss/error: 2.601 28.85
Average loss over 22513965 tokens: 2.552, valid loss/error: 2.600 28.79
New best model saved
Average loss over 22493816 tokens: 2.565, valid loss/error: 2.600 28.80
Average loss over 7092689 tokens: 2.541
Epoch: 4, train loss: 2.555, valid loss/error: 2.600 28.85
New best model saved
Average loss over 22500310 tokens: 2.549, valid loss/error: 2.601 28.82
Average loss over 22572837 tokens: 2.556, valid loss/error: 2.601 28.83
Average loss over 22499409 tokens: 2.548, valid loss/error: 2.602 28.83
Average loss over 22566734 tokens: 2.556, valid loss/error: 2.600 28.83
Average loss over 22584068 tokens: 2.562, valid loss/error: 2.600 28.83
Average loss over 22530998 tokens: 2.549, valid loss/error: 2.601 28.79
New best model saved
Average loss over 22631323 tokens: 2.552, valid loss/error: 2.601 28.80
Average loss over 22527737 tokens: 2.546, valid loss/error: 2.599 28.83
New best model saved
Average loss over 22523349 tokens: 2.536, valid loss/error: 2.599 28.79
Average loss over 22562739 tokens: 2.547, valid loss/error: 2.600 28.79
Average loss over 22567658 tokens: 2.558, valid loss/error: 2.600 28.84
Average loss over 22503201 tokens: 2.542, valid loss/error: 2.600 28.87
Average loss over 22474623 tokens: 2.543, valid loss/error: 2.600 28.82
Average loss over 22550967 tokens: 2.553, valid loss/error: 2.600 28.85
Average loss over 22613242 tokens: 2.550, valid loss/error: 2.601 28.81
Average loss over 22504234 tokens: 2.542, valid loss/error: 2.599 28.81
Average loss over 22538774 tokens: 2.554, valid loss/error: 2.601 28.84
Average loss over 22600725 tokens: 2.555, valid loss/error: 2.600 28.85
Average loss over 22546229 tokens: 2.550, valid loss/error: 2.600 28.85
Average loss over 22549186 tokens: 2.549, valid loss/error: 2.600 28.82
Average loss over 22553757 tokens: 2.548, valid loss/error: 2.598 28.84
New best model saved
Average loss over 22527003 tokens: 2.553, valid loss/error: 2.601 28.80
Average loss over 22574971 tokens: 2.548, valid loss/error: 2.598 28.85
Average loss over 22575736 tokens: 2.555, valid loss/error: 2.600 28.82
Average loss over 22543232 tokens: 2.548, valid loss/error: 2.600 28.82
Average loss over 22604254 tokens: 2.568, valid loss/error: 2.600 28.80
Average loss over 22548136 tokens: 2.565, valid loss/error: 2.601 28.82
Average loss over 22542396 tokens: 2.561, valid loss/error: 2.600 28.81
Average loss over 22520162 tokens: 2.548, valid loss/error: 2.600 28.82
Average loss over 22593390 tokens: 2.547, valid loss/error: 2.598 28.79
New best model saved
Average loss over 22554922 tokens: 2.557, valid loss/error: 2.599 28.84
Average loss over 22603590 tokens: 2.556, valid loss/error: 2.599 28.80
Average loss over 22593760 tokens: 2.546, valid loss/error: 2.598 28.75
New best model saved
Average loss over 22532899 tokens: 2.550, valid loss/error: 2.600 28.82
Average loss over 22506786 tokens: 2.547, valid loss/error: 2.600 28.83
Average loss over 22497063 tokens: 2.550, valid loss/error: 2.600 28.80
Average loss over 22567599 tokens: 2.563, valid loss/error: 2.599 28.80
Average loss over 22596799 tokens: 2.563, valid loss/error: 2.600 28.84
Average loss over 22595791 tokens: 2.556, valid loss/error: 2.599 28.80
Average loss over 22492459 tokens: 2.553, valid loss/error: 2.598 28.78
Average loss over 22557436 tokens: 2.543, valid loss/error: 2.598 28.78
Average loss over 22572952 tokens: 2.552, valid loss/error: 2.599 28.86
Average loss over 22527452 tokens: 2.555, valid loss/error: 2.599 28.81
Average loss over 22536292 tokens: 2.544, valid loss/error: 2.599 28.80
Average loss over 22535050 tokens: 2.544, valid loss/error: 2.599 28.85
Average loss over 22572045 tokens: 2.555, valid loss/error: 2.598 28.75
New best model saved
Average loss over 22511870 tokens: 2.564, valid loss/error: 2.599 28.78
Average loss over 22486052 tokens: 2.553, valid loss/error: 2.598 28.77
Average loss over 22540721 tokens: 2.556, valid loss/error: 2.599 28.79
Average loss over 22552954 tokens: 2.560, valid loss/error: 2.598 28.79
Average loss over 22549738 tokens: 2.556, valid loss/error: 2.599 28.79
Average loss over 22569003 tokens: 2.556, valid loss/error: 2.599 28.77
Average loss over 22577469 tokens: 2.564, valid loss/error: 2.598 28.81
Average loss over 22549325 tokens: 2.557, valid loss/error: 2.598 28.81
Average loss over 22514510 tokens: 2.561, valid loss/error: 2.598 28.77
Average loss over 22557439 tokens: 2.558, valid loss/error: 2.599 28.80
Average loss over 22487716 tokens: 2.549, valid loss/error: 2.597 28.75
New best model saved
Average loss over 22558663 tokens: 2.548, valid loss/error: 2.597 28.74
New best model saved
Average loss over 7119382 tokens: 2.535
Epoch: 5, train loss: 2.553, valid loss/error: 2.598 28.82
Average loss over 22568878 tokens: 2.556, valid loss/error: 2.598 28.82
Average loss over 22531637 tokens: 2.547, valid loss/error: 2.597 28.77
Average loss over 22532649 tokens: 2.549, valid loss/error: 2.598 28.82
Average loss over 22602758 tokens: 2.558, valid loss/error: 2.597 28.80
Average loss over 22540230 tokens: 2.556, valid loss/error: 2.598 28.82
Average loss over 22516977 tokens: 2.540, valid loss/error: 2.599 28.76
Average loss over 22524321 tokens: 2.548, valid loss/error: 2.599 28.78
Average loss over 22567065 tokens: 2.556, valid loss/error: 2.596 28.76
New best model saved
Average loss over 22541151 tokens: 2.554, valid loss/error: 2.599 28.78
Average loss over 22579860 tokens: 2.556, valid loss/error: 2.599 28.79
Average loss over 22541556 tokens: 2.541, valid loss/error: 2.597 28.78
Average loss over 22581702 tokens: 2.539, valid loss/error: 2.597 28.78
Average loss over 22586280 tokens: 2.548, valid loss/error: 2.598 28.78
Average loss over 22581196 tokens: 2.542, valid loss/error: 2.598 28.81
Average loss over 22514252 tokens: 2.549, valid loss/error: 2.597 28.76
Average loss over 22534967 tokens: 2.541, valid loss/error: 2.598 28.76
Average loss over 22565274 tokens: 2.560, valid loss/error: 2.597 28.76
Average loss over 22561654 tokens: 2.546, valid loss/error: 2.597 28.71
New best model saved
Average loss over 22570947 tokens: 2.557, valid loss/error: 2.599 28.77
Average loss over 22573298 tokens: 2.552, valid loss/error: 2.598 28.73
Average loss over 22539743 tokens: 2.550, valid loss/error: 2.598 28.73
Average loss over 22499498 tokens: 2.542, valid loss/error: 2.598 28.76
Average loss over 22475179 tokens: 2.545, valid loss/error: 2.597 28.74
Average loss over 22566480 tokens: 2.551, valid loss/error: 2.597 28.77
Average loss over 22575896 tokens: 2.555, valid loss/error: 2.597 28.74
Average loss over 22527224 tokens: 2.543, valid loss/error: 2.597 28.75
Average loss over 22449016 tokens: 2.552, valid loss/error: 2.596 28.78
New best model saved
Average loss over 22560394 tokens: 2.549, valid loss/error: 2.597 28.76
Average loss over 22583575 tokens: 2.550, valid loss/error: 2.597 28.73
Average loss over 22537444 tokens: 2.543, valid loss/error: 2.598 28.77
Average loss over 22602413 tokens: 2.559, valid loss/error: 2.596 28.80
New best model saved
Average loss over 22573967 tokens: 2.534, valid loss/error: 2.597 28.80
Average loss over 22544406 tokens: 2.562, valid loss/error: 2.598 28.79
Average loss over 22459853 tokens: 2.547, valid loss/error: 2.597 28.78
Average loss over 22581481 tokens: 2.560, valid loss/error: 2.596 28.76
New best model saved
Average loss over 22567847 tokens: 2.551, valid loss/error: 2.597 28.75
Average loss over 22601332 tokens: 2.558, valid loss/error: 2.598 28.74
Average loss over 22530823 tokens: 2.556, valid loss/error: 2.597 28.77
Average loss over 22526739 tokens: 2.547, valid loss/error: 2.597 28.79
Average loss over 22535157 tokens: 2.547, valid loss/error: 2.597 28.78
Average loss over 22485125 tokens: 2.550, valid loss/error: 2.596 28.80
Average loss over 22549252 tokens: 2.554, valid loss/error: 2.596 28.77
Average loss over 22563616 tokens: 2.555, valid loss/error: 2.596 28.77
New best model saved
Average loss over 22539640 tokens: 2.547, valid loss/error: 2.597 28.77
Average loss over 22579700 tokens: 2.560, valid loss/error: 2.596 28.78
Average loss over 22562074 tokens: 2.545, valid loss/error: 2.597 28.77
Average loss over 22584627 tokens: 2.557, valid loss/error: 2.596 28.75
Average loss over 22510491 tokens: 2.550, valid loss/error: 2.597 28.75
Average loss over 22558661 tokens: 2.549, valid loss/error: 2.597 28.79
Average loss over 22520919 tokens: 2.552, valid loss/error: 2.596 28.79
New best model saved
Average loss over 22513051 tokens: 2.544, valid loss/error: 2.596 28.82
Average loss over 22581393 tokens: 2.550, valid loss/error: 2.596 28.79
Average loss over 22569832 tokens: 2.562, valid loss/error: 2.596 28.75
Average loss over 22589781 tokens: 2.553, valid loss/error: 2.596 28.79
Average loss over 22504519 tokens: 2.549, valid loss/error: 2.595 28.76
New best model saved
Average loss over 22588039 tokens: 2.553, valid loss/error: 2.596 28.74
Average loss over 22568310 tokens: 2.555, valid loss/error: 2.597 28.74
Average loss over 22515036 tokens: 2.550, valid loss/error: 2.595 28.75
Average loss over 7109932 tokens: 2.549
Epoch: 6, train loss: 2.551, valid loss/error: 2.595 28.74
Average loss over 22532968 tokens: 2.546, valid loss/error: 2.596 28.76
Average loss over 22570194 tokens: 2.546, valid loss/error: 2.596 28.75
Average loss over 22541066 tokens: 2.539, valid loss/error: 2.596 28.74
Average loss over 22529804 tokens: 2.541, valid loss/error: 2.595 28.78
Average loss over 22572134 tokens: 2.554, valid loss/error: 2.595 28.78
Average loss over 22491724 tokens: 2.556, valid loss/error: 2.596 28.77
Average loss over 22562604 tokens: 2.545, valid loss/error: 2.596 28.81
Average loss over 22579674 tokens: 2.557, valid loss/error: 2.595 28.79
Average loss over 22602716 tokens: 2.559, valid loss/error: 2.597 28.79
Average loss over 22557101 tokens: 2.550, valid loss/error: 2.596 28.78
Average loss over 22504331 tokens: 2.554, valid loss/error: 2.595 28.78
New best model saved
Average loss over 18470412 tokens: 2.566
Epoch: 7, train loss: 2.551, valid loss/error: 2.597 28.82
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python enfr_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/dividedata/rs_3072/base_FT_enfr_bybase300k_low/std/eva_2.571_28.52.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/enfr_base_100k/std_20epochs/eva_2_2.630_2.645_29.63.h5
load student model from: /home/yfguo/transformer_924/expm/data/rs_6144_2/base_FT_enfr_300k/std/eva_2.595_28.78.h5
Init lr: 1e-05, Dev Loss/Error: 4.168 29.63
Average loss over 10922631 tokens: 2.091, valid loss/error: 3.860 29.53
New best model saved
Average loss over 10912242 tokens: 2.089, valid loss/error: 3.685 29.46
New best model saved
Average loss over 10903525 tokens: 2.085, valid loss/error: 3.533 29.42
New best model saved
Average loss over 10935674 tokens: 2.082, valid loss/error: 3.378 29.40
New best model saved
Average loss over 10927192 tokens: 2.082, valid loss/error: 3.188 29.39
New best model saved
Average loss over 10898419 tokens: 2.079, valid loss/error: 3.008 29.35
New best model saved
Average loss over 10919645 tokens: 2.082, valid loss/error: 2.786 29.37
New best model saved
Average loss over 10909413 tokens: 2.081, valid loss/error: 2.612 29.36
New best model saved
Average loss over 10912747 tokens: 2.082, valid loss/error: 2.425 29.40
New best model saved
Average loss over 10926721 tokens: 2.072, valid loss/error: 2.339 29.37
New best model saved
Average loss over 10930853 tokens: 2.077, valid loss/error: 2.228 29.35
New best model saved
Average loss over 10922578 tokens: 2.073, valid loss/error: 2.174 29.33
New best model saved
Average loss over 10924595 tokens: 2.076, valid loss/error: 2.154 29.35
New best model saved
Average loss over 10953441 tokens: 2.080, valid loss/error: 2.154 29.30
New best model saved
Average loss over 10919643 tokens: 2.070, valid loss/error: 2.147 29.30
New best model saved
Average loss over 10928755 tokens: 2.075, valid loss/error: 2.163 29.33
Average loss over 10909990 tokens: 2.063, valid loss/error: 2.160 29.27
New best model saved
Average loss over 10929670 tokens: 2.064, valid loss/error: 2.158 29.29
Average loss over 10914681 tokens: 2.066, valid loss/error: 2.159 29.28
Average loss over 10911148 tokens: 2.070, valid loss/error: 2.172 29.25
New best model saved
Average loss over 10928578 tokens: 2.073, valid loss/error: 2.152 29.27
Average loss over 10944320 tokens: 2.076, valid loss/error: 2.163 29.29
Average loss over 10956653 tokens: 2.084, valid loss/error: 2.153 29.24
New best model saved
Average loss over 10934354 tokens: 2.071, valid loss/error: 2.152 29.26
Average loss over 10922102 tokens: 2.071, valid loss/error: 2.161 29.26
Average loss over 10927618 tokens: 2.067, valid loss/error: 2.154 29.26
Average loss over 10915702 tokens: 2.066, valid loss/error: 2.170 29.24
Average loss over 10918736 tokens: 2.063, valid loss/error: 2.153 29.23
New best model saved
Average loss over 10925325 tokens: 2.061, valid loss/error: 2.139 29.22
New best model saved
Average loss over 10926712 tokens: 2.074, valid loss/error: 2.158 29.25
Average loss over 10930992 tokens: 2.061, valid loss/error: 2.163 29.24
Average loss over 10914732 tokens: 2.067, valid loss/error: 2.159 29.22
New best model saved
Average loss over 10930820 tokens: 2.067, valid loss/error: 2.142 29.21
New best model saved
Average loss over 10931017 tokens: 2.068, valid loss/error: 2.173 29.20
New best model saved
Average loss over 10887027 tokens: 2.063, valid loss/error: 2.147 29.22
Average loss over 10909935 tokens: 2.071, valid loss/error: 2.135 29.21
New best model saved
Average loss over 10915059 tokens: 2.069, valid loss/error: 2.148 29.22
Average loss over 10932874 tokens: 2.066, valid loss/error: 2.146 29.22
Average loss over 10904063 tokens: 2.062, valid loss/error: 2.162 29.19
New best model saved
Average loss over 10929757 tokens: 2.057, valid loss/error: 2.154 29.20
Average loss over 10919318 tokens: 2.066, valid loss/error: 2.134 29.17
New best model saved
Average loss over 10911529 tokens: 2.063, valid loss/error: 2.142 29.21
Average loss over 2702362 tokens: 2.068
Epoch: 1, train loss: 2.072, valid loss/error: 2.156 29.22
Average loss over 10915069 tokens: 2.063, valid loss/error: 2.157 29.21
Average loss over 10919908 tokens: 2.066, valid loss/error: 2.135 29.20
Average loss over 10910541 tokens: 2.058, valid loss/error: 2.138 29.19
Average loss over 10913219 tokens: 2.065, valid loss/error: 2.138 29.22
Average loss over 10909479 tokens: 2.064, valid loss/error: 2.150 29.19
Average loss over 10915739 tokens: 2.060, valid loss/error: 2.152 29.19
Average loss over 10917230 tokens: 2.062, valid loss/error: 2.134 29.17
New best model saved
Average loss over 10943326 tokens: 2.061, valid loss/error: 2.125 29.21
New best model saved
Average loss over 10925690 tokens: 2.058, valid loss/error: 2.122 29.19
New best model saved
Average loss over 10941515 tokens: 2.066, valid loss/error: 2.151 29.18
Average loss over 10917631 tokens: 2.062, valid loss/error: 2.130 29.16
New best model saved
Average loss over 10926463 tokens: 2.056, valid loss/error: 2.136 29.18
Average loss over 10896138 tokens: 2.062, valid loss/error: 2.132 29.17
Average loss over 10917844 tokens: 2.060, valid loss/error: 2.131 29.17
Average loss over 10918215 tokens: 2.058, valid loss/error: 2.147 29.22
Average loss over 10935570 tokens: 2.064, valid loss/error: 2.146 29.17
Average loss over 10936462 tokens: 2.064, valid loss/error: 2.126 29.13
New best model saved
Average loss over 10892257 tokens: 2.045, valid loss/error: 2.125 29.16
Average loss over 10907670 tokens: 2.059, valid loss/error: 2.135 29.19
Average loss over 10918091 tokens: 2.062, valid loss/error: 2.135 29.17
Average loss over 10890575 tokens: 2.054, valid loss/error: 2.129 29.20
Average loss over 10936376 tokens: 2.062, valid loss/error: 2.142 29.18
Average loss over 10908565 tokens: 2.059, valid loss/error: 2.129 29.15
Average loss over 10916592 tokens: 2.062, valid loss/error: 2.137 29.14
Average loss over 10906876 tokens: 2.054, valid loss/error: 2.123 29.15
Average loss over 10926222 tokens: 2.051, valid loss/error: 2.141 29.18
Average loss over 10920727 tokens: 2.056, valid loss/error: 2.126 29.17
Average loss over 10921172 tokens: 2.050, valid loss/error: 2.164 29.13
Average loss over 10909962 tokens: 2.061, valid loss/error: 2.122 29.10
New best model saved
Average loss over 10909993 tokens: 2.063, valid loss/error: 2.125 29.11
Average loss over 10946439 tokens: 2.060, valid loss/error: 2.134 29.15
Average loss over 10915860 tokens: 2.061, valid loss/error: 2.152 29.15
Average loss over 10931337 tokens: 2.059, valid loss/error: 2.119 29.12
New best model saved
Average loss over 10926077 tokens: 2.067, valid loss/error: 2.128 29.13
Average loss over 10934202 tokens: 2.069, valid loss/error: 2.138 29.18
Average loss over 10935996 tokens: 2.061, valid loss/error: 2.131 29.13
Average loss over 10932755 tokens: 2.067, valid loss/error: 2.119 29.18
New best model saved
Average loss over 10919012 tokens: 2.054, valid loss/error: 2.131 29.09
New best model saved
Average loss over 10924230 tokens: 2.058, valid loss/error: 2.131 29.11
Average loss over 10938007 tokens: 2.063, valid loss/error: 2.123 29.18
Average loss over 10908018 tokens: 2.053, valid loss/error: 2.163 29.18
Average loss over 10927313 tokens: 2.050, valid loss/error: 2.116 29.12
New best model saved
Average loss over 2709010 tokens: 2.068
Epoch: 2, train loss: 2.060, valid loss/error: 2.138 29.10
Average loss over 10906824 tokens: 2.051, valid loss/error: 2.119 29.11
Average loss over 10931446 tokens: 2.055, valid loss/error: 2.106 29.10
New best model saved
Average loss over 10926454 tokens: 2.055, valid loss/error: 2.126 29.11
Average loss over 10928786 tokens: 2.056, valid loss/error: 2.125 29.12
Average loss over 10932819 tokens: 2.051, valid loss/error: 2.121 29.13
Average loss over 10913180 tokens: 2.053, valid loss/error: 2.137 29.19
Average loss over 10920168 tokens: 2.057, valid loss/error: 2.109 29.14
Average loss over 10881473 tokens: 2.047, valid loss/error: 2.116 29.09
New best model saved
Average loss over 10915107 tokens: 2.053, valid loss/error: 2.126 29.11
Average loss over 10937911 tokens: 2.056, valid loss/error: 2.122 29.12
Average loss over 10918480 tokens: 2.048, valid loss/error: 2.117 29.11
Average loss over 10904888 tokens: 2.048, valid loss/error: 2.117 29.10
Average loss over 10934199 tokens: 2.058, valid loss/error: 2.120 29.08
New best model saved
Average loss over 10929309 tokens: 2.057, valid loss/error: 2.130 29.11
Average loss over 10922486 tokens: 2.056, valid loss/error: 2.116 29.13
Average loss over 10928361 tokens: 2.053, valid loss/error: 2.110 29.07
New best model saved
Average loss over 10926018 tokens: 2.059, valid loss/error: 2.123 29.09
Average loss over 10918300 tokens: 2.055, valid loss/error: 2.140 29.09
Average loss over 10944646 tokens: 2.055, valid loss/error: 2.112 29.09
Average loss over 10931294 tokens: 2.052, valid loss/error: 2.113 29.09
Average loss over 10901832 tokens: 2.049, valid loss/error: 2.116 29.05
New best model saved
Average loss over 10934579 tokens: 2.053, valid loss/error: 2.136 29.08
Average loss over 10927213 tokens: 2.057, valid loss/error: 2.110 29.04
New best model saved
Average loss over 10904522 tokens: 2.052, valid loss/error: 2.120 29.08
Average loss over 10926241 tokens: 2.053, valid loss/error: 2.133 29.06
Average loss over 10942082 tokens: 2.048, valid loss/error: 2.133 29.04
Average loss over 10933833 tokens: 2.064, valid loss/error: 2.133 29.03
New best model saved
Average loss over 10918447 tokens: 2.054, valid loss/error: 2.140 29.08
Average loss over 10889689 tokens: 2.058, valid loss/error: 2.121 29.08
Average loss over 10920811 tokens: 2.051, valid loss/error: 2.121 29.06
Average loss over 10926092 tokens: 2.049, valid loss/error: 2.119 29.03
Average loss over 10919109 tokens: 2.056, valid loss/error: 2.115 29.08
Average loss over 10941766 tokens: 2.055, valid loss/error: 2.127 29.08
Average loss over 10912336 tokens: 2.055, valid loss/error: 2.118 29.09
Average loss over 10917563 tokens: 2.056, valid loss/error: 2.135 29.07
Average loss over 10894860 tokens: 2.057, valid loss/error: 2.124 29.07
Average loss over 10936767 tokens: 2.047, valid loss/error: 2.124 29.06
Average loss over 10915276 tokens: 2.064, valid loss/error: 2.129 29.08
Average loss over 10917798 tokens: 2.052, valid loss/error: 2.128 29.07
Average loss over 10906830 tokens: 2.048, valid loss/error: 2.142 29.05
Average loss over 10921435 tokens: 2.056, valid loss/error: 2.109 29.10
Average loss over 10892853 tokens: 2.057, valid loss/error: 2.118 29.10
Average loss over 2700218 tokens: 2.065
Epoch: 3, train loss: 2.054, valid loss/error: 2.115 29.09
Average loss over 10895514 tokens: 2.046, valid loss/error: 2.111 29.09
Average loss over 10909372 tokens: 2.047, valid loss/error: 2.123 29.05
Average loss over 10911524 tokens: 2.047, valid loss/error: 2.118 29.04
Average loss over 10934113 tokens: 2.053, valid loss/error: 2.123 29.04
Average loss over 10924149 tokens: 2.050, valid loss/error: 2.104 29.09
New best model saved
Average loss over 10918475 tokens: 2.048, valid loss/error: 2.095 29.07
New best model saved
Average loss over 10910378 tokens: 2.052, valid loss/error: 2.127 29.06
Average loss over 10920755 tokens: 2.057, valid loss/error: 2.128 29.05
Average loss over 10917882 tokens: 2.053, valid loss/error: 2.130 29.05
Average loss over 10955502 tokens: 2.046, valid loss/error: 2.101 29.07
Average loss over 10940791 tokens: 2.059, valid loss/error: 2.148 29.05
Average loss over 10928687 tokens: 2.056, valid loss/error: 2.110 29.06
Average loss over 10899147 tokens: 2.049, valid loss/error: 2.107 29.04
Average loss over 10930531 tokens: 2.047, valid loss/error: 2.111 29.03
Average loss over 10919011 tokens: 2.059, valid loss/error: 2.117 29.04
Average loss over 10923968 tokens: 2.061, valid loss/error: 2.113 29.04
Average loss over 10921735 tokens: 2.055, valid loss/error: 2.111 29.07
Average loss over 10918856 tokens: 2.050, valid loss/error: 2.107 29.03
Average loss over 10925111 tokens: 2.053, valid loss/error: 2.111 29.05
Average loss over 10913723 tokens: 2.056, valid loss/error: 2.114 29.05
Average loss over 10923276 tokens: 2.049, valid loss/error: 2.115 29.05
Average loss over 10926618 tokens: 2.045, valid loss/error: 2.101 29.04
Average loss over 10934139 tokens: 2.055, valid loss/error: 2.133 29.05
Average loss over 10930522 tokens: 2.050, valid loss/error: 2.102 29.03
New best model saved
Average loss over 10946757 tokens: 2.055, valid loss/error: 2.106 29.06
Average loss over 10918640 tokens: 2.053, valid loss/error: 2.116 29.06
Average loss over 10891593 tokens: 2.051, valid loss/error: 2.098 29.02
New best model saved
Average loss over 10932016 tokens: 2.052, valid loss/error: 2.138 29.04
Average loss over 10914060 tokens: 2.057, valid loss/error: 2.107 29.05
Average loss over 10912602 tokens: 2.051, valid loss/error: 2.110 29.07
Average loss over 10911417 tokens: 2.043, valid loss/error: 2.148 29.07
Average loss over 10907015 tokens: 2.040, valid loss/error: 2.104 29.03
Average loss over 10940659 tokens: 2.057, valid loss/error: 2.103 29.05
Average loss over 10906627 tokens: 2.044, valid loss/error: 2.110 29.05
Average loss over 10931541 tokens: 2.060, valid loss/error: 2.119 29.04
Average loss over 10917076 tokens: 2.045, valid loss/error: 2.119 29.05
Average loss over 10921957 tokens: 2.048, valid loss/error: 2.105 29.00
New best model saved
Average loss over 10945756 tokens: 2.052, valid loss/error: 2.095 29.02
New best model saved
Average loss over 10929291 tokens: 2.051, valid loss/error: 2.104 29.00
Average loss over 10931930 tokens: 2.056, valid loss/error: 2.103 28.97
New best model saved
Average loss over 10932752 tokens: 2.056, valid loss/error: 2.104 28.96
New best model saved
Average loss over 10917796 tokens: 2.043, valid loss/error: 2.108 29.03
Average loss over 2705815 tokens: 2.045
Epoch: 4, train loss: 2.051, valid loss/error: 2.113 29.01
Average loss over 10937179 tokens: 2.040, valid loss/error: 2.093 29.02
New best model saved
Average loss over 10914313 tokens: 2.046, valid loss/error: 2.107 29.04
Average loss over 10907360 tokens: 2.047, valid loss/error: 2.121 29.07
Average loss over 10937424 tokens: 2.049, valid loss/error: 2.105 28.98
Average loss over 10916824 tokens: 2.041, valid loss/error: 2.115 29.02
Average loss over 10896915 tokens: 2.056, valid loss/error: 2.087 29.01
New best model saved
Average loss over 10902034 tokens: 2.042, valid loss/error: 2.105 29.01
Average loss over 10913654 tokens: 2.044, valid loss/error: 2.094 28.99
Average loss over 10943427 tokens: 2.050, valid loss/error: 2.134 28.99
Average loss over 10927899 tokens: 2.044, valid loss/error: 2.124 28.99
Average loss over 10922682 tokens: 2.046, valid loss/error: 2.112 28.99
Average loss over 10920764 tokens: 2.040, valid loss/error: 2.108 28.99
Average loss over 10927034 tokens: 2.052, valid loss/error: 2.117 29.03
Average loss over 10917482 tokens: 2.054, valid loss/error: 2.110 29.03
Average loss over 10943534 tokens: 2.053, valid loss/error: 2.105 28.99
Average loss over 10897541 tokens: 2.054, valid loss/error: 2.114 29.04
Average loss over 10947550 tokens: 2.055, valid loss/error: 2.111 29.05
Average loss over 10925915 tokens: 2.048, valid loss/error: 2.095 29.00
Average loss over 10944200 tokens: 2.050, valid loss/error: 2.114 29.02
Average loss over 10908055 tokens: 2.055, valid loss/error: 2.121 28.99
Average loss over 10940267 tokens: 2.059, valid loss/error: 2.092 28.98
Average loss over 10925280 tokens: 2.044, valid loss/error: 2.105 29.00
Average loss over 10931074 tokens: 2.049, valid loss/error: 2.131 29.00
Average loss over 10919765 tokens: 2.040, valid loss/error: 2.138 28.98
Average loss over 10912803 tokens: 2.042, valid loss/error: 2.107 28.99
Average loss over 10942562 tokens: 2.050, valid loss/error: 2.122 28.98
Average loss over 10916229 tokens: 2.046, valid loss/error: 2.111 29.00
Average loss over 10929402 tokens: 2.047, valid loss/error: 2.102 28.97
Average loss over 10926685 tokens: 2.046, valid loss/error: 2.087 29.01
Average loss over 10920187 tokens: 2.044, valid loss/error: 2.095 28.97
Average loss over 10928393 tokens: 2.049, valid loss/error: 2.090 28.97
Average loss over 10928544 tokens: 2.045, valid loss/error: 2.106 29.00
Average loss over 10913736 tokens: 2.038, valid loss/error: 2.094 29.02
Average loss over 10891747 tokens: 2.043, valid loss/error: 2.103 29.00
Average loss over 10926157 tokens: 2.040, valid loss/error: 2.092 28.97
Average loss over 10908056 tokens: 2.050, valid loss/error: 2.114 29.01
Average loss over 10917577 tokens: 2.044, valid loss/error: 2.123 29.00
Average loss over 10891118 tokens: 2.050, valid loss/error: 2.107 28.97
Average loss over 10906396 tokens: 2.052, valid loss/error: 2.106 28.98
Average loss over 10907203 tokens: 2.048, valid loss/error: 2.113 28.97
Average loss over 10919766 tokens: 2.047, valid loss/error: 2.087 28.96
Average loss over 10917843 tokens: 2.047, valid loss/error: 2.119 28.96
Average loss over 2703475 tokens: 2.033
Epoch: 5, train loss: 2.047, valid loss/error: 2.096 28.97
Average loss over 10911567 tokens: 2.044, valid loss/error: 2.098 28.98
Average loss over 10926143 tokens: 2.050, valid loss/error: 2.104 29.00
Average loss over 10905927 tokens: 2.040, valid loss/error: 2.105 28.99
Average loss over 10933609 tokens: 2.045, valid loss/error: 2.091 29.00
Average loss over 10916365 tokens: 2.050, valid loss/error: 2.085 29.01
New best model saved
Average loss over 10901564 tokens: 2.034, valid loss/error: 2.104 28.99
Average loss over 10931086 tokens: 2.045, valid loss/error: 2.091 28.99
Average loss over 10931864 tokens: 2.049, valid loss/error: 2.115 28.97
Average loss over 10929275 tokens: 2.045, valid loss/error: 2.092 28.98
Average loss over 10913579 tokens: 2.048, valid loss/error: 2.094 28.99
Average loss over 10904225 tokens: 2.045, valid loss/error: 2.083 29.01
New best model saved
Average loss over 10895689 tokens: 2.045, valid loss/error: 2.104 29.00
Average loss over 10920722 tokens: 2.037, valid loss/error: 2.081 28.99
New best model saved
Average loss over 10923866 tokens: 2.053, valid loss/error: 2.086 29.00
Average loss over 10936889 tokens: 2.053, valid loss/error: 2.103 29.00
Average loss over 10920554 tokens: 2.051, valid loss/error: 2.101 28.98
Average loss over 10901240 tokens: 2.040, valid loss/error: 2.089 28.95
New best model saved
Average loss over 10922570 tokens: 2.051, valid loss/error: 2.104 28.98
Average loss over 10935406 tokens: 2.038, valid loss/error: 2.091 28.98
Average loss over 10917221 tokens: 2.048, valid loss/error: 2.092 28.97
Average loss over 10909404 tokens: 2.043, valid loss/error: 2.113 28.97
Average loss over 10921568 tokens: 2.044, valid loss/error: 2.094 28.95
Average loss over 10926376 tokens: 2.045, valid loss/error: 2.104 28.94
New best model saved
Average loss over 10906125 tokens: 2.044, valid loss/error: 2.100 28.97
Average loss over 10929309 tokens: 2.040, valid loss/error: 2.075 28.92
New best model saved
Average loss over 10917142 tokens: 2.043, valid loss/error: 2.090 28.95
Average loss over 10936099 tokens: 2.043, valid loss/error: 2.091 28.97
Average loss over 10930923 tokens: 2.041, valid loss/error: 2.091 28.97
Average loss over 10936226 tokens: 2.038, valid loss/error: 2.099 28.92
Average loss over 10911126 tokens: 2.044, valid loss/error: 2.101 29.00
Average loss over 10908710 tokens: 2.048, valid loss/error: 2.084 28.96
Average loss over 10927533 tokens: 2.048, valid loss/error: 2.122 28.96
Average loss over 10947423 tokens: 2.058, valid loss/error: 2.106 28.97
Average loss over 10936037 tokens: 2.047, valid loss/error: 2.098 28.98
Average loss over 10917670 tokens: 2.045, valid loss/error: 2.089 28.95
Average loss over 10934998 tokens: 2.043, valid loss/error: 2.087 28.91
New best model saved
Average loss over 10907561 tokens: 2.044, valid loss/error: 2.103 28.95
Average loss over 10917536 tokens: 2.049, valid loss/error: 2.109 28.95
Average loss over 10904332 tokens: 2.049, valid loss/error: 2.098 28.95
Average loss over 10922474 tokens: 2.044, valid loss/error: 2.079 28.94
Average loss over 10903682 tokens: 2.042, valid loss/error: 2.091 28.97
Average loss over 10923041 tokens: 2.044, valid loss/error: 2.123 28.94
Average loss over 2701440 tokens: 2.062
Epoch: 6, train loss: 2.045, valid loss/error: 2.092 28.93
Average loss over 10914090 tokens: 2.043, valid loss/error: 2.091 28.98
Average loss over 10925620 tokens: 2.040, valid loss/error: 2.088 28.94
Average loss over 10915673 tokens: 2.038, valid loss/error: 2.081 28.93
Average loss over 10917383 tokens: 2.046, valid loss/error: 2.101 28.96
Average loss over 10910479 tokens: 2.042, valid loss/error: 2.077 28.97
Average loss over 10932402 tokens: 2.051, valid loss/error: 2.090 28.94
Average loss over 10953204 tokens: 2.047, valid loss/error: 2.088 28.95
Average loss over 10931918 tokens: 2.046, valid loss/error: 2.104 28.97
Average loss over 10924949 tokens: 2.039, valid loss/error: 2.085 28.93
Average loss over 10894172 tokens: 2.040, valid loss/error: 2.109 28.97
Average loss over 10933368 tokens: 2.045, valid loss/error: 2.075 28.98
Average loss over 10910736 tokens: 2.047, valid loss/error: 2.090 28.96
Average loss over 10907852 tokens: 2.047, valid loss/error: 2.101 28.92
Average loss over 10919872 tokens: 2.048, valid loss/error: 2.089 28.99
Average loss over 10928292 tokens: 2.048, valid loss/error: 2.096 28.94
Average loss over 10927168 tokens: 2.041, valid loss/error: 2.084 28.95
Average loss over 10896796 tokens: 2.040, valid loss/error: 2.088 28.98
Average loss over 10912719 tokens: 2.045, valid loss/error: 2.100 28.94
Average loss over 10916423 tokens: 2.039, valid loss/error: 2.085 28.94
Average loss over 10907376 tokens: 2.042, valid loss/error: 2.086 28.98
Average loss over 10914846 tokens: 2.040, valid loss/error: 2.093 28.95
Average loss over 10938304 tokens: 2.056, valid loss/error: 2.088 28.97
Average loss over 10922390 tokens: 2.047, valid loss/error: 2.102 28.92
Average loss over 10948367 tokens: 2.051, valid loss/error: 2.101 28.94
Average loss over 10891930 tokens: 2.041, valid loss/error: 2.104 28.96
Average loss over 10914314 tokens: 2.038, valid loss/error: 2.085 28.92
Average loss over 10906159 tokens: 2.037, valid loss/error: 2.097 28.96
Average loss over 10923642 tokens: 2.049, valid loss/error: 2.103 28.94
Average loss over 10925692 tokens: 2.043, valid loss/error: 2.094 28.94
Average loss over 10928650 tokens: 2.044, valid loss/error: 2.095 28.96
Average loss over 10919123 tokens: 2.044, valid loss/error: 2.075 28.96
Average loss over 10936840 tokens: 2.032, valid loss/error: 2.083 28.94
Average loss over 10914644 tokens: 2.035, valid loss/error: 2.091 28.94
Average loss over 10920249 tokens: 2.042, valid loss/error: 2.085 28.94
Average loss over 10913419 tokens: 2.036, valid loss/error: 2.076 28.94
Average loss over 10917289 tokens: 2.052, valid loss/error: 2.096 28.93
Average loss over 10898133 tokens: 2.041, valid loss/error: 2.078 28.92
Average loss over 10948741 tokens: 2.050, valid loss/error: 2.093 28.92
Average loss over 10906269 tokens: 2.046, valid loss/error: 2.085 28.91
Average loss over 10918049 tokens: 2.038, valid loss/error: 2.094 28.89
New best model saved
Average loss over 10926534 tokens: 2.049, valid loss/error: 2.093 28.94
Average loss over 10926099 tokens: 2.043, valid loss/error: 2.099 28.91
Average loss over 2705389 tokens: 2.059
Epoch: 7, train loss: 2.044, valid loss/error: 2.088 28.93
Average loss over 10935898 tokens: 2.043, valid loss/error: 2.080 28.94
Average loss over 10922464 tokens: 2.038, valid loss/error: 2.087 28.94
Average loss over 10923252 tokens: 2.044, valid loss/error: 2.066 28.91
New best model saved
Average loss over 10936610 tokens: 2.046, valid loss/error: 2.079 28.97
Average loss over 10913263 tokens: 2.041, valid loss/error: 2.074 28.96
Average loss over 10937605 tokens: 2.040, valid loss/error: 2.089 28.97
Average loss over 10922082 tokens: 2.033, valid loss/error: 2.103 28.97
Average loss over 10938934 tokens: 2.044, valid loss/error: 2.079 28.90
Average loss over 10908715 tokens: 2.041, valid loss/error: 2.081 28.90
Average loss over 10903342 tokens: 2.045, valid loss/error: 2.081 28.91
Average loss over 10924114 tokens: 2.041, valid loss/error: 2.103 28.91
Average loss over 10929296 tokens: 2.042, valid loss/error: 2.107 28.92
Average loss over 10912073 tokens: 2.048, valid loss/error: 2.096 28.93
Average loss over 10929629 tokens: 2.041, valid loss/error: 2.083 28.90
Average loss over 10913116 tokens: 2.044, valid loss/error: 2.070 28.96
Average loss over 10907634 tokens: 2.034, valid loss/error: 2.090 28.95
Average loss over 10926362 tokens: 2.047, valid loss/error: 2.070 28.95
Average loss over 10941178 tokens: 2.036, valid loss/error: 2.088 28.97
Average loss over 10896230 tokens: 2.040, valid loss/error: 2.069 29.02
Average loss over 10913749 tokens: 2.044, valid loss/error: 2.095 28.99
Average loss over 10913383 tokens: 2.040, valid loss/error: 2.085 28.97
Average loss over 10913560 tokens: 2.042, valid loss/error: 2.086 28.94
Average loss over 10947040 tokens: 2.039, valid loss/error: 2.070 28.94
Average loss over 10899972 tokens: 2.039, valid loss/error: 2.092 28.93
Average loss over 10936091 tokens: 2.039, valid loss/error: 2.089 28.96
Average loss over 10921856 tokens: 2.049, valid loss/error: 2.105 28.95
Average loss over 10902577 tokens: 2.040, valid loss/error: 2.098 28.93
Average loss over 10902943 tokens: 2.036, valid loss/error: 2.084 28.93
Average loss over 10907494 tokens: 2.037, valid loss/error: 2.068 28.97
Average loss over 10912874 tokens: 2.044, valid loss/error: 2.120 28.95
Average loss over 10918659 tokens: 2.039, valid loss/error: 2.078 28.94
Average loss over 10934822 tokens: 2.043, valid loss/error: 2.084 28.95
Average loss over 10912586 tokens: 2.050, valid loss/error: 2.085 28.96
Average loss over 10921260 tokens: 2.053, valid loss/error: 2.085 28.92
Average loss over 10907607 tokens: 2.040, valid loss/error: 2.083 28.93
Average loss over 10905793 tokens: 2.039, valid loss/error: 2.085 28.93
Average loss over 10926464 tokens: 2.052, valid loss/error: 2.089 28.92
Average loss over 10930186 tokens: 2.038, valid loss/error: 2.081 28.94
Average loss over 10888584 tokens: 2.045, valid loss/error: 2.076 28.94
Average loss over 10939226 tokens: 2.045, valid loss/error: 2.078 28.89
New best model saved
Average loss over 10910189 tokens: 2.038, valid loss/error: 2.096 28.90
Average loss over 10913605 tokens: 2.034, valid loss/error: 2.104 28.93
Average loss over 2700118 tokens: 2.045
Epoch: 8, train loss: 2.042, valid loss/error: 2.076 28.94
Average loss over 10943968 tokens: 2.047, valid loss/error: 2.074 28.97
Average loss over 10923060 tokens: 2.045, valid loss/error: 2.086 28.94
Average loss over 10932937 tokens: 2.047, valid loss/error: 2.097 28.97
Average loss over 10918701 tokens: 2.035, valid loss/error: 2.078 28.95
Average loss over 10927552 tokens: 2.043, valid loss/error: 2.108 28.93
Average loss over 10929478 tokens: 2.039, valid loss/error: 2.091 28.94
Average loss over 10940789 tokens: 2.040, valid loss/error: 2.125 28.92
Average loss over 10929455 tokens: 2.047, valid loss/error: 2.088 28.94
Average loss over 10914644 tokens: 2.037, valid loss/error: 2.096 28.94
Average loss over 10918245 tokens: 2.031, valid loss/error: 2.083 28.95
Average loss over 10920134 tokens: 2.045, valid loss/error: 2.077 28.92
Average loss over 10936800 tokens: 2.041, valid loss/error: 2.123 28.92
Average loss over 10906479 tokens: 2.032, valid loss/error: 2.082 28.89
Average loss over 10925734 tokens: 2.035, valid loss/error: 2.100 28.88
New best model saved
Average loss over 10896026 tokens: 2.038, valid loss/error: 2.086 28.89
Average loss over 10937958 tokens: 2.033, valid loss/error: 2.054 28.89
New best model saved
Average loss over 10901981 tokens: 2.039, valid loss/error: 2.075 28.90
Average loss over 10943606 tokens: 2.042, valid loss/error: 2.085 28.92
Average loss over 10927843 tokens: 2.041, valid loss/error: 2.072 28.94
Average loss over 10906781 tokens: 2.040, valid loss/error: 2.072 28.93
Average loss over 10900739 tokens: 2.031, valid loss/error: 2.100 28.89
Average loss over 10911807 tokens: 2.043, valid loss/error: 2.107 28.90
Average loss over 10910152 tokens: 2.040, valid loss/error: 2.080 28.87
New best model saved
Average loss over 10906254 tokens: 2.050, valid loss/error: 2.101 28.88
Average loss over 10917320 tokens: 2.032, valid loss/error: 2.070 28.91
Average loss over 10916415 tokens: 2.039, valid loss/error: 2.101 28.90
Average loss over 10935327 tokens: 2.039, valid loss/error: 2.076 28.91
Average loss over 10925576 tokens: 2.045, valid loss/error: 2.081 28.90
Average loss over 10910010 tokens: 2.042, valid loss/error: 2.070 28.93
Average loss over 10914310 tokens: 2.035, valid loss/error: 2.075 28.89
Average loss over 10929239 tokens: 2.041, valid loss/error: 2.100 28.92
Average loss over 10912738 tokens: 2.040, valid loss/error: 2.103 28.87
Average loss over 10929863 tokens: 2.039, valid loss/error: 2.084 28.88
Average loss over 10930977 tokens: 2.044, valid loss/error: 2.094 28.87
Average loss over 10921150 tokens: 2.037, valid loss/error: 2.102 28.89
Average loss over 10892703 tokens: 2.044, valid loss/error: 2.063 28.93
Average loss over 10938414 tokens: 2.037, valid loss/error: 2.091 28.90
Average loss over 10918872 tokens: 2.039, valid loss/error: 2.075 28.94
Average loss over 10902993 tokens: 2.043, valid loss/error: 2.077 28.93
Average loss over 10912491 tokens: 2.037, valid loss/error: 2.100 28.90
Average loss over 10922670 tokens: 2.047, valid loss/error: 2.075 28.89
Average loss over 10904484 tokens: 2.031, valid loss/error: 2.075 28.91
Average loss over 2693372 tokens: 2.046
Epoch: 9, train loss: 2.040, valid loss/error: 2.073 28.90
Average loss over 10929873 tokens: 2.042, valid loss/error: 2.072 28.89
Average loss over 10913400 tokens: 2.033, valid loss/error: 2.064 28.87
Average loss over 10917751 tokens: 2.039, valid loss/error: 2.072 28.91
Average loss over 10920630 tokens: 2.045, valid loss/error: 2.092 28.88
Average loss over 10936407 tokens: 2.035, valid loss/error: 2.101 28.92
Average loss over 10920661 tokens: 2.049, valid loss/error: 2.077 28.91
Average loss over 10929047 tokens: 2.033, valid loss/error: 2.058 28.92
Average loss over 10907907 tokens: 2.034, valid loss/error: 2.087 28.92
Average loss over 10924403 tokens: 2.048, valid loss/error: 2.097 28.88
Average loss over 10912958 tokens: 2.044, valid loss/error: 2.087 28.85
New best model saved
Average loss over 10931653 tokens: 2.046, valid loss/error: 2.077 28.84
New best model saved
Average loss over 10903228 tokens: 2.040, valid loss/error: 2.074 28.87
Average loss over 10930095 tokens: 2.047, valid loss/error: 2.064 28.92
Average loss over 10954766 tokens: 2.038, valid loss/error: 2.115 28.91
Average loss over 10923539 tokens: 2.038, valid loss/error: 2.101 28.92
Average loss over 10918662 tokens: 2.034, valid loss/error: 2.074 28.85
Average loss over 10923115 tokens: 2.039, valid loss/error: 2.083 28.90
Average loss over 10942443 tokens: 2.044, valid loss/error: 2.105 28.90
Average loss over 10925564 tokens: 2.047, valid loss/error: 2.091 28.86
Average loss over 10921071 tokens: 2.039, valid loss/error: 2.076 28.87
Average loss over 10900492 tokens: 2.033, valid loss/error: 2.075 28.89
Average loss over 10925330 tokens: 2.033, valid loss/error: 2.074 28.90
Average loss over 10922223 tokens: 2.039, valid loss/error: 2.091 28.86
Average loss over 10923111 tokens: 2.042, valid loss/error: 2.077 28.91
Average loss over 10920470 tokens: 2.044, valid loss/error: 2.071 28.90
Average loss over 10927275 tokens: 2.038, valid loss/error: 2.059 28.90
Average loss over 10902965 tokens: 2.036, valid loss/error: 2.101 28.89
Average loss over 10952542 tokens: 2.034, valid loss/error: 2.072 28.90
Average loss over 10916647 tokens: 2.034, valid loss/error: 2.066 28.85
Average loss over 10907200 tokens: 2.039, valid loss/error: 2.071 28.89
Average loss over 10915231 tokens: 2.040, valid loss/error: 2.067 28.86
Average loss over 10922702 tokens: 2.039, valid loss/error: 2.052 28.89
New best model saved
Average loss over 10931558 tokens: 2.033, valid loss/error: 2.079 28.89
Average loss over 10938740 tokens: 2.043, valid loss/error: 2.106 28.89
Average loss over 10922438 tokens: 2.028, valid loss/error: 2.071 28.91
Average loss over 10920430 tokens: 2.035, valid loss/error: 2.085 28.88
Average loss over 10925462 tokens: 2.040, valid loss/error: 2.074 28.89
Average loss over 10909745 tokens: 2.042, valid loss/error: 2.095 28.90
Average loss over 10917234 tokens: 2.037, valid loss/error: 2.094 28.92
Average loss over 10923152 tokens: 2.034, valid loss/error: 2.103 28.88
Average loss over 10932651 tokens: 2.032, valid loss/error: 2.082 28.89
Average loss over 10929544 tokens: 2.033, valid loss/error: 2.060 28.91
Average loss over 2704620 tokens: 2.044
Epoch: 10, train loss: 2.039, valid loss/error: 2.084 28.91
Average loss over 10914963 tokens: 2.038, valid loss/error: 2.095 28.91
Average loss over 10910094 tokens: 2.049, valid loss/error: 2.099 28.90
Average loss over 10920637 tokens: 2.043, valid loss/error: 2.067 28.87
Average loss over 10920970 tokens: 2.039, valid loss/error: 2.070 28.91
Average loss over 10925126 tokens: 2.038, valid loss/error: 2.087 28.89
Average loss over 10931668 tokens: 2.048, valid loss/error: 2.058 28.88
Average loss over 10907158 tokens: 2.033, valid loss/error: 2.067 28.86
Average loss over 10904798 tokens: 2.037, valid loss/error: 2.096 28.91
Average loss over 10909237 tokens: 2.031, valid loss/error: 2.077 28.93
Average loss over 10922433 tokens: 2.036, valid loss/error: 2.076 28.92
Average loss over 10917380 tokens: 2.031, valid loss/error: 2.067 28.94
Average loss over 10925219 tokens: 2.038, valid loss/error: 2.061 28.89
Average loss over 10915755 tokens: 2.042, valid loss/error: 2.075 28.92
Average loss over 10915481 tokens: 2.046, valid loss/error: 2.101 28.91
Average loss over 10901945 tokens: 2.038, valid loss/error: 2.120 28.92
Average loss over 10911224 tokens: 2.028, valid loss/error: 2.091 28.91
Average loss over 10912798 tokens: 2.039, valid loss/error: 2.073 28.91
Average loss over 10905653 tokens: 2.032, valid loss/error: 2.077 28.93
Average loss over 10945651 tokens: 2.041, valid loss/error: 2.075 28.92
Average loss over 10924587 tokens: 2.036, valid loss/error: 2.090 28.90
Average loss over 10919647 tokens: 2.036, valid loss/error: 2.061 28.91
Average loss over 10913082 tokens: 2.027, valid loss/error: 2.079 28.90
Average loss over 10928438 tokens: 2.047, valid loss/error: 2.088 28.88
Average loss over 10915680 tokens: 2.036, valid loss/error: 2.100 28.89
Average loss over 10927376 tokens: 2.033, valid loss/error: 2.062 28.88
Average loss over 10937007 tokens: 2.034, valid loss/error: 2.070 28.89
Average loss over 10925969 tokens: 2.038, valid loss/error: 2.070 28.91
Average loss over 10910383 tokens: 2.036, valid loss/error: 2.059 28.87
Average loss over 10923125 tokens: 2.041, valid loss/error: 2.060 28.91
Average loss over 10921223 tokens: 2.025, valid loss/error: 2.068 28.87
Average loss over 10944097 tokens: 2.043, valid loss/error: 2.093 28.87
Average loss over 10919177 tokens: 2.040, valid loss/error: 2.076 28.92
Average loss over 10914531 tokens: 2.030, valid loss/error: 2.102 28.88
Average loss over 10931411 tokens: 2.045, valid loss/error: 2.082 28.87
Average loss over 10932106 tokens: 2.044, valid loss/error: 2.101 28.90
Average loss over 10908821 tokens: 2.037, valid loss/error: 2.045 28.89
New best model saved
Average loss over 10920063 tokens: 2.034, valid loss/error: 2.089 28.88
Average loss over 10920111 tokens: 2.040, valid loss/error: 2.069 28.90
Average loss over 10911457 tokens: 2.030, valid loss/error: 2.074 28.88
Average loss over 10928273 tokens: 2.035, valid loss/error: 2.053 28.85
Average loss over 10935573 tokens: 2.040, valid loss/error: 2.076 28.87
Average loss over 10897671 tokens: 2.031, valid loss/error: 2.079 28.89
Average loss over 2700672 tokens: 2.031
Epoch: 11, train loss: 2.037, valid loss/error: 2.054 28.89
Average loss over 10888925 tokens: 2.035, valid loss/error: 2.061 28.87
Average loss over 10918585 tokens: 2.040, valid loss/error: 2.080 28.88
Average loss over 10903670 tokens: 2.038, valid loss/error: 2.076 28.86
Average loss over 10925722 tokens: 2.035, valid loss/error: 2.061 28.88
Average loss over 10912737 tokens: 2.036, valid loss/error: 2.063 28.84
New best model saved
Average loss over 10931674 tokens: 2.034, valid loss/error: 2.064 28.85
Average loss over 10927081 tokens: 2.040, valid loss/error: 2.076 28.88
Average loss over 10918755 tokens: 2.030, valid loss/error: 2.055 28.85
Average loss over 10910252 tokens: 2.047, valid loss/error: 2.069 28.83
New best model saved
Average loss over 10914448 tokens: 2.042, valid loss/error: 2.074 28.81
New best model saved
Average loss over 10934989 tokens: 2.038, valid loss/error: 2.056 28.84
Average loss over 10916668 tokens: 2.043, valid loss/error: 2.076 28.87
Average loss over 10923395 tokens: 2.038, valid loss/error: 2.107 28.84
Average loss over 10931560 tokens: 2.031, valid loss/error: 2.070 28.87
Average loss over 10918575 tokens: 2.039, valid loss/error: 2.116 28.86
Average loss over 10948222 tokens: 2.037, valid loss/error: 2.088 28.84
Average loss over 10904608 tokens: 2.027, valid loss/error: 2.077 28.85
Average loss over 10937300 tokens: 2.048, valid loss/error: 2.073 28.87
Average loss over 10914515 tokens: 2.034, valid loss/error: 2.061 28.88
Average loss over 10928391 tokens: 2.039, valid loss/error: 2.085 28.87
Average loss over 10928784 tokens: 2.037, valid loss/error: 2.066 28.86
Average loss over 10917480 tokens: 2.033, valid loss/error: 2.071 28.84
Average loss over 10953891 tokens: 2.036, valid loss/error: 2.060 28.85
Average loss over 10920598 tokens: 2.041, valid loss/error: 2.067 28.87
Average loss over 10916165 tokens: 2.037, valid loss/error: 2.080 28.89
Average loss over 10910008 tokens: 2.030, valid loss/error: 2.064 28.88
Average loss over 10926387 tokens: 2.037, valid loss/error: 2.084 28.87
Average loss over 10921443 tokens: 2.042, valid loss/error: 2.055 28.88
Average loss over 10952817 tokens: 2.030, valid loss/error: 2.074 28.93
Average loss over 10928886 tokens: 2.033, valid loss/error: 2.078 28.92
Average loss over 10944370 tokens: 2.037, valid loss/error: 2.073 28.88
Average loss over 10938867 tokens: 2.032, valid loss/error: 2.074 28.86
Average loss over 10932364 tokens: 2.035, valid loss/error: 2.067 28.85
Average loss over 10927009 tokens: 2.031, valid loss/error: 2.074 28.88
Average loss over 10925998 tokens: 2.038, valid loss/error: 2.081 28.90
Average loss over 10892283 tokens: 2.028, valid loss/error: 2.055 28.87
Average loss over 10932548 tokens: 2.042, valid loss/error: 2.064 28.84
Average loss over 10918483 tokens: 2.034, valid loss/error: 2.052 28.84
Average loss over 10911382 tokens: 2.040, valid loss/error: 2.068 28.87
Average loss over 10908820 tokens: 2.039, valid loss/error: 2.072 28.84
Average loss over 10939221 tokens: 2.034, valid loss/error: 2.061 28.86
Average loss over 10940294 tokens: 2.038, valid loss/error: 2.083 28.84
Average loss over 2698114 tokens: 2.033
Epoch: 12, train loss: 2.037, valid loss/error: 2.065 28.84
Average loss over 10920784 tokens: 2.029, valid loss/error: 2.065 28.86
Average loss over 10932862 tokens: 2.037, valid loss/error: 2.083 28.88
Average loss over 10936842 tokens: 2.035, valid loss/error: 2.036 28.85
New best model saved
Average loss over 10929539 tokens: 2.039, valid loss/error: 2.081 28.91
Average loss over 10907171 tokens: 2.036, valid loss/error: 2.069 28.88
Average loss over 10923359 tokens: 2.029, valid loss/error: 2.064 28.87
Average loss over 10913141 tokens: 2.038, valid loss/error: 2.074 28.87
Average loss over 10931901 tokens: 2.026, valid loss/error: 2.060 28.85
Average loss over 10943899 tokens: 2.046, valid loss/error: 2.065 28.87
Average loss over 10918322 tokens: 2.030, valid loss/error: 2.079 28.86
Average loss over 10924391 tokens: 2.028, valid loss/error: 2.059 28.89
Average loss over 10909416 tokens: 2.038, valid loss/error: 2.084 28.87
Average loss over 10917576 tokens: 2.030, valid loss/error: 2.060 28.90
Average loss over 10924780 tokens: 2.038, valid loss/error: 2.058 28.90
Average loss over 10920235 tokens: 2.031, valid loss/error: 2.066 28.85
Average loss over 10919825 tokens: 2.033, valid loss/error: 2.077 28.85
Average loss over 10920955 tokens: 2.033, valid loss/error: 2.085 28.90
Average loss over 10897917 tokens: 2.037, valid loss/error: 2.083 28.87
Average loss over 10917014 tokens: 2.033, valid loss/error: 2.091 28.85
Average loss over 10938742 tokens: 2.035, valid loss/error: 2.067 28.83
Average loss over 10905360 tokens: 2.022, valid loss/error: 2.048 28.91
Average loss over 10935637 tokens: 2.043, valid loss/error: 2.062 28.90
Average loss over 10935457 tokens: 2.035, valid loss/error: 2.076 28.88
Average loss over 10920627 tokens: 2.040, valid loss/error: 2.057 28.87
Average loss over 10922999 tokens: 2.040, valid loss/error: 2.063 28.89
Average loss over 10950505 tokens: 2.038, valid loss/error: 2.068 28.90
Average loss over 10921952 tokens: 2.038, valid loss/error: 2.090 28.84
Average loss over 10925819 tokens: 2.040, valid loss/error: 2.059 28.87
Average loss over 10921728 tokens: 2.038, valid loss/error: 2.070 28.88
Average loss over 10934370 tokens: 2.040, valid loss/error: 2.041 28.85
Average loss over 10932727 tokens: 2.043, valid loss/error: 2.090 28.82
Average loss over 10911199 tokens: 2.037, valid loss/error: 2.088 28.84
Average loss over 10930503 tokens: 2.030, valid loss/error: 2.066 28.88
Average loss over 10905839 tokens: 2.035, valid loss/error: 2.072 28.89
Average loss over 10933204 tokens: 2.037, valid loss/error: 2.073 28.84
Average loss over 10915915 tokens: 2.026, valid loss/error: 2.060 28.82
Average loss over 10934763 tokens: 2.043, valid loss/error: 2.065 28.83
Average loss over 10892499 tokens: 2.032, valid loss/error: 2.068 28.82
Average loss over 10926743 tokens: 2.044, valid loss/error: 2.036 28.83
New best model saved
Average loss over 10896005 tokens: 2.033, valid loss/error: 2.057 28.84
Average loss over 10911902 tokens: 2.022, valid loss/error: 2.050 28.83
Average loss over 10915592 tokens: 2.029, valid loss/error: 2.067 28.86
Average loss over 2701041 tokens: 2.035
Epoch: 13, train loss: 2.035, valid loss/error: 2.062 28.85
Average loss over 10934087 tokens: 2.027, valid loss/error: 2.084 28.86
Average loss over 10942557 tokens: 2.034, valid loss/error: 2.049 28.84
Average loss over 10925478 tokens: 2.032, valid loss/error: 2.037 28.84
Average loss over 10934749 tokens: 2.026, valid loss/error: 2.081 28.89
Average loss over 10940256 tokens: 2.044, valid loss/error: 2.066 28.87
Average loss over 10924937 tokens: 2.037, valid loss/error: 2.066 28.89
Average loss over 10911192 tokens: 2.037, valid loss/error: 2.080 28.85
Average loss over 10899100 tokens: 2.035, valid loss/error: 2.074 28.85
Average loss over 10949559 tokens: 2.034, valid loss/error: 2.058 28.85
Average loss over 10903792 tokens: 2.039, valid loss/error: 2.058 28.87
Average loss over 10911915 tokens: 2.031, valid loss/error: 2.043 28.85
Average loss over 10906966 tokens: 2.037, valid loss/error: 2.057 28.86
Average loss over 10935926 tokens: 2.041, valid loss/error: 2.039 28.80
New best model saved
Average loss over 10914469 tokens: 2.029, valid loss/error: 2.061 28.88
Average loss over 10928132 tokens: 2.046, valid loss/error: 2.066 28.84
Average loss over 10926110 tokens: 2.041, valid loss/error: 2.065 28.85
Average loss over 10908145 tokens: 2.029, valid loss/error: 2.051 28.88
Average loss over 10895033 tokens: 2.026, valid loss/error: 2.063 28.90
Average loss over 10956891 tokens: 2.042, valid loss/error: 2.086 28.87
Average loss over 10902308 tokens: 2.027, valid loss/error: 2.049 28.86
Average loss over 10924157 tokens: 2.036, valid loss/error: 2.071 28.85
Average loss over 10916154 tokens: 2.030, valid loss/error: 2.054 28.84
Average loss over 10910275 tokens: 2.035, valid loss/error: 2.060 28.87
Average loss over 10913996 tokens: 2.043, valid loss/error: 2.120 28.88
Average loss over 10926268 tokens: 2.032, valid loss/error: 2.096 28.80
Average loss over 10905551 tokens: 2.034, valid loss/error: 2.063 28.87
Average loss over 10920661 tokens: 2.028, valid loss/error: 2.068 28.87
Average loss over 10895947 tokens: 2.035, valid loss/error: 2.097 28.84
Average loss over 10921245 tokens: 2.032, valid loss/error: 2.079 28.83
Average loss over 10922602 tokens: 2.044, valid loss/error: 2.063 28.87
Average loss over 10936216 tokens: 2.035, valid loss/error: 2.034 28.86
New best model saved
Average loss over 10947036 tokens: 2.038, valid loss/error: 2.077 28.84
Average loss over 10907975 tokens: 2.037, valid loss/error: 2.071 28.86
Average loss over 10923711 tokens: 2.031, valid loss/error: 2.072 28.83
Average loss over 10907677 tokens: 2.034, valid loss/error: 2.066 28.86
Average loss over 10936138 tokens: 2.036, valid loss/error: 2.080 28.83
Average loss over 10915666 tokens: 2.038, valid loss/error: 2.080 28.87
Average loss over 10952722 tokens: 2.036, valid loss/error: 2.060 28.90
Average loss over 10885309 tokens: 2.030, valid loss/error: 2.066 28.86
Average loss over 10918686 tokens: 2.033, valid loss/error: 2.037 28.85
Average loss over 10940368 tokens: 2.038, valid loss/error: 2.073 28.85
Average loss over 10922366 tokens: 2.033, valid loss/error: 2.061 28.82
Average loss over 2693228 tokens: 2.023
Epoch: 14, train loss: 2.035, valid loss/error: 2.050 28.82
Average loss over 10925347 tokens: 2.033, valid loss/error: 2.063 28.81
Average loss over 10913029 tokens: 2.031, valid loss/error: 2.074 28.82
Average loss over 10916583 tokens: 2.035, valid loss/error: 2.063 28.80
Average loss over 10910722 tokens: 2.027, valid loss/error: 2.058 28.83
Average loss over 10928654 tokens: 2.036, valid loss/error: 2.067 28.85
Average loss over 10929500 tokens: 2.028, valid loss/error: 2.072 28.85
Average loss over 10925131 tokens: 2.030, valid loss/error: 2.069 28.82
Average loss over 10918353 tokens: 2.030, valid loss/error: 2.065 28.86
Average loss over 10914419 tokens: 2.032, valid loss/error: 2.057 28.82
Average loss over 10918974 tokens: 2.043, valid loss/error: 2.067 28.81
Average loss over 10915693 tokens: 2.035, valid loss/error: 2.063 28.85
Average loss over 10923975 tokens: 2.036, valid loss/error: 2.070 28.85
Average loss over 10923824 tokens: 2.040, valid loss/error: 2.078 28.88
Average loss over 10923602 tokens: 2.033, valid loss/error: 2.053 28.85
Average loss over 10922204 tokens: 2.034, valid loss/error: 2.058 28.85
Average loss over 10923707 tokens: 2.039, valid loss/error: 2.054 28.84
Average loss over 10918643 tokens: 2.031, valid loss/error: 2.073 28.86
Average loss over 10894123 tokens: 2.037, valid loss/error: 2.055 28.86
Average loss over 10913075 tokens: 2.028, valid loss/error: 2.076 28.87
Average loss over 10919683 tokens: 2.025, valid loss/error: 2.077 28.86
Average loss over 10945906 tokens: 2.023, valid loss/error: 2.054 28.84
Average loss over 10923733 tokens: 2.037, valid loss/error: 2.060 28.88
Average loss over 10925958 tokens: 2.038, valid loss/error: 2.040 28.85
Average loss over 10910713 tokens: 2.034, valid loss/error: 2.103 28.84
Average loss over 10910949 tokens: 2.032, valid loss/error: 2.057 28.85
Average loss over 10932538 tokens: 2.029, valid loss/error: 2.060 28.86
Average loss over 10922421 tokens: 2.036, valid loss/error: 2.068 28.84
Average loss over 10910660 tokens: 2.041, valid loss/error: 2.085 28.80
Average loss over 10925671 tokens: 2.042, valid loss/error: 2.069 28.86
Average loss over 10921050 tokens: 2.039, valid loss/error: 2.099 28.87
Average loss over 10926114 tokens: 2.040, valid loss/error: 2.062 28.88
Average loss over 10926967 tokens: 2.030, valid loss/error: 2.061 28.84
Average loss over 10913837 tokens: 2.035, valid loss/error: 2.063 28.86
Average loss over 10919057 tokens: 2.032, valid loss/error: 2.049 28.84
Average loss over 10918845 tokens: 2.032, valid loss/error: 2.069 28.80
Average loss over 10920536 tokens: 2.030, valid loss/error: 2.063 28.82
Average loss over 10899192 tokens: 2.038, valid loss/error: 2.066 28.82
Average loss over 10918725 tokens: 2.029, valid loss/error: 2.075 28.87
Average loss over 10906556 tokens: 2.044, valid loss/error: 2.089 28.88
Average loss over 10915656 tokens: 2.031, valid loss/error: 2.088 28.81
Average loss over 10938372 tokens: 2.034, valid loss/error: 2.054 28.86
Average loss over 10923740 tokens: 2.029, valid loss/error: 2.073 28.84
Average loss over 2698815 tokens: 2.031
Epoch: 15, train loss: 2.034, valid loss/error: 2.070 28.85
Average loss over 10941095 tokens: 2.029, valid loss/error: 2.077 28.82
Average loss over 10927834 tokens: 2.038, valid loss/error: 2.061 28.84
Average loss over 10917624 tokens: 2.037, valid loss/error: 2.050 28.80
New best model saved
Average loss over 10938898 tokens: 2.031, valid loss/error: 2.059 28.81
Average loss over 10933222 tokens: 2.036, valid loss/error: 2.070 28.81
Average loss over 10941574 tokens: 2.032, valid loss/error: 2.062 28.80
Average loss over 10920828 tokens: 2.033, valid loss/error: 2.083 28.82
Average loss over 10906089 tokens: 2.033, valid loss/error: 2.054 28.82
Average loss over 10919266 tokens: 2.034, valid loss/error: 2.036 28.83
Average loss over 10931238 tokens: 2.039, valid loss/error: 2.048 28.84
Average loss over 10941192 tokens: 2.040, valid loss/error: 2.054 28.81
Average loss over 10898511 tokens: 2.029, valid loss/error: 2.063 28.86
Average loss over 10896474 tokens: 2.031, valid loss/error: 2.085 28.83
Average loss over 10908088 tokens: 2.039, valid loss/error: 2.046 28.83
Average loss over 10910668 tokens: 2.023, valid loss/error: 2.102 28.78
New best model saved
Average loss over 10902557 tokens: 2.030, valid loss/error: 2.080 28.82
Average loss over 10921214 tokens: 2.027, valid loss/error: 2.053 28.82
Average loss over 10916889 tokens: 2.035, valid loss/error: 2.042 28.84
Average loss over 10909310 tokens: 2.029, valid loss/error: 2.082 28.83
Average loss over 10903735 tokens: 2.033, valid loss/error: 2.041 28.81
Average loss over 10907473 tokens: 2.024, valid loss/error: 2.062 28.84
Average loss over 10938210 tokens: 2.032, valid loss/error: 2.068 28.82
Average loss over 10893636 tokens: 2.030, valid loss/error: 2.054 28.81
Average loss over 10915386 tokens: 2.027, valid loss/error: 2.075 28.81
Average loss over 10921654 tokens: 2.032, valid loss/error: 2.042 28.80
Average loss over 10924856 tokens: 2.033, valid loss/error: 2.048 28.83
Average loss over 10899344 tokens: 2.021, valid loss/error: 2.053 28.82
Average loss over 10916984 tokens: 2.035, valid loss/error: 2.056 28.83
Average loss over 10927137 tokens: 2.040, valid loss/error: 2.061 28.80
Average loss over 10926099 tokens: 2.026, valid loss/error: 2.039 28.86
Average loss over 10921257 tokens: 2.031, valid loss/error: 2.041 28.82
Average loss over 10927633 tokens: 2.042, valid loss/error: 2.078 28.83
Average loss over 10914332 tokens: 2.025, valid loss/error: 2.056 28.84
Average loss over 10946072 tokens: 2.034, valid loss/error: 2.071 28.80
Average loss over 10906424 tokens: 2.037, valid loss/error: 2.049 28.79
Average loss over 10907008 tokens: 2.029, valid loss/error: 2.047 28.81
Average loss over 10927810 tokens: 2.036, valid loss/error: 2.062 28.81
Average loss over 10931676 tokens: 2.037, valid loss/error: 2.046 28.84
Average loss over 10927183 tokens: 2.031, valid loss/error: 2.068 28.82
Average loss over 10925506 tokens: 2.031, valid loss/error: 2.050 28.81
Average loss over 10919918 tokens: 2.031, valid loss/error: 2.065 28.81
Average loss over 10923866 tokens: 2.032, valid loss/error: 2.071 28.80
Average loss over 2702528 tokens: 2.052
Epoch: 16, train loss: 2.032, valid loss/error: 2.066 28.83
Average loss over 10935329 tokens: 2.036, valid loss/error: 2.088 28.84
Average loss over 10930995 tokens: 2.033, valid loss/error: 2.056 28.82
Average loss over 10925963 tokens: 2.030, valid loss/error: 2.051 28.82
Average loss over 10921250 tokens: 2.032, valid loss/error: 2.052 28.82
Average loss over 10905940 tokens: 2.033, valid loss/error: 2.071 28.81
Average loss over 10934412 tokens: 2.031, valid loss/error: 2.055 28.81
Average loss over 10905644 tokens: 2.034, valid loss/error: 2.084 28.81
Average loss over 10912803 tokens: 2.031, valid loss/error: 2.035 28.81
Average loss over 10937808 tokens: 2.039, valid loss/error: 2.051 28.83
Average loss over 10943303 tokens: 2.038, valid loss/error: 2.065 28.82
Average loss over 10942038 tokens: 2.038, valid loss/error: 2.054 28.87
Average loss over 10920474 tokens: 2.030, valid loss/error: 2.059 28.81
Average loss over 10910245 tokens: 2.037, valid loss/error: 2.055 28.83
Average loss over 10937423 tokens: 2.040, valid loss/error: 2.065 28.81
Average loss over 10936041 tokens: 2.036, valid loss/error: 2.052 28.79
Average loss over 10927180 tokens: 2.024, valid loss/error: 2.073 28.82
Average loss over 10905156 tokens: 2.028, valid loss/error: 2.049 28.78
Average loss over 10929778 tokens: 2.029, valid loss/error: 2.056 28.82
Average loss over 10915692 tokens: 2.026, valid loss/error: 2.066 28.82
Average loss over 10920280 tokens: 2.031, valid loss/error: 2.056 28.83
Average loss over 10899280 tokens: 2.031, valid loss/error: 2.039 28.83
Average loss over 10931900 tokens: 2.036, valid loss/error: 2.080 28.84
Average loss over 10901856 tokens: 2.027, valid loss/error: 2.073 28.81
Average loss over 10916648 tokens: 2.031, valid loss/error: 2.071 28.85
Average loss over 10913328 tokens: 2.026, valid loss/error: 2.055 28.80
Average loss over 10104683 tokens: 2.033
Epoch: 17, train loss: 2.032, valid loss/error: 2.044 28.78
New best model saved
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
Average loss over 21065369 tokens: 2.615, valid loss/error: 2.951 32.49
New best model saved
Average loss over 21122291 tokens: 2.587, valid loss/error: 2.432 32.46
New best model saved
Average loss over 6642418 tokens: 2.562
Epoch: 1, train loss: 2.596, valid loss/error: 2.339 32.45
New best model saved
Average loss over 21105951 tokens: 2.535, valid loss/error: 2.297 32.44
New best model saved
Average loss over 21130580 tokens: 2.539, valid loss/error: 2.289 32.41
New best model saved
Average loss over 6596749 tokens: 2.500
Epoch: 2, train loss: 2.532, valid loss/error: 2.298 32.38
New best model saved
Average loss over 21117195 tokens: 2.523, valid loss/error: 2.294 32.36
New best model saved
Average loss over 21113769 tokens: 2.528, valid loss/error: 2.281 32.37
New best model saved
Average loss over 6638223 tokens: 2.524
Epoch: 3, train loss: 2.525, valid loss/error: 2.286 32.35
New best model saved
Average loss over 21102686 tokens: 2.528, valid loss/error: 2.278 32.34
New best model saved
Average loss over 21129668 tokens: 2.523, valid loss/error: 2.276 32.29
New best model saved
Average loss over 6606206 tokens: 2.489
Epoch: 4, train loss: 2.521, valid loss/error: 2.271 32.28
New best model saved
Average loss over 21082403 tokens: 2.515, valid loss/error: 2.279 32.31
Average loss over 21117826 tokens: 2.515, valid loss/error: 2.283 32.27
New best model saved
Average loss over 6654463 tokens: 2.521
Epoch: 5, train loss: 2.516, valid loss/error: 2.265 32.25
New best model saved
Average loss over 21108260 tokens: 2.509, valid loss/error: 2.267 32.24
New best model saved
Average loss over 21113652 tokens: 2.520, valid loss/error: 2.279 32.30
Average loss over 6626239 tokens: 2.500
Epoch: 6, train loss: 2.512, valid loss/error: 2.261 32.25
New best model saved
Average loss over 21075449 tokens: 2.520, valid loss/error: 2.276 32.30
Average loss over 21105363 tokens: 2.503, valid loss/error: 2.270 32.25
Average loss over 6619154 tokens: 2.484
Epoch: 7, train loss: 2.508, valid loss/error: 2.261 32.26
Average loss over 21106652 tokens: 2.501, valid loss/error: 2.273 32.25
Average loss over 21085122 tokens: 2.503, valid loss/error: 2.271 32.26
Average loss over 6640454 tokens: 2.512
Epoch: 8, train loss: 2.503, valid loss/error: 2.261 32.25
Average loss over 21108494 tokens: 2.501, valid loss/error: 2.264 32.21
New best model saved
Average loss over 21092630 tokens: 2.505, valid loss/error: 2.269 32.26
Average loss over 6603856 tokens: 2.509
Epoch: 9, train loss: 2.504, valid loss/error: 2.271 32.20
New best model saved
Average loss over 21152455 tokens: 2.508, valid loss/error: 2.266 32.21
Average loss over 21106310 tokens: 2.498, valid loss/error: 2.266 32.23
Average loss over 6648430 tokens: 2.514
Epoch: 10, train loss: 2.504, valid loss/error: 2.262 32.22
Average loss over 21102088 tokens: 2.500, valid loss/error: 2.286 32.17
New best model saved
Average loss over 21097046 tokens: 2.507, valid loss/error: 2.262 32.23
Average loss over 6640844 tokens: 2.499
Epoch: 11, train loss: 2.503, valid loss/error: 2.258 32.18
New best model saved
Average loss over 21115078 tokens: 2.502, valid loss/error: 2.263 32.18
Average loss over 21119912 tokens: 2.502, valid loss/error: 2.254 32.18
New best model saved
Average loss over 6618877 tokens: 2.506
Epoch: 12, train loss: 2.502, valid loss/error: 2.258 32.21
Average loss over 21128482 tokens: 2.501, valid loss/error: 2.258 32.20
Average loss over 21101085 tokens: 2.507, valid loss/error: 2.259 32.19
Average loss over 6620943 tokens: 2.505
Epoch: 13, train loss: 2.504, valid loss/error: 2.260 32.24
Average loss over 21131936 tokens: 2.507, valid loss/error: 2.256 32.20
Average loss over 21127241 tokens: 2.501, valid loss/error: 2.251 32.21
New best model saved
Average loss over 6613200 tokens: 2.489
Epoch: 14, train loss: 2.502, valid loss/error: 2.255 32.22
Average loss over 21070336 tokens: 2.495, valid loss/error: 2.256 32.17
New best model saved
Average loss over 21108900 tokens: 2.499, valid loss/error: 2.259 32.19
Average loss over 6663578 tokens: 2.489
Epoch: 15, train loss: 2.496, valid loss/error: 2.259 32.13
New best model saved
Average loss over 21122279 tokens: 2.492, valid loss/error: 2.254 32.14
Average loss over 21120231 tokens: 2.494, valid loss/error: 2.254 32.14
Average loss over 6650469 tokens: 2.507
Epoch: 16, train loss: 2.495, valid loss/error: 2.243 32.13
New best model saved
Average loss over 21097826 tokens: 2.492, valid loss/error: 2.255 32.17
Average loss over 21104726 tokens: 2.490, valid loss/error: 2.250 32.15
Average loss over 6664788 tokens: 2.500
Epoch: 17, train loss: 2.492, valid loss/error: 2.254 32.12
New best model saved
Average loss over 21070741 tokens: 2.492, valid loss/error: 2.253 32.12
Average loss over 21085497 tokens: 2.495, valid loss/error: 2.256 32.16
Average loss over 6612410 tokens: 2.486
Epoch: 18, train loss: 2.492, valid loss/error: 2.258 32.12
Average loss over 21147418 tokens: 2.494, valid loss/error: 2.252 32.15
Average loss over 21093758 tokens: 2.502, valid loss/error: 2.259 32.12
Average loss over 6627936 tokens: 2.506
Epoch: 19, train loss: 2.499, valid loss/error: 2.243 32.12
New best model saved
Average loss over 21114681 tokens: 2.503, valid loss/error: 2.241 32.17
New best model saved
Average loss over 21094056 tokens: 2.494, valid loss/error: 2.244 32.13
Average loss over 6650375 tokens: 2.499
Epoch: 20, train loss: 2.499, valid loss/error: 2.250 32.11
New best model saved
Average loss over 21105429 tokens: 2.494, valid loss/error: 2.260 32.12
Average loss over 21038083 tokens: 2.491, valid loss/error: 2.243 32.13
Average loss over 6664605 tokens: 2.504
Epoch: 21, train loss: 2.494, valid loss/error: 2.245 32.14
Average loss over 21126141 tokens: 2.491, valid loss/error: 2.250 32.14
Average loss over 21116040 tokens: 2.489, valid loss/error: 2.246 32.12
Average loss over 6638125 tokens: 2.507
Epoch: 22, train loss: 2.492, valid loss/error: 2.250 32.16
Average loss over 21099084 tokens: 2.490, valid loss/error: 2.248 32.12
Average loss over 21101517 tokens: 2.499, valid loss/error: 2.239 32.11
New best model saved
Average loss over 6633409 tokens: 2.476
Epoch: 23, train loss: 2.492, valid loss/error: 2.249 32.12
Average loss over 21109925 tokens: 2.480, valid loss/error: 2.245 32.15
Average loss over 21123871 tokens: 2.492, valid loss/error: 2.249 32.11
Average loss over 6623957 tokens: 2.478
Epoch: 24, train loss: 2.485, valid loss/error: 2.245 32.16
Average loss over 21134343 tokens: 2.496, valid loss/error: 2.239 32.13
Average loss over 21102582 tokens: 2.483, valid loss/error: 2.237 32.12
New best model saved
Average loss over 6628800 tokens: 2.457
Epoch: 25, train loss: 2.485, valid loss/error: 2.231 32.12
New best model saved
Average loss over 21120533 tokens: 2.492, valid loss/error: 2.244 32.11
Average loss over 21092556 tokens: 2.501, valid loss/error: 2.246 32.11
New best model saved
Average loss over 6625734 tokens: 2.486
Epoch: 26, train loss: 2.495, valid loss/error: 2.247 32.06
New best model saved
Average loss over 21107174 tokens: 2.493, valid loss/error: 2.239 32.11
Average loss over 21097821 tokens: 2.492, valid loss/error: 2.250 32.07
Average loss over 6633270 tokens: 2.501
Epoch: 27, train loss: 2.494, valid loss/error: 2.242 32.10
Average loss over 21104542 tokens: 2.497, valid loss/error: 2.252 32.04
New best model saved
Average loss over 21110582 tokens: 2.497, valid loss/error: 2.229 32.05
New best model saved
Average loss over 6627826 tokens: 2.471
Epoch: 28, train loss: 2.494, valid loss/error: 2.228 32.07
New best model saved
Average loss over 21096540 tokens: 2.489, valid loss/error: 2.240 32.02
New best model saved
Average loss over 21177226 tokens: 2.490, valid loss/error: 2.243 32.08
Average loss over 6613956 tokens: 2.452
Epoch: 29, train loss: 2.484, valid loss/error: 2.238 32.06
Average loss over 21133344 tokens: 2.500, valid loss/error: 2.243 32.07
Average loss over 21096138 tokens: 2.491, valid loss/error: 2.233 32.07
Average loss over 6650780 tokens: 2.476
Epoch: 30, train loss: 2.493, valid loss/error: 2.251 32.07
Average loss over 21091601 tokens: 2.474, valid loss/error: 2.233 32.08
Average loss over 21115021 tokens: 2.487, valid loss/error: 2.244 32.09
Average loss over 6632911 tokens: 2.516
Epoch: 31, train loss: 2.485, valid loss/error: 2.239 32.12
Average loss over 21072876 tokens: 2.486, valid loss/error: 2.238 32.05
Average loss over 21109912 tokens: 2.483, valid loss/error: 2.235 32.08
Average loss over 6626514 tokens: 2.476
Epoch: 32, train loss: 2.483, valid loss/error: 2.239 32.10
Average loss over 21053321 tokens: 2.488, valid loss/error: 2.242 32.08
Average loss over 21167804 tokens: 2.489, valid loss/error: 2.249 32.04
Average loss over 6619779 tokens: 2.475
Epoch: 33, train loss: 2.487, valid loss/error: 2.242 32.08
Average loss over 21104250 tokens: 2.489, valid loss/error: 2.220 32.09
New best model saved
Average loss over 21170835 tokens: 2.486, valid loss/error: 2.245 32.05
Average loss over 6619325 tokens: 2.498
Epoch: 34, train loss: 2.489, valid loss/error: 2.236 32.07
Average loss over 21090633 tokens: 2.483, valid loss/error: 2.232 32.06
Average loss over 21051208 tokens: 2.473, valid loss/error: 2.232 32.11
Average loss over 6653307 tokens: 2.491
Epoch: 35, train loss: 2.480, valid loss/error: 2.246 32.06
Average loss over 21144951 tokens: 2.483, valid loss/error: 2.234 32.12
Average loss over 21015558 tokens: 2.486, valid loss/error: 2.233 32.11
Average loss over 6642272 tokens: 2.483
Epoch: 36, train loss: 2.484, valid loss/error: 2.231 32.07
Average loss over 21136267 tokens: 2.484, valid loss/error: 2.241 32.09
Average loss over 21101778 tokens: 2.491, valid loss/error: 2.246 32.10
Average loss over 6635422 tokens: 2.487
Epoch: 37, train loss: 2.487, valid loss/error: 2.231 32.07
Average loss over 21151822 tokens: 2.487, valid loss/error: 2.245 32.07
Average loss over 21071940 tokens: 2.482, valid loss/error: 2.231 32.03
Average loss over 6629951 tokens: 2.474
Epoch: 38, train loss: 2.483, valid loss/error: 2.230 32.05
Average loss over 21137902 tokens: 2.473, valid loss/error: 2.238 32.03
Average loss over 21121522 tokens: 2.484, valid loss/error: 2.227 32.05
Average loss over 6631213 tokens: 2.495
Epoch: 39, train loss: 2.481, valid loss/error: 2.234 32.03
Average loss over 21077973 tokens: 2.478, valid loss/error: 2.238 32.05
Average loss over 21140556 tokens: 2.500, valid loss/error: 2.226 32.05
Average loss over 6615786 tokens: 2.466
Epoch: 40, train loss: 2.486, valid loss/error: 2.235 32.06
Average loss over 21058944 tokens: 2.484, valid loss/error: 2.236 32.09
Average loss over 21114402 tokens: 2.476, valid loss/error: 2.225 32.04
Average loss over 6610262 tokens: 2.481
Epoch: 41, train loss: 2.480, valid loss/error: 2.225 31.99
New best model saved
Average loss over 21104784 tokens: 2.472, valid loss/error: 2.240 32.00
Average loss over 21089553 tokens: 2.489, valid loss/error: 2.256 31.98
New best model saved
Average loss over 6624320 tokens: 2.493
Epoch: 42, train loss: 2.482, valid loss/error: 2.232 32.02
Average loss over 21093117 tokens: 2.475, valid loss/error: 2.231 31.99
Average loss over 21063399 tokens: 2.474, valid loss/error: 2.228 32.00
Average loss over 6626436 tokens: 2.493
Epoch: 43, train loss: 2.477, valid loss/error: 2.242 32.02
Average loss over 21105032 tokens: 2.479, valid loss/error: 2.223 32.01
Average loss over 21151784 tokens: 2.488, valid loss/error: 2.235 32.03
Average loss over 6616495 tokens: 2.485
Epoch: 44, train loss: 2.484, valid loss/error: 2.240 32.02
Average loss over 21105428 tokens: 2.470, valid loss/error: 2.229 32.05
Average loss over 21149807 tokens: 2.489, valid loss/error: 2.232 32.05
Average loss over 6633419 tokens: 2.471
Epoch: 45, train loss: 2.478, valid loss/error: 2.228 32.01
Average loss over 21054409 tokens: 2.468, valid loss/error: 2.222 32.05
Average loss over 21128669 tokens: 2.466, valid loss/error: 2.234 32.03
Average loss over 6631392 tokens: 2.482
Epoch: 46, train loss: 2.469, valid loss/error: 2.252 32.05
Average loss over 21124399 tokens: 2.482, valid loss/error: 2.244 32.02
Average loss over 21052320 tokens: 2.467, valid loss/error: 2.234 31.98
New best model saved
Average loss over 6598780 tokens: 2.463
Epoch: 47, train loss: 2.473, valid loss/error: 2.228 32.00
Average loss over 21143350 tokens: 2.473, valid loss/error: 2.224 31.99
Average loss over 21136710 tokens: 2.476, valid loss/error: 2.234 32.03
Average loss over 6632677 tokens: 2.476
Epoch: 48, train loss: 2.475, valid loss/error: 2.228 32.04
Average loss over 21061700 tokens: 2.468, valid loss/error: 2.236 32.04
Average loss over 21071071 tokens: 2.482, valid loss/error: 2.237 32.02
Average loss over 6631354 tokens: 2.468
Epoch: 49, train loss: 2.474, valid loss/error: 2.239 32.01
Average loss over 21111706 tokens: 2.474, valid loss/error: 2.222 32.03
Average loss over 21108483 tokens: 2.488, valid loss/error: 2.229 32.05
Average loss over 6624849 tokens: 2.469
Epoch: 50, train loss: 2.479, valid loss/error: 2.226 32.02
Average loss over 21100385 tokens: 2.481, valid loss/error: 2.220 32.02
New best model saved
Average loss over 21141129 tokens: 2.473, valid loss/error: 2.243 31.98
Average loss over 6653962 tokens: 2.464
Epoch: 51, train loss: 2.475, valid loss/error: 2.226 31.98
New best model saved
Average loss over 21062991 tokens: 2.474, valid loss/error: 2.221 32.02
Average loss over 21156754 tokens: 2.480, valid loss/error: 2.230 31.97
New best model saved
Average loss over 6656321 tokens: 2.484
Epoch: 52, train loss: 2.478, valid loss/error: 2.232 32.00
Average loss over 21129726 tokens: 2.476, valid loss/error: 2.223 31.99
Average loss over 21077147 tokens: 2.479, valid loss/error: 2.228 31.99
Average loss over 6642879 tokens: 2.465
Epoch: 53, train loss: 2.476, valid loss/error: 2.222 31.98
Average loss over 21149092 tokens: 2.475, valid loss/error: 2.232 32.01
Average loss over 21027786 tokens: 2.472, valid loss/error: 2.240 31.99
Average loss over 6677344 tokens: 2.477
Epoch: 54, train loss: 2.474, valid loss/error: 2.234 31.98
Average loss over 21126125 tokens: 2.476, valid loss/error: 2.242 31.97
New best model saved
Average loss over 21131800 tokens: 2.473, valid loss/error: 2.230 32.00
Average loss over 6633767 tokens: 2.472
Epoch: 55, train loss: 2.474, valid loss/error: 2.228 31.97
Average loss over 21115901 tokens: 2.468, valid loss/error: 2.223 32.01
Average loss over 21091559 tokens: 2.480, valid loss/error: 2.218 32.01
New best model saved
Average loss over 6628692 tokens: 2.480
Epoch: 56, train loss: 2.475, valid loss/error: 2.236 31.99
Average loss over 21122838 tokens: 2.480, valid loss/error: 2.227 31.98
Average loss over 21126581 tokens: 2.466, valid loss/error: 2.225 32.00
Average loss over 6607463 tokens: 2.476
Epoch: 57, train loss: 2.473, valid loss/error: 2.223 32.02
Average loss over 21098439 tokens: 2.479, valid loss/error: 2.225 31.98
Average loss over 21048209 tokens: 2.470, valid loss/error: 2.229 31.97
Average loss over 6641743 tokens: 2.490
Epoch: 58, train loss: 2.477, valid loss/error: 2.226 32.02
Average loss over 21123477 tokens: 2.481, valid loss/error: 2.231 32.01
Average loss over 21105971 tokens: 2.469, valid loss/error: 2.210 31.97
New best model saved
Average loss over 6637596 tokens: 2.473
Epoch: 59, train loss: 2.475, valid loss/error: 2.229 31.98
Average loss over 21119224 tokens: 2.480, valid loss/error: 2.232 31.97
Average loss over 21106812 tokens: 2.488, valid loss/error: 2.230 32.01
Average loss over 6651105 tokens: 2.489
Epoch: 60, train loss: 2.485, valid loss/error: 2.228 32.02
Average loss over 21094117 tokens: 2.478, valid loss/error: 2.230 31.99
Average loss over 21040137 tokens: 2.475, valid loss/error: 2.239 32.04
Average loss over 6646483 tokens: 2.461
Epoch: 61, train loss: 2.474, valid loss/error: 2.219 32.01
Average loss over 21152624 tokens: 2.476, valid loss/error: 2.231 31.94
New best model saved
Average loss over 21069201 tokens: 2.474, valid loss/error: 2.227 32.00
Average loss over 6608444 tokens: 2.457
Epoch: 62, train loss: 2.472, valid loss/error: 2.220 32.02
Average loss over 21119788 tokens: 2.482, valid loss/error: 2.236 32.03
Average loss over 21066595 tokens: 2.475, valid loss/error: 2.225 32.04
Average loss over 6646384 tokens: 2.460
Epoch: 63, train loss: 2.476, valid loss/error: 2.218 32.01
Average loss over 21069506 tokens: 2.468, valid loss/error: 2.230 32.00
Average loss over 21111994 tokens: 2.475, valid loss/error: 2.234 31.97
Average loss over 6628548 tokens: 2.469
Epoch: 64, train loss: 2.471, valid loss/error: 2.229 31.95
Average loss over 21105691 tokens: 2.473, valid loss/error: 2.211 32.02
Average loss over 21064686 tokens: 2.472, valid loss/error: 2.227 32.01
Average loss over 6631637 tokens: 2.457
Epoch: 65, train loss: 2.471, valid loss/error: 2.226 32.00
Average loss over 21169869 tokens: 2.469, valid loss/error: 2.227 32.01
Average loss over 21050317 tokens: 2.479, valid loss/error: 2.229 32.02
Average loss over 6621932 tokens: 2.490
Epoch: 66, train loss: 2.476, valid loss/error: 2.234 32.01
Average loss over 21153894 tokens: 2.482, valid loss/error: 2.216 31.95
Average loss over 21099784 tokens: 2.475, valid loss/error: 2.218 31.99
Average loss over 6647230 tokens: 2.468
Epoch: 67, train loss: 2.477, valid loss/error: 2.239 31.96
Average loss over 21090271 tokens: 2.474, valid loss/error: 2.223 31.97
Average loss over 21078529 tokens: 2.477, valid loss/error: 2.225 32.01
Average loss over 6628503 tokens: 2.466
Epoch: 68, train loss: 2.474, valid loss/error: 2.208 32.02
New best model saved
Average loss over 21087057 tokens: 2.467, valid loss/error: 2.228 32.00
Average loss over 21140439 tokens: 2.477, valid loss/error: 2.217 32.02
Average loss over 6608441 tokens: 2.454
Epoch: 69, train loss: 2.469, valid loss/error: 2.218 31.99
Average loss over 21097450 tokens: 2.462, valid loss/error: 2.202 31.98
New best model saved
Average loss over 21110149 tokens: 2.472, valid loss/error: 2.212 31.99
Average loss over 6658646 tokens: 2.483
Epoch: 70, train loss: 2.469, valid loss/error: 2.236 31.92
New best model saved
Average loss over 21073682 tokens: 2.473, valid loss/error: 2.227 31.96
Average loss over 21047785 tokens: 2.462, valid loss/error: 2.215 32.00
Average loss over 6672755 tokens: 2.473
Epoch: 71, train loss: 2.468, valid loss/error: 2.225 32.00
Average loss over 21126429 tokens: 2.472, valid loss/error: 2.235 31.96
Average loss over 21064647 tokens: 2.458, valid loss/error: 2.209 31.97
Average loss over 6599327 tokens: 2.463
Epoch: 72, train loss: 2.465, valid loss/error: 2.218 31.94
Average loss over 21065760 tokens: 2.461, valid loss/error: 2.224 31.96
Average loss over 21139645 tokens: 2.469, valid loss/error: 2.210 32.00
Average loss over 6650338 tokens: 2.486
Epoch: 73, train loss: 2.468, valid loss/error: 2.218 32.02
Average loss over 21115227 tokens: 2.472, valid loss/error: 2.215 32.01
Average loss over 21132593 tokens: 2.474, valid loss/error: 2.223 31.95
Average loss over 6648554 tokens: 2.468
Epoch: 74, train loss: 2.472, valid loss/error: 2.226 31.94
Average loss over 21097313 tokens: 2.474, valid loss/error: 2.229 31.92
New best model saved
Average loss over 21107106 tokens: 2.473, valid loss/error: 2.221 31.99
Average loss over 6611994 tokens: 2.480
Epoch: 75, train loss: 2.474, valid loss/error: 2.227 31.97
Average loss over 21077193 tokens: 2.474, valid loss/error: 2.215 31.99
Average loss over 21115525 tokens: 2.467, valid loss/error: 2.220 31.97
Average loss over 6619855 tokens: 2.459
Epoch: 76, train loss: 2.469, valid loss/error: 2.227 31.94
Average loss over 21114203 tokens: 2.463, valid loss/error: 2.222 31.94
Average loss over 21055475 tokens: 2.463, valid loss/error: 2.203 31.91
New best model saved
Average loss over 6611637 tokens: 2.452
Epoch: 77, train loss: 2.462, valid loss/error: 2.215 31.94
Average loss over 21083714 tokens: 2.470, valid loss/error: 2.227 31.95
Average loss over 21072136 tokens: 2.460, valid loss/error: 2.219 31.95
Average loss over 6642574 tokens: 2.480
Epoch: 78, train loss: 2.467, valid loss/error: 2.223 31.95
Average loss over 21109874 tokens: 2.466, valid loss/error: 2.222 31.95
Average loss over 21113371 tokens: 2.469, valid loss/error: 2.216 31.98
Average loss over 6610634 tokens: 2.481
Epoch: 79, train loss: 2.470, valid loss/error: 2.222 31.97
Average loss over 21131803 tokens: 2.470, valid loss/error: 2.206 31.94
Average loss over 21065398 tokens: 2.470, valid loss/error: 2.210 31.98
Average loss over 6607625 tokens: 2.479
Epoch: 80, train loss: 2.471, valid loss/error: 2.210 31.98
Average loss over 21102394 tokens: 2.483, valid loss/error: 2.218 31.98
Average loss over 21091856 tokens: 2.467, valid loss/error: 2.202 31.96
New best model saved
Average loss over 6646296 tokens: 2.474
Epoch: 81, train loss: 2.475, valid loss/error: 2.222 31.96
Average loss over 21049682 tokens: 2.461, valid loss/error: 2.223 31.94
Average loss over 21077512 tokens: 2.467, valid loss/error: 2.216 31.94
Average loss over 6640885 tokens: 2.457
Epoch: 82, train loss: 2.463, valid loss/error: 2.221 31.93
Average loss over 21078182 tokens: 2.465, valid loss/error: 2.205 31.95
Average loss over 21082473 tokens: 2.456, valid loss/error: 2.216 31.94
Average loss over 6655395 tokens: 2.455
Epoch: 83, train loss: 2.460, valid loss/error: 2.212 31.89
New best model saved
Average loss over 21127337 tokens: 2.470, valid loss/error: 2.215 31.91
Average loss over 21077453 tokens: 2.470, valid loss/error: 2.214 31.97
Average loss over 6632424 tokens: 2.473
Epoch: 84, train loss: 2.470, valid loss/error: 2.212 31.93
Average loss over 21116933 tokens: 2.473, valid loss/error: 2.218 31.93
Average loss over 21084136 tokens: 2.460, valid loss/error: 2.212 31.91
Average loss over 6623854 tokens: 2.466
Epoch: 85, train loss: 2.467, valid loss/error: 2.215 31.92
Average loss over 21074588 tokens: 2.464, valid loss/error: 2.238 31.93
Average loss over 21081486 tokens: 2.467, valid loss/error: 2.216 31.89
New best model saved
Average loss over 6625989 tokens: 2.472
Epoch: 86, train loss: 2.467, valid loss/error: 2.213 31.91
Average loss over 21114128 tokens: 2.468, valid loss/error: 2.203 31.92
Average loss over 21144431 tokens: 2.466, valid loss/error: 2.199 31.95
New best model saved
Average loss over 6622569 tokens: 2.474
Epoch: 87, train loss: 2.468, valid loss/error: 2.216 31.95
Average loss over 21052255 tokens: 2.462, valid loss/error: 2.212 31.90
Average loss over 21121687 tokens: 2.464, valid loss/error: 2.220 31.96
Average loss over 6625079 tokens: 2.473
Epoch: 88, train loss: 2.465, valid loss/error: 2.218 31.92
Average loss over 21137531 tokens: 2.454, valid loss/error: 2.226 31.90
Average loss over 21118085 tokens: 2.469, valid loss/error: 2.207 31.91
Average loss over 6623572 tokens: 2.482
Epoch: 89, train loss: 2.464, valid loss/error: 2.211 31.92
Average loss over 21074475 tokens: 2.464, valid loss/error: 2.220 31.93
Average loss over 21075452 tokens: 2.461, valid loss/error: 2.202 31.90
Average loss over 6632032 tokens: 2.478
Epoch: 90, train loss: 2.465, valid loss/error: 2.212 31.90
Average loss over 21113155 tokens: 2.464, valid loss/error: 2.228 31.93
Average loss over 21134020 tokens: 2.469, valid loss/error: 2.201 31.93
Average loss over 6624431 tokens: 2.475
Epoch: 91, train loss: 2.468, valid loss/error: 2.212 31.98
Average loss over 21150720 tokens: 2.460, valid loss/error: 2.218 31.92
Average loss over 21100724 tokens: 2.461, valid loss/error: 2.218 31.90
Average loss over 6629034 tokens: 2.456
Epoch: 92, train loss: 2.460, valid loss/error: 2.209 31.91
Average loss over 21114249 tokens: 2.464, valid loss/error: 2.202 31.91
Average loss over 21055456 tokens: 2.457, valid loss/error: 2.207 31.97
Average loss over 6616112 tokens: 2.461
Epoch: 93, train loss: 2.460, valid loss/error: 2.225 31.94
Average loss over 21038772 tokens: 2.466, valid loss/error: 2.213 31.92
Average loss over 21072692 tokens: 2.456, valid loss/error: 2.215 31.91
Average loss over 6645554 tokens: 2.469
Epoch: 94, train loss: 2.462, valid loss/error: 2.222 31.95
early stop
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python encs_train_finetune_sample.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/encs_temp/rs/base/std/checkpoint_0.h5
Init lr: 1e-05, Dev Loss/Error: 2.533 28.93
Average loss over 5255596 tokens: 2.493, valid loss/error: 2.532 28.90
New best model saved
Average loss over 5282560 tokens: 2.492, valid loss/error: 2.530 28.81
New best model saved
Average loss over 5260081 tokens: 2.491, valid loss/error: 2.530 28.87
New best model saved
Average loss over 5263920 tokens: 2.482, valid loss/error: 2.529 28.86
New best model saved
Average loss over 5237419 tokens: 2.486, valid loss/error: 2.529 28.86
New best model saved
Average loss over 5268151 tokens: 2.491, valid loss/error: 2.528 28.84
New best model saved
Average loss over 5275986 tokens: 2.478, valid loss/error: 2.527 28.81
New best model saved
Average loss over 5254973 tokens: 2.478, valid loss/error: 2.526 28.79
New best model saved
Average loss over 5237581 tokens: 2.480, valid loss/error: 2.526 28.81
New best model saved
Average loss over 5265390 tokens: 2.483, valid loss/error: 2.526 28.83
Average loss over 5257401 tokens: 2.474, valid loss/error: 2.525 28.83
New best model saved
Average loss over 5252984 tokens: 2.481, valid loss/error: 2.524 28.75
New best model saved
Average loss over 5257832 tokens: 2.491, valid loss/error: 2.524 28.80
Average loss over 5275658 tokens: 2.483, valid loss/error: 2.525 28.79
Average loss over 5265903 tokens: 2.479, valid loss/error: 2.524 28.75
New best model saved
Average loss over 5268033 tokens: 2.479, valid loss/error: 2.524 28.79
New best model saved
Average loss over 1064454 tokens: 2.473
Epoch: 1, train loss: 2.484, valid loss/error: 2.524 28.80
New best model saved
Average loss over 5264920 tokens: 2.475, valid loss/error: 2.523 28.75
New best model saved
Average loss over 5275640 tokens: 2.478, valid loss/error: 2.524 28.79
Average loss over 5259711 tokens: 2.474, valid loss/error: 2.523 28.80
New best model saved
Average loss over 5252430 tokens: 2.481, valid loss/error: 2.523 28.80
Average loss over 5259700 tokens: 2.481, valid loss/error: 2.522 28.76
New best model saved
Average loss over 5263663 tokens: 2.474, valid loss/error: 2.522 28.77
New best model saved
Average loss over 5264770 tokens: 2.481, valid loss/error: 2.523 28.79
Average loss over 5253638 tokens: 2.472, valid loss/error: 2.522 28.77
New best model saved
Average loss over 5264253 tokens: 2.476, valid loss/error: 2.522 28.78
New best model saved
Average loss over 5258514 tokens: 2.469, valid loss/error: 2.522 28.74
New best model saved
Average loss over 5267196 tokens: 2.474, valid loss/error: 2.521 28.73
New best model saved
Average loss over 5256421 tokens: 2.476, valid loss/error: 2.521 28.75
New best model saved
Average loss over 5253136 tokens: 2.473, valid loss/error: 2.521 28.70
New best model saved
Average loss over 5251901 tokens: 2.477, valid loss/error: 2.521 28.68
New best model saved
Average loss over 5255881 tokens: 2.469, valid loss/error: 2.521 28.69
Average loss over 5269561 tokens: 2.473, valid loss/error: 2.521 28.70
Average loss over 1063829 tokens: 2.479
Epoch: 2, train loss: 2.475, valid loss/error: 2.521 28.73
Average loss over 5262744 tokens: 2.474, valid loss/error: 2.521 28.71
Average loss over 5249545 tokens: 2.465, valid loss/error: 2.521 28.69
Average loss over 5262792 tokens: 2.462, valid loss/error: 2.520 28.72
New best model saved
Average loss over 5261163 tokens: 2.477, valid loss/error: 2.521 28.75
Average loss over 5260631 tokens: 2.473, valid loss/error: 2.520 28.75
New best model saved
Average loss over 5247795 tokens: 2.468, valid loss/error: 2.519 28.67
New best model saved
Average loss over 5273190 tokens: 2.468, valid loss/error: 2.520 28.65
New best model saved
Average loss over 5258213 tokens: 2.473, valid loss/error: 2.520 28.67
Average loss over 5252138 tokens: 2.476, valid loss/error: 2.520 28.73
Average loss over 5260838 tokens: 2.471, valid loss/error: 2.520 28.68
Average loss over 5276248 tokens: 2.468, valid loss/error: 2.519 28.66
New best model saved
Average loss over 5261505 tokens: 2.477, valid loss/error: 2.519 28.67
New best model saved
Average loss over 5262814 tokens: 2.481, valid loss/error: 2.518 28.70
New best model saved
Average loss over 5256669 tokens: 2.481, valid loss/error: 2.519 28.69
Average loss over 5258095 tokens: 2.481, valid loss/error: 2.519 28.67
Average loss over 5258601 tokens: 2.477, valid loss/error: 2.518 28.65
New best model saved
Average loss over 1066241 tokens: 2.474
Epoch: 3, train loss: 2.473, valid loss/error: 2.518 28.65
New best model saved
Average loss over 5259026 tokens: 2.468, valid loss/error: 2.518 28.67
Average loss over 5268353 tokens: 2.476, valid loss/error: 2.518 28.65
New best model saved
Average loss over 5249405 tokens: 2.469, valid loss/error: 2.518 28.69
Average loss over 5265150 tokens: 2.467, valid loss/error: 2.518 28.62
New best model saved
Average loss over 5269135 tokens: 2.481, valid loss/error: 2.518 28.60
New best model saved
Average loss over 5260212 tokens: 2.472, valid loss/error: 2.518 28.65
Average loss over 5272133 tokens: 2.472, valid loss/error: 2.518 28.62
Average loss over 5258553 tokens: 2.470, valid loss/error: 2.518 28.63
Average loss over 5243865 tokens: 2.469, valid loss/error: 2.518 28.66
Average loss over 5263690 tokens: 2.470, valid loss/error: 2.517 28.62
New best model saved
Average loss over 5250207 tokens: 2.475, valid loss/error: 2.517 28.60
New best model saved
Average loss over 5271257 tokens: 2.469, valid loss/error: 2.516 28.59
New best model saved
Average loss over 5267676 tokens: 2.474, valid loss/error: 2.517 28.58
New best model saved
Average loss over 5265905 tokens: 2.481, valid loss/error: 2.518 28.59
Average loss over 5259006 tokens: 2.476, valid loss/error: 2.517 28.60
Average loss over 5253169 tokens: 2.476, valid loss/error: 2.517 28.64
Average loss over 1063861 tokens: 2.467
Epoch: 4, train loss: 2.473, valid loss/error: 2.517 28.63
Average loss over 5260316 tokens: 2.469, valid loss/error: 2.517 28.64
Average loss over 5243424 tokens: 2.466, valid loss/error: 2.517 28.61
Average loss over 5258477 tokens: 2.471, valid loss/error: 2.517 28.63
Average loss over 5278528 tokens: 2.472, valid loss/error: 2.517 28.62
Average loss over 5250965 tokens: 2.467, valid loss/error: 2.518 28.61
Average loss over 5261839 tokens: 2.468, valid loss/error: 2.518 28.63
Average loss over 5273923 tokens: 2.465, valid loss/error: 2.517 28.62
Average loss over 5269463 tokens: 2.470, valid loss/error: 2.518 28.58
Average loss over 5262970 tokens: 2.467, valid loss/error: 2.516 28.59
New best model saved
Average loss over 5260202 tokens: 2.475, valid loss/error: 2.516 28.60
New best model saved
Average loss over 5271765 tokens: 2.463, valid loss/error: 2.517 28.60
Average loss over 5258547 tokens: 2.466, valid loss/error: 2.516 28.60
Average loss over 5259827 tokens: 2.464, valid loss/error: 2.516 28.57
New best model saved
Average loss over 5256245 tokens: 2.462, valid loss/error: 2.517 28.58
Average loss over 5245935 tokens: 2.466, valid loss/error: 2.516 28.59
Average loss over 5255742 tokens: 2.466, valid loss/error: 2.517 28.62
Average loss over 1065784 tokens: 2.453
Epoch: 5, train loss: 2.467, valid loss/error: 2.516 28.60
Average loss over 5237058 tokens: 2.466, valid loss/error: 2.516 28.59
Average loss over 5264448 tokens: 2.469, valid loss/error: 2.516 28.59
New best model saved
Average loss over 5244692 tokens: 2.459, valid loss/error: 2.516 28.59
Average loss over 5263232 tokens: 2.465, valid loss/error: 2.516 28.58
New best model saved
Average loss over 5252941 tokens: 2.471, valid loss/error: 2.516 28.59
Average loss over 5252831 tokens: 2.472, valid loss/error: 2.516 28.61
Average loss over 5266636 tokens: 2.470, valid loss/error: 2.516 28.63
Average loss over 5269665 tokens: 2.467, valid loss/error: 2.516 28.59
Average loss over 5268265 tokens: 2.463, valid loss/error: 2.515 28.58
New best model saved
Average loss over 5258025 tokens: 2.467, valid loss/error: 2.515 28.61
Average loss over 5277732 tokens: 2.464, valid loss/error: 2.516 28.57
New best model saved
Average loss over 5245378 tokens: 2.471, valid loss/error: 2.515 28.55
New best model saved
Average loss over 5255175 tokens: 2.463, valid loss/error: 2.516 28.56
Average loss over 5269615 tokens: 2.467, valid loss/error: 2.515 28.62
Average loss over 5253721 tokens: 2.471, valid loss/error: 2.515 28.60
Average loss over 5275422 tokens: 2.465, valid loss/error: 2.515 28.60
Average loss over 1073510 tokens: 2.474
Epoch: 6, train loss: 2.467, valid loss/error: 2.514 28.61
New best model saved
Average loss over 5279786 tokens: 2.466, valid loss/error: 2.515 28.59
Average loss over 5255447 tokens: 2.467, valid loss/error: 2.515 28.58
Average loss over 5270055 tokens: 2.469, valid loss/error: 2.515 28.60
Average loss over 5263465 tokens: 2.465, valid loss/error: 2.515 28.58
Average loss over 5265974 tokens: 2.461, valid loss/error: 2.515 28.57
Average loss over 5288870 tokens: 2.463, valid loss/error: 2.515 28.58
Average loss over 5256613 tokens: 2.469, valid loss/error: 2.514 28.58
Average loss over 5252219 tokens: 2.478, valid loss/error: 2.515 28.65
Average loss over 5249036 tokens: 2.467, valid loss/error: 2.515 28.59
Average loss over 5257271 tokens: 2.460, valid loss/error: 2.514 28.60
Average loss over 5267982 tokens: 2.461, valid loss/error: 2.515 28.63
Average loss over 5254460 tokens: 2.464, valid loss/error: 2.515 28.59
Average loss over 5269367 tokens: 2.462, valid loss/error: 2.515 28.61
Average loss over 5251289 tokens: 2.465, valid loss/error: 2.514 28.56
New best model saved
Average loss over 5275211 tokens: 2.470, valid loss/error: 2.514 28.59
Average loss over 5270971 tokens: 2.466, valid loss/error: 2.513 28.53
New best model saved
Average loss over 1069968 tokens: 2.465
Epoch: 7, train loss: 2.466, valid loss/error: 2.514 28.54
Average loss over 5270875 tokens: 2.479, valid loss/error: 2.513 28.59
Average loss over 5257206 tokens: 2.468, valid loss/error: 2.513 28.48
New best model saved
Average loss over 5264700 tokens: 2.473, valid loss/error: 2.513 28.57
Average loss over 5251844 tokens: 2.461, valid loss/error: 2.514 28.57
Average loss over 5264440 tokens: 2.463, valid loss/error: 2.515 28.61
Average loss over 5252208 tokens: 2.466, valid loss/error: 2.515 28.57
Average loss over 5261885 tokens: 2.470, valid loss/error: 2.514 28.56
Average loss over 5268865 tokens: 2.459, valid loss/error: 2.513 28.54
Average loss over 5278665 tokens: 2.469, valid loss/error: 2.513 28.57
Average loss over 5270611 tokens: 2.473, valid loss/error: 2.514 28.60
Average loss over 5262921 tokens: 2.460, valid loss/error: 2.513 28.59
Average loss over 5272977 tokens: 2.461, valid loss/error: 2.513 28.57
Average loss over 5268105 tokens: 2.468, valid loss/error: 2.514 28.55
Average loss over 5262194 tokens: 2.461, valid loss/error: 2.513 28.56
New best model saved
Average loss over 5259496 tokens: 2.464, valid loss/error: 2.513 28.56
Average loss over 5236291 tokens: 2.454, valid loss/error: 2.514 28.56
Average loss over 1067402 tokens: 2.475
Epoch: 8, train loss: 2.466, valid loss/error: 2.514 28.58
Average loss over 5263878 tokens: 2.466, valid loss/error: 2.513 28.62
New best model saved
Average loss over 5261640 tokens: 2.466, valid loss/error: 2.513 28.60
Average loss over 5271207 tokens: 2.467, valid loss/error: 2.513 28.56
New best model saved
Average loss over 5266838 tokens: 2.463, valid loss/error: 2.514 28.66
Average loss over 5264352 tokens: 2.466, valid loss/error: 2.512 28.59
New best model saved
Average loss over 5259346 tokens: 2.455, valid loss/error: 2.514 28.61
Average loss over 5271986 tokens: 2.469, valid loss/error: 2.513 28.61
Average loss over 5267970 tokens: 2.471, valid loss/error: 2.513 28.58
Average loss over 5260647 tokens: 2.471, valid loss/error: 2.513 28.57
Average loss over 5266063 tokens: 2.464, valid loss/error: 2.512 28.59
New best model saved
Average loss over 5252298 tokens: 2.469, valid loss/error: 2.513 28.58
Average loss over 5257927 tokens: 2.461, valid loss/error: 2.512 28.59
Average loss over 5276564 tokens: 2.461, valid loss/error: 2.512 28.56
Average loss over 5263758 tokens: 2.473, valid loss/error: 2.512 28.58
New best model saved
Average loss over 5262558 tokens: 2.465, valid loss/error: 2.512 28.52
Average loss over 5260425 tokens: 2.469, valid loss/error: 2.513 28.60
Average loss over 1065573 tokens: 2.466
Epoch: 9, train loss: 2.466, valid loss/error: 2.513 28.58
Average loss over 5256724 tokens: 2.459, valid loss/error: 2.513 28.57
Average loss over 5283151 tokens: 2.464, valid loss/error: 2.512 28.58
New best model saved
Average loss over 5256826 tokens: 2.463, valid loss/error: 2.513 28.58
Average loss over 5264182 tokens: 2.461, valid loss/error: 2.513 28.60
Average loss over 5263469 tokens: 2.465, valid loss/error: 2.513 28.59
Average loss over 5273860 tokens: 2.462, valid loss/error: 2.512 28.55
Average loss over 5281275 tokens: 2.468, valid loss/error: 2.513 28.57
Average loss over 5263586 tokens: 2.466, valid loss/error: 2.512 28.56
New best model saved
Average loss over 5267502 tokens: 2.467, valid loss/error: 2.512 28.54
Average loss over 5273705 tokens: 2.460, valid loss/error: 2.512 28.57
Average loss over 5262762 tokens: 2.466, valid loss/error: 2.512 28.53
Average loss over 5260797 tokens: 2.465, valid loss/error: 2.512 28.53
New best model saved
Average loss over 5267155 tokens: 2.463, valid loss/error: 2.512 28.52
Average loss over 5260716 tokens: 2.467, valid loss/error: 2.512 28.50
New best model saved
Average loss over 5247744 tokens: 2.472, valid loss/error: 2.513 28.52
Average loss over 5262517 tokens: 2.455, valid loss/error: 2.512 28.50
Average loss over 1060393 tokens: 2.481
Epoch: 10, train loss: 2.464, valid loss/error: 2.513 28.57
Average loss over 5257584 tokens: 2.459, valid loss/error: 2.512 28.53
Average loss over 5270942 tokens: 2.468, valid loss/error: 2.512 28.58
Average loss over 5259793 tokens: 2.462, valid loss/error: 2.512 28.55
Average loss over 5259499 tokens: 2.466, valid loss/error: 2.512 28.56
Average loss over 5247519 tokens: 2.472, valid loss/error: 2.512 28.53
Average loss over 5260807 tokens: 2.462, valid loss/error: 2.513 28.52
Average loss over 5272058 tokens: 2.462, valid loss/error: 2.512 28.55
Average loss over 5272248 tokens: 2.467, valid loss/error: 2.511 28.51
New best model saved
Average loss over 5249747 tokens: 2.465, valid loss/error: 2.512 28.56
Average loss over 5265744 tokens: 2.464, valid loss/error: 2.512 28.53
Average loss over 5251534 tokens: 2.462, valid loss/error: 2.512 28.53
Average loss over 5250467 tokens: 2.461, valid loss/error: 2.511 28.54
Average loss over 5259505 tokens: 2.462, valid loss/error: 2.511 28.59
Average loss over 5259877 tokens: 2.461, valid loss/error: 2.511 28.55
Average loss over 5261295 tokens: 2.461, valid loss/error: 2.512 28.52
Average loss over 5247466 tokens: 2.460, valid loss/error: 2.512 28.55
Average loss over 1064944 tokens: 2.462
Epoch: 11, train loss: 2.463, valid loss/error: 2.512 28.59
Average loss over 5264109 tokens: 2.467, valid loss/error: 2.512 28.55
Average loss over 5256096 tokens: 2.463, valid loss/error: 2.512 28.54
Average loss over 5259183 tokens: 2.458, valid loss/error: 2.512 28.57
Average loss over 5275345 tokens: 2.468, valid loss/error: 2.511 28.56
New best model saved
Average loss over 5250130 tokens: 2.456, valid loss/error: 2.512 28.60
Average loss over 5263369 tokens: 2.466, valid loss/error: 2.511 28.56
Average loss over 5265555 tokens: 2.461, valid loss/error: 2.512 28.54
Average loss over 5265637 tokens: 2.468, valid loss/error: 2.511 28.56
Average loss over 5257502 tokens: 2.461, valid loss/error: 2.512 28.52
Average loss over 5257320 tokens: 2.455, valid loss/error: 2.512 28.58
Average loss over 5269023 tokens: 2.464, valid loss/error: 2.512 28.55
Average loss over 5265345 tokens: 2.460, valid loss/error: 2.512 28.55
Average loss over 5259215 tokens: 2.465, valid loss/error: 2.511 28.54
Average loss over 5271052 tokens: 2.462, valid loss/error: 2.511 28.52
New best model saved
Average loss over 5253242 tokens: 2.461, valid loss/error: 2.512 28.52
Average loss over 5276404 tokens: 2.459, valid loss/error: 2.511 28.54
Average loss over 1059057 tokens: 2.459
Epoch: 12, train loss: 2.462, valid loss/error: 2.512 28.56
Average loss over 5263156 tokens: 2.462, valid loss/error: 2.512 28.54
Average loss over 5268149 tokens: 2.462, valid loss/error: 2.511 28.51
Average loss over 5264446 tokens: 2.465, valid loss/error: 2.512 28.56
Average loss over 5263504 tokens: 2.463, valid loss/error: 2.511 28.57
Average loss over 5261416 tokens: 2.461, valid loss/error: 2.511 28.56
Average loss over 5252173 tokens: 2.460, valid loss/error: 2.511 28.51
Average loss over 5253201 tokens: 2.468, valid loss/error: 2.511 28.54
Average loss over 5273988 tokens: 2.459, valid loss/error: 2.510 28.52
New best model saved
Average loss over 5289371 tokens: 2.453, valid loss/error: 2.511 28.53
Average loss over 5251539 tokens: 2.460, valid loss/error: 2.511 28.55
Average loss over 5259471 tokens: 2.460, valid loss/error: 2.511 28.57
Average loss over 5259627 tokens: 2.464, valid loss/error: 2.511 28.54
Average loss over 5241175 tokens: 2.453, valid loss/error: 2.510 28.52
New best model saved
Average loss over 5254092 tokens: 2.460, valid loss/error: 2.511 28.53
Average loss over 5265067 tokens: 2.462, valid loss/error: 2.512 28.51
Average loss over 5245921 tokens: 2.458, valid loss/error: 2.511 28.56
Average loss over 1077946 tokens: 2.468
Epoch: 13, train loss: 2.461, valid loss/error: 2.510 28.53
New best model saved
Average loss over 5269610 tokens: 2.463, valid loss/error: 2.510 28.56
Average loss over 5266639 tokens: 2.455, valid loss/error: 2.510 28.52
Average loss over 5256113 tokens: 2.456, valid loss/error: 2.511 28.53
Average loss over 5256760 tokens: 2.462, valid loss/error: 2.512 28.54
Average loss over 5260151 tokens: 2.463, valid loss/error: 2.510 28.54
Average loss over 5259800 tokens: 2.465, valid loss/error: 2.511 28.53
Average loss over 5280490 tokens: 2.460, valid loss/error: 2.511 28.55
Average loss over 5247417 tokens: 2.465, valid loss/error: 2.511 28.51
Average loss over 5277392 tokens: 2.465, valid loss/error: 2.511 28.55
Average loss over 5267228 tokens: 2.462, valid loss/error: 2.511 28.56
Average loss over 5268424 tokens: 2.455, valid loss/error: 2.511 28.56
Average loss over 5258401 tokens: 2.459, valid loss/error: 2.511 28.56
Average loss over 5258187 tokens: 2.471, valid loss/error: 2.510 28.52
New best model saved
Average loss over 5265698 tokens: 2.466, valid loss/error: 2.510 28.53
Average loss over 5250911 tokens: 2.453, valid loss/error: 2.510 28.56
Average loss over 5267684 tokens: 2.460, valid loss/error: 2.510 28.54
Average loss over 1068041 tokens: 2.466
Epoch: 14, train loss: 2.461, valid loss/error: 2.511 28.54
Average loss over 5266061 tokens: 2.465, valid loss/error: 2.511 28.54
Average loss over 5257948 tokens: 2.463, valid loss/error: 2.511 28.52
Average loss over 5255165 tokens: 2.461, valid loss/error: 2.511 28.53
Average loss over 5272505 tokens: 2.458, valid loss/error: 2.510 28.54
Average loss over 5252154 tokens: 2.459, valid loss/error: 2.511 28.55
Average loss over 5258657 tokens: 2.461, valid loss/error: 2.510 28.51
Average loss over 5271649 tokens: 2.467, valid loss/error: 2.510 28.54
Average loss over 5247378 tokens: 2.457, valid loss/error: 2.511 28.55
Average loss over 5270782 tokens: 2.462, valid loss/error: 2.510 28.55
Average loss over 5270105 tokens: 2.464, valid loss/error: 2.511 28.54
Average loss over 5277784 tokens: 2.457, valid loss/error: 2.510 28.57
Average loss over 5255041 tokens: 2.461, valid loss/error: 2.510 28.53
Average loss over 5272350 tokens: 2.460, valid loss/error: 2.510 28.58
Average loss over 5268138 tokens: 2.458, valid loss/error: 2.511 28.59
Average loss over 5255726 tokens: 2.459, valid loss/error: 2.510 28.53
Average loss over 5280549 tokens: 2.462, valid loss/error: 2.510 28.52
Average loss over 1068372 tokens: 2.448
Epoch: 15, train loss: 2.461, valid loss/error: 2.510 28.51
Average loss over 5262528 tokens: 2.454, valid loss/error: 2.511 28.52
Average loss over 5266687 tokens: 2.463, valid loss/error: 2.511 28.55
Average loss over 5264490 tokens: 2.457, valid loss/error: 2.510 28.50
Average loss over 5259341 tokens: 2.460, valid loss/error: 2.511 28.52
Average loss over 5266426 tokens: 2.464, valid loss/error: 2.510 28.54
Average loss over 5257705 tokens: 2.461, valid loss/error: 2.510 28.52
Average loss over 5249102 tokens: 2.466, valid loss/error: 2.510 28.55
Average loss over 5256082 tokens: 2.458, valid loss/error: 2.509 28.47
New best model saved
Average loss over 5244660 tokens: 2.460, valid loss/error: 2.510 28.45
New best model saved
Average loss over 5268703 tokens: 2.456, valid loss/error: 2.510 28.51
Average loss over 5270045 tokens: 2.461, valid loss/error: 2.510 28.51
Average loss over 5262463 tokens: 2.456, valid loss/error: 2.510 28.54
Average loss over 5263644 tokens: 2.454, valid loss/error: 2.510 28.53
Average loss over 5250611 tokens: 2.458, valid loss/error: 2.510 28.56
Average loss over 5269916 tokens: 2.460, valid loss/error: 2.510 28.50
Average loss over 5274278 tokens: 2.454, valid loss/error: 2.509 28.52
New best model saved
Average loss over 1065600 tokens: 2.466
Epoch: 16, train loss: 2.459, valid loss/error: 2.509 28.51
Average loss over 5261840 tokens: 2.459, valid loss/error: 2.509 28.54
Average loss over 5272738 tokens: 2.457, valid loss/error: 2.510 28.51
Average loss over 5250254 tokens: 2.456, valid loss/error: 2.510 28.50
Average loss over 5254888 tokens: 2.452, valid loss/error: 2.510 28.56
Average loss over 5265757 tokens: 2.459, valid loss/error: 2.510 28.51
Average loss over 5262215 tokens: 2.458, valid loss/error: 2.509 28.50
Average loss over 5268703 tokens: 2.453, valid loss/error: 2.509 28.51
Average loss over 5267482 tokens: 2.457, valid loss/error: 2.510 28.56
Average loss over 5258852 tokens: 2.458, valid loss/error: 2.510 28.58
Average loss over 5254463 tokens: 2.457, valid loss/error: 2.510 28.56
Average loss over 5248546 tokens: 2.457, valid loss/error: 2.509 28.60
Average loss over 5256620 tokens: 2.462, valid loss/error: 2.510 28.56
Average loss over 5259001 tokens: 2.456, valid loss/error: 2.510 28.56
Average loss over 5258913 tokens: 2.460, valid loss/error: 2.510 28.56
Average loss over 5258286 tokens: 2.462, valid loss/error: 2.510 28.58
Average loss over 5258751 tokens: 2.460, valid loss/error: 2.510 28.55
Average loss over 1066885 tokens: 2.464
Epoch: 17, train loss: 2.458, valid loss/error: 2.510 28.57
Average loss over 5264875 tokens: 2.458, valid loss/error: 2.508 28.52
New best model saved
Average loss over 5266614 tokens: 2.457, valid loss/error: 2.510 28.57
Average loss over 5252616 tokens: 2.463, valid loss/error: 2.510 28.56
Average loss over 5269610 tokens: 2.446, valid loss/error: 2.508 28.53
New best model saved
Average loss over 5248955 tokens: 2.447, valid loss/error: 2.509 28.58
Average loss over 5272171 tokens: 2.464, valid loss/error: 2.509 28.58
Average loss over 5271739 tokens: 2.454, valid loss/error: 2.509 28.56
Average loss over 5269123 tokens: 2.461, valid loss/error: 2.509 28.51
Average loss over 5258109 tokens: 2.456, valid loss/error: 2.510 28.54
Average loss over 5266846 tokens: 2.457, valid loss/error: 2.510 28.56
Average loss over 5258990 tokens: 2.456, valid loss/error: 2.510 28.54
Average loss over 5246650 tokens: 2.460, valid loss/error: 2.510 28.56
Average loss over 5274964 tokens: 2.461, valid loss/error: 2.509 28.52
Average loss over 5277936 tokens: 2.458, valid loss/error: 2.509 28.53
Average loss over 5260273 tokens: 2.455, valid loss/error: 2.509 28.58
Average loss over 5270299 tokens: 2.466, valid loss/error: 2.508 28.49
New best model saved
Average loss over 1070907 tokens: 2.466
Epoch: 18, train loss: 2.458, valid loss/error: 2.508 28.52
Average loss over 5274189 tokens: 2.461, valid loss/error: 2.510 28.54
Average loss over 5272914 tokens: 2.454, valid loss/error: 2.509 28.54
Average loss over 5264212 tokens: 2.453, valid loss/error: 2.508 28.52
Average loss over 5260080 tokens: 2.455, valid loss/error: 2.508 28.58
Average loss over 5274401 tokens: 2.456, valid loss/error: 2.509 28.55
Average loss over 5274095 tokens: 2.465, valid loss/error: 2.508 28.51
Average loss over 5251279 tokens: 2.452, valid loss/error: 2.509 28.56
Average loss over 5269751 tokens: 2.463, valid loss/error: 2.509 28.56
Average loss over 5270204 tokens: 2.455, valid loss/error: 2.510 28.59
Average loss over 5268527 tokens: 2.460, valid loss/error: 2.509 28.54
Average loss over 5257729 tokens: 2.463, valid loss/error: 2.509 28.53
Average loss over 5255737 tokens: 2.457, valid loss/error: 2.509 28.53
Average loss over 5252230 tokens: 2.459, valid loss/error: 2.509 28.51
Average loss over 5268306 tokens: 2.458, valid loss/error: 2.509 28.54
Average loss over 5269723 tokens: 2.461, valid loss/error: 2.509 28.49
Average loss over 5244188 tokens: 2.451, valid loss/error: 2.509 28.50
Average loss over 1072737 tokens: 2.456
Epoch: 19, train loss: 2.458, valid loss/error: 2.508 28.49
Average loss over 5249778 tokens: 2.451, valid loss/error: 2.509 28.52
Average loss over 5266599 tokens: 2.459, valid loss/error: 2.509 28.50
Average loss over 5244747 tokens: 2.451, valid loss/error: 2.509 28.53
Average loss over 5259600 tokens: 2.461, valid loss/error: 2.509 28.49
Average loss over 5262219 tokens: 2.461, valid loss/error: 2.509 28.51
Average loss over 5249220 tokens: 2.461, valid loss/error: 2.508 28.45
Average loss over 5253566 tokens: 2.459, valid loss/error: 2.509 28.50
Average loss over 5277748 tokens: 2.454, valid loss/error: 2.508 28.52
Average loss over 5261898 tokens: 2.460, valid loss/error: 2.508 28.52
Average loss over 5267787 tokens: 2.450, valid loss/error: 2.509 28.51
Average loss over 5262318 tokens: 2.458, valid loss/error: 2.510 28.48
Average loss over 5272294 tokens: 2.458, valid loss/error: 2.509 28.53
Average loss over 5265813 tokens: 2.459, valid loss/error: 2.509 28.51
Average loss over 5254895 tokens: 2.465, valid loss/error: 2.510 28.54
Average loss over 5278496 tokens: 2.455, valid loss/error: 2.509 28.50
Average loss over 5259925 tokens: 2.456, valid loss/error: 2.509 28.49
Average loss over 1064788 tokens: 2.460
Epoch: 20, train loss: 2.457, valid loss/error: 2.508 28.46
New best model saved
Average loss over 5266006 tokens: 2.453, valid loss/error: 2.508 28.49
Average loss over 5260491 tokens: 2.448, valid loss/error: 2.508 28.49
Average loss over 5259497 tokens: 2.455, valid loss/error: 2.509 28.49
Average loss over 5269810 tokens: 2.454, valid loss/error: 2.509 28.51
Average loss over 5264222 tokens: 2.465, valid loss/error: 2.508 28.47
Average loss over 5257591 tokens: 2.452, valid loss/error: 2.509 28.50
Average loss over 5243874 tokens: 2.456, valid loss/error: 2.508 28.50
Average loss over 5245551 tokens: 2.455, valid loss/error: 2.508 28.50
Average loss over 5268899 tokens: 2.463, valid loss/error: 2.509 28.48
Average loss over 5260991 tokens: 2.462, valid loss/error: 2.508 28.48
Average loss over 5255132 tokens: 2.455, valid loss/error: 2.508 28.48
Average loss over 5260852 tokens: 2.462, valid loss/error: 2.508 28.48
Average loss over 5251598 tokens: 2.456, valid loss/error: 2.509 28.51
Average loss over 5269369 tokens: 2.461, valid loss/error: 2.508 28.49
Average loss over 5257520 tokens: 2.456, valid loss/error: 2.508 28.49
Average loss over 5257692 tokens: 2.457, valid loss/error: 2.507 28.48
New best model saved
Average loss over 1073766 tokens: 2.437
Epoch: 21, train loss: 2.456, valid loss/error: 2.508 28.51
Average loss over 5268992 tokens: 2.459, valid loss/error: 2.508 28.47
Average loss over 5275116 tokens: 2.446, valid loss/error: 2.508 28.49
Average loss over 5262931 tokens: 2.453, valid loss/error: 2.508 28.54
Average loss over 5265632 tokens: 2.462, valid loss/error: 2.508 28.54
Average loss over 5278739 tokens: 2.460, valid loss/error: 2.508 28.52
Average loss over 5259938 tokens: 2.456, valid loss/error: 2.508 28.52
Average loss over 5274145 tokens: 2.456, valid loss/error: 2.508 28.53
Average loss over 5263732 tokens: 2.467, valid loss/error: 2.510 28.54
Average loss over 5260282 tokens: 2.454, valid loss/error: 2.509 28.49
Average loss over 5252066 tokens: 2.459, valid loss/error: 2.509 28.51
Average loss over 5249366 tokens: 2.449, valid loss/error: 2.508 28.53
Average loss over 5255466 tokens: 2.451, valid loss/error: 2.508 28.48
Average loss over 5252274 tokens: 2.459, valid loss/error: 2.507 28.49
Average loss over 5252514 tokens: 2.458, valid loss/error: 2.508 28.50
Average loss over 5270524 tokens: 2.456, valid loss/error: 2.508 28.46
Average loss over 5269352 tokens: 2.461, valid loss/error: 2.508 28.50
Average loss over 1070151 tokens: 2.450
Epoch: 22, train loss: 2.457, valid loss/error: 2.507 28.44
New best model saved
Average loss over 5256438 tokens: 2.457, valid loss/error: 2.509 28.49
Average loss over 5259359 tokens: 2.453, valid loss/error: 2.508 28.47
Average loss over 5250745 tokens: 2.451, valid loss/error: 2.508 28.46
Average loss over 5263390 tokens: 2.448, valid loss/error: 2.508 28.51
Average loss over 5260693 tokens: 2.459, valid loss/error: 2.508 28.49
Average loss over 5261298 tokens: 2.461, valid loss/error: 2.507 28.46
Average loss over 5262482 tokens: 2.456, valid loss/error: 2.508 28.46
Average loss over 5272081 tokens: 2.460, valid loss/error: 2.508 28.44
Average loss over 5258470 tokens: 2.453, valid loss/error: 2.508 28.45
Average loss over 5268148 tokens: 2.454, valid loss/error: 2.507 28.45
New best model saved
Average loss over 5270583 tokens: 2.455, valid loss/error: 2.507 28.44
New best model saved
Average loss over 5261740 tokens: 2.456, valid loss/error: 2.507 28.50
New best model saved
Average loss over 5255361 tokens: 2.448, valid loss/error: 2.507 28.46
Average loss over 5258628 tokens: 2.460, valid loss/error: 2.508 28.48
Average loss over 5257369 tokens: 2.453, valid loss/error: 2.508 28.45
Average loss over 5263110 tokens: 2.457, valid loss/error: 2.507 28.47
Average loss over 1073599 tokens: 2.466
Epoch: 23, train loss: 2.455, valid loss/error: 2.508 28.47
Average loss over 5252945 tokens: 2.458, valid loss/error: 2.508 28.47
Average loss over 5275494 tokens: 2.456, valid loss/error: 2.508 28.48
Average loss over 5255407 tokens: 2.452, valid loss/error: 2.508 28.47
Average loss over 5245360 tokens: 2.449, valid loss/error: 2.509 28.53
Average loss over 5253504 tokens: 2.458, valid loss/error: 2.508 28.47
Average loss over 5271481 tokens: 2.454, valid loss/error: 2.508 28.47
Average loss over 5263554 tokens: 2.457, valid loss/error: 2.508 28.46
Average loss over 5253781 tokens: 2.451, valid loss/error: 2.508 28.52
Average loss over 5267778 tokens: 2.457, valid loss/error: 2.508 28.49
Average loss over 5269382 tokens: 2.459, valid loss/error: 2.508 28.47
Average loss over 5268173 tokens: 2.456, valid loss/error: 2.507 28.46
Average loss over 5271551 tokens: 2.459, valid loss/error: 2.508 28.49
Average loss over 5276335 tokens: 2.468, valid loss/error: 2.508 28.46
Average loss over 5270770 tokens: 2.453, valid loss/error: 2.508 28.44
Average loss over 5249193 tokens: 2.456, valid loss/error: 2.508 28.43
New best model saved
Average loss over 5258367 tokens: 2.462, valid loss/error: 2.507 28.43
Average loss over 1066876 tokens: 2.460
Epoch: 24, train loss: 2.457, valid loss/error: 2.507 28.46
New best model saved
Average loss over 5274501 tokens: 2.452, valid loss/error: 2.508 28.51
Average loss over 5264604 tokens: 2.457, valid loss/error: 2.508 28.46
Average loss over 5261001 tokens: 2.454, valid loss/error: 2.507 28.47
New best model saved
Average loss over 5249662 tokens: 2.460, valid loss/error: 2.508 28.48
Average loss over 5258665 tokens: 2.454, valid loss/error: 2.508 28.47
Average loss over 5241407 tokens: 2.451, valid loss/error: 2.507 28.49
Average loss over 5261637 tokens: 2.455, valid loss/error: 2.507 28.44
Average loss over 5272856 tokens: 2.450, valid loss/error: 2.508 28.44
Average loss over 5272319 tokens: 2.457, valid loss/error: 2.507 28.41
New best model saved
Average loss over 5258396 tokens: 2.456, valid loss/error: 2.508 28.46
Average loss over 5269741 tokens: 2.458, valid loss/error: 2.508 28.47
Average loss over 5268671 tokens: 2.457, valid loss/error: 2.508 28.49
Average loss over 5260449 tokens: 2.460, valid loss/error: 2.507 28.49
Average loss over 5270610 tokens: 2.454, valid loss/error: 2.508 28.48
Average loss over 5252334 tokens: 2.452, valid loss/error: 2.507 28.50
Average loss over 5266586 tokens: 2.448, valid loss/error: 2.507 28.47
Average loss over 1072620 tokens: 2.454
Epoch: 25, train loss: 2.455, valid loss/error: 2.507 28.51
Average loss over 5263739 tokens: 2.456, valid loss/error: 2.507 28.49
New best model saved
Average loss over 5274766 tokens: 2.456, valid loss/error: 2.507 28.48
Average loss over 5271521 tokens: 2.449, valid loss/error: 2.507 28.50
New best model saved
Average loss over 5265539 tokens: 2.452, valid loss/error: 2.507 28.49
Average loss over 5254843 tokens: 2.453, valid loss/error: 2.507 28.49
Average loss over 5246086 tokens: 2.447, valid loss/error: 2.508 28.46
Average loss over 5258428 tokens: 2.463, valid loss/error: 2.508 28.49
Average loss over 5264442 tokens: 2.456, valid loss/error: 2.508 28.44
Average loss over 5248816 tokens: 2.453, valid loss/error: 2.507 28.44
Average loss over 5277585 tokens: 2.455, valid loss/error: 2.508 28.50
Average loss over 5257378 tokens: 2.453, valid loss/error: 2.507 28.49
Average loss over 5263772 tokens: 2.454, valid loss/error: 2.507 28.43
Average loss over 5256282 tokens: 2.454, valid loss/error: 2.507 28.47
Average loss over 5262687 tokens: 2.462, valid loss/error: 2.507 28.44
Average loss over 5262588 tokens: 2.457, valid loss/error: 2.507 28.43
Average loss over 5260205 tokens: 2.451, valid loss/error: 2.508 28.43
Average loss over 1071560 tokens: 2.451
Epoch: 26, train loss: 2.455, valid loss/error: 2.507 28.42
Average loss over 5260475 tokens: 2.456, valid loss/error: 2.507 28.46
Average loss over 5271855 tokens: 2.449, valid loss/error: 2.508 28.48
Average loss over 5253039 tokens: 2.449, valid loss/error: 2.507 28.45
Average loss over 5272543 tokens: 2.457, valid loss/error: 2.508 28.48
Average loss over 5262099 tokens: 2.450, valid loss/error: 2.508 28.44
Average loss over 5263990 tokens: 2.458, valid loss/error: 2.507 28.44
New best model saved
Average loss over 5271460 tokens: 2.457, valid loss/error: 2.507 28.47
Average loss over 5248498 tokens: 2.452, valid loss/error: 2.508 28.47
Average loss over 5257392 tokens: 2.455, valid loss/error: 2.508 28.49
Average loss over 5254530 tokens: 2.453, valid loss/error: 2.508 28.46
Average loss over 5271420 tokens: 2.450, valid loss/error: 2.506 28.43
New best model saved
Average loss over 5263653 tokens: 2.452, valid loss/error: 2.507 28.43
Average loss over 5262014 tokens: 2.450, valid loss/error: 2.507 28.40
New best model saved
Average loss over 5268033 tokens: 2.459, valid loss/error: 2.507 28.45
Average loss over 5275573 tokens: 2.449, valid loss/error: 2.507 28.46
Average loss over 5270191 tokens: 2.456, valid loss/error: 2.507 28.44
Average loss over 1068238 tokens: 2.467
Epoch: 27, train loss: 2.453, valid loss/error: 2.507 28.41
Average loss over 5257789 tokens: 2.457, valid loss/error: 2.506 28.46
Average loss over 5278677 tokens: 2.458, valid loss/error: 2.508 28.46
Average loss over 5258404 tokens: 2.450, valid loss/error: 2.507 28.47
Average loss over 5256901 tokens: 2.455, valid loss/error: 2.508 28.49
Average loss over 5247788 tokens: 2.443, valid loss/error: 2.507 28.51
Average loss over 5263410 tokens: 2.462, valid loss/error: 2.507 28.54
Average loss over 5253041 tokens: 2.462, valid loss/error: 2.508 28.53
Average loss over 5268627 tokens: 2.449, valid loss/error: 2.507 28.49
Average loss over 5276779 tokens: 2.450, valid loss/error: 2.507 28.49
Average loss over 5266830 tokens: 2.455, valid loss/error: 2.507 28.46
Average loss over 5270431 tokens: 2.448, valid loss/error: 2.507 28.50
Average loss over 5248496 tokens: 2.453, valid loss/error: 2.507 28.50
Average loss over 5250256 tokens: 2.454, valid loss/error: 2.508 28.55
Average loss over 5250198 tokens: 2.450, valid loss/error: 2.507 28.48
Average loss over 5262851 tokens: 2.458, valid loss/error: 2.507 28.47
Average loss over 5270741 tokens: 2.454, valid loss/error: 2.506 28.47
New best model saved
Average loss over 1075955 tokens: 2.445
Epoch: 28, train loss: 2.454, valid loss/error: 2.507 28.47
Average loss over 5252476 tokens: 2.456, valid loss/error: 2.507 28.46
Average loss over 5257652 tokens: 2.445, valid loss/error: 2.507 28.50
Average loss over 5257884 tokens: 2.457, valid loss/error: 2.507 28.49
Average loss over 5275243 tokens: 2.457, valid loss/error: 2.508 28.50
Average loss over 5277609 tokens: 2.455, valid loss/error: 2.507 28.51
Average loss over 5256753 tokens: 2.459, valid loss/error: 2.507 28.47
Average loss over 5259555 tokens: 2.455, valid loss/error: 2.507 28.51
Average loss over 5253505 tokens: 2.451, valid loss/error: 2.507 28.47
Average loss over 5268507 tokens: 2.449, valid loss/error: 2.506 28.51
New best model saved
Average loss over 5268844 tokens: 2.463, valid loss/error: 2.507 28.47
Average loss over 5260372 tokens: 2.453, valid loss/error: 2.507 28.49
Average loss over 5263566 tokens: 2.450, valid loss/error: 2.507 28.50
Average loss over 5280578 tokens: 2.450, valid loss/error: 2.507 28.48
Average loss over 5264170 tokens: 2.455, valid loss/error: 2.507 28.47
Average loss over 5262517 tokens: 2.454, valid loss/error: 2.507 28.48
Average loss over 5256356 tokens: 2.452, valid loss/error: 2.507 28.47
Average loss over 1063548 tokens: 2.446
Epoch: 29, train loss: 2.454, valid loss/error: 2.506 28.46
Average loss over 5253298 tokens: 2.453, valid loss/error: 2.507 28.44
Average loss over 5272752 tokens: 2.453, valid loss/error: 2.506 28.42
Average loss over 5272552 tokens: 2.451, valid loss/error: 2.506 28.44
Average loss over 5272159 tokens: 2.459, valid loss/error: 2.507 28.46
Average loss over 5269031 tokens: 2.451, valid loss/error: 2.506 28.45
New best model saved
Average loss over 5249481 tokens: 2.451, valid loss/error: 2.507 28.45
Average loss over 5281066 tokens: 2.453, valid loss/error: 2.506 28.44
Average loss over 5262218 tokens: 2.456, valid loss/error: 2.507 28.42
Average loss over 5257824 tokens: 2.443, valid loss/error: 2.507 28.47
Average loss over 5241362 tokens: 2.454, valid loss/error: 2.506 28.41
New best model saved
Average loss over 5273122 tokens: 2.458, valid loss/error: 2.506 28.44
Average loss over 5261764 tokens: 2.460, valid loss/error: 2.507 28.45
Average loss over 5255445 tokens: 2.447, valid loss/error: 2.506 28.43
Average loss over 5254776 tokens: 2.451, valid loss/error: 2.507 28.47
Average loss over 5258658 tokens: 2.463, valid loss/error: 2.506 28.42
New best model saved
Average loss over 1593240 tokens: 2.439
Epoch: 30, train loss: 2.453, valid loss/error: 2.507 28.48
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
Average loss over 21130555 tokens: 2.928, valid loss/error: 2.964 32.65
New best model saved
Average loss over 21167240 tokens: 2.887, valid loss/error: 2.427 32.61
New best model saved
Average loss over 6645593 tokens: 2.844
Epoch: 1, train loss: 2.898, valid loss/error: 2.358 32.57
New best model saved
Average loss over 21142121 tokens: 2.826, valid loss/error: 2.328 32.59
New best model saved
Average loss over 21166432 tokens: 2.826, valid loss/error: 2.326 32.57
New best model saved
Average loss over 6610427 tokens: 2.810
Epoch: 2, train loss: 2.824, valid loss/error: 2.336 32.57
New best model saved
Average loss over 21204564 tokens: 2.819, valid loss/error: 2.317 32.47
New best model saved
Average loss over 21113694 tokens: 2.807, valid loss/error: 2.322 32.53
Average loss over 6653044 tokens: 2.816
Epoch: 3, train loss: 2.813, valid loss/error: 2.324 32.58
Average loss over 21186976 tokens: 2.823, valid loss/error: 2.320 32.54
Average loss over 21123622 tokens: 2.802, valid loss/error: 2.311 32.59
New best model saved
Average loss over 6623740 tokens: 2.791
Epoch: 4, train loss: 2.809, valid loss/error: 2.316 32.58
Average loss over 21170103 tokens: 2.808, valid loss/error: 2.313 32.56
Average loss over 21103750 tokens: 2.792, valid loss/error: 2.323 32.55
Average loss over 6640976 tokens: 2.796
Epoch: 5, train loss: 2.800, valid loss/error: 2.312 32.55
Average loss over 21124776 tokens: 2.786, valid loss/error: 2.315 32.55
Average loss over 21166286 tokens: 2.804, valid loss/error: 2.317 32.53
Average loss over 6638709 tokens: 2.794
Epoch: 6, train loss: 2.795, valid loss/error: 2.309 32.55
New best model saved
Average loss over 21147086 tokens: 2.790, valid loss/error: 2.319 32.56
Average loss over 21118643 tokens: 2.787, valid loss/error: 2.312 32.54
Average loss over 6662331 tokens: 2.791
Epoch: 7, train loss: 2.789, valid loss/error: 2.297 32.50
New best model saved
Average loss over 21146190 tokens: 2.783, valid loss/error: 2.307 32.47
Average loss over 21081958 tokens: 2.780, valid loss/error: 2.309 32.49
Average loss over 6663043 tokens: 2.798
Epoch: 8, train loss: 2.784, valid loss/error: 2.315 32.49
Average loss over 21149838 tokens: 2.778, valid loss/error: 2.322 32.48
Average loss over 21117284 tokens: 2.782, valid loss/error: 2.306 32.54
Average loss over 6633691 tokens: 2.780
Epoch: 9, train loss: 2.780, valid loss/error: 2.310 32.52
Average loss over 21144681 tokens: 2.775, valid loss/error: 2.312 32.51
Average loss over 21115496 tokens: 2.772, valid loss/error: 2.299 32.50
Average loss over 6654376 tokens: 2.791
Epoch: 10, train loss: 2.776, valid loss/error: 2.305 32.45
New best model saved
Average loss over 21116051 tokens: 2.769, valid loss/error: 2.326 32.47
Average loss over 21143666 tokens: 2.777, valid loss/error: 2.299 32.53
Average loss over 6649959 tokens: 2.787
Epoch: 11, train loss: 2.775, valid loss/error: 2.295 32.49
New best model saved
Average loss over 21118014 tokens: 2.768, valid loss/error: 2.295 32.48
Average loss over 21183616 tokens: 2.778, valid loss/error: 2.301 32.47
Average loss over 6627652 tokens: 2.750
Epoch: 12, train loss: 2.770, valid loss/error: 2.311 32.46
Average loss over 21113198 tokens: 2.768, valid loss/error: 2.305 32.45
Average loss over 21092092 tokens: 2.770, valid loss/error: 2.292 32.48
New best model saved
Average loss over 6674684 tokens: 2.765
Epoch: 13, train loss: 2.768, valid loss/error: 2.295 32.48
Average loss over 21148115 tokens: 2.762, valid loss/error: 2.290 32.50
New best model saved
Average loss over 21144158 tokens: 2.764, valid loss/error: 2.310 32.51
Average loss over 6618046 tokens: 2.764
Epoch: 14, train loss: 2.763, valid loss/error: 2.302 32.46
Average loss over 21138214 tokens: 2.761, valid loss/error: 2.305 32.47
Average loss over 21094965 tokens: 2.762, valid loss/error: 2.291 32.48
Average loss over 6674624 tokens: 2.740
Epoch: 15, train loss: 2.759, valid loss/error: 2.306 32.49
Average loss over 21127416 tokens: 2.756, valid loss/error: 2.299 32.48
Average loss over 21153822 tokens: 2.763, valid loss/error: 2.297 32.48
Average loss over 6638536 tokens: 2.756
Epoch: 16, train loss: 2.759, valid loss/error: 2.297 32.43
New best model saved
Average loss over 21125768 tokens: 2.759, valid loss/error: 2.301 32.48
Average loss over 21156383 tokens: 2.751, valid loss/error: 2.299 32.47
Average loss over 6649499 tokens: 2.755
Epoch: 17, train loss: 2.755, valid loss/error: 2.304 32.47
Average loss over 21132292 tokens: 2.754, valid loss/error: 2.297 32.44
Average loss over 21107944 tokens: 2.755, valid loss/error: 2.299 32.47
Average loss over 6621843 tokens: 2.747
Epoch: 18, train loss: 2.753, valid loss/error: 2.300 32.44
Average loss over 21154409 tokens: 2.750, valid loss/error: 2.298 32.42
New best model saved
Average loss over 21119667 tokens: 2.757, valid loss/error: 2.305 32.45
Average loss over 6635598 tokens: 2.744
Epoch: 19, train loss: 2.752, valid loss/error: 2.291 32.45
Average loss over 21162483 tokens: 2.747, valid loss/error: 2.286 32.44
New best model saved
Average loss over 21096291 tokens: 2.746, valid loss/error: 2.287 32.44
Average loss over 6647778 tokens: 2.759
Epoch: 20, train loss: 2.748, valid loss/error: 2.298 32.46
Average loss over 21101842 tokens: 2.741, valid loss/error: 2.308 32.46
Average loss over 21150121 tokens: 2.750, valid loss/error: 2.292 32.43
Average loss over 6664658 tokens: 2.778
Epoch: 21, train loss: 2.750, valid loss/error: 2.308 32.45
Average loss over 21108064 tokens: 2.747, valid loss/error: 2.308 32.48
Average loss over 21146320 tokens: 2.744, valid loss/error: 2.295 32.42
Average loss over 6652594 tokens: 2.751
Epoch: 22, train loss: 2.746, valid loss/error: 2.293 32.47
Average loss over 21149395 tokens: 2.746, valid loss/error: 2.302 32.46
Average loss over 21154138 tokens: 2.746, valid loss/error: 2.298 32.51
Average loss over 6649899 tokens: 2.733
Epoch: 23, train loss: 2.744, valid loss/error: 2.301 32.45
Average loss over 21115327 tokens: 2.738, valid loss/error: 2.291 32.50
Average loss over 21112535 tokens: 2.744, valid loss/error: 2.307 32.48
Average loss over 6660558 tokens: 2.749
Epoch: 24, train loss: 2.742, valid loss/error: 2.309 32.48
Average loss over 21187587 tokens: 2.750, valid loss/error: 2.291 32.47
Average loss over 21108823 tokens: 2.733, valid loss/error: 2.283 32.44
New best model saved
Average loss over 6641646 tokens: 2.710
Epoch: 25, train loss: 2.737, valid loss/error: 2.285 32.41
New best model saved
Average loss over 21149047 tokens: 2.739, valid loss/error: 2.300 32.45
Average loss over 21144660 tokens: 2.742, valid loss/error: 2.295 32.53
Average loss over 6626995 tokens: 2.745
Epoch: 26, train loss: 2.741, valid loss/error: 2.312 32.47
Average loss over 21129197 tokens: 2.737, valid loss/error: 2.291 32.51
Average loss over 21128233 tokens: 2.740, valid loss/error: 2.304 32.48
Average loss over 6634726 tokens: 2.728
Epoch: 27, train loss: 2.737, valid loss/error: 2.306 32.52
Average loss over 21137045 tokens: 2.743, valid loss/error: 2.296 32.45
Average loss over 21151955 tokens: 2.737, valid loss/error: 2.280 32.50
New best model saved
Average loss over 6627410 tokens: 2.724
Epoch: 28, train loss: 2.738, valid loss/error: 2.283 32.49
Average loss over 21145888 tokens: 2.746, valid loss/error: 2.298 32.49
Average loss over 21202007 tokens: 2.738, valid loss/error: 2.294 32.46
Average loss over 6608534 tokens: 2.699
Epoch: 29, train loss: 2.736, valid loss/error: 2.291 32.48
Average loss over 21142906 tokens: 2.741, valid loss/error: 2.284 32.45
Average loss over 21090667 tokens: 2.733, valid loss/error: 2.279 32.46
New best model saved
Average loss over 6659649 tokens: 2.724
Epoch: 30, train loss: 2.735, valid loss/error: 2.304 32.44
Average loss over 21104156 tokens: 2.721, valid loss/error: 2.269 32.48
New best model saved
Average loss over 21190949 tokens: 2.743, valid loss/error: 2.294 32.53
Average loss over 6631193 tokens: 2.732
Epoch: 31, train loss: 2.732, valid loss/error: 2.286 32.47
Average loss over 21155446 tokens: 2.724, valid loss/error: 2.294 32.47
Average loss over 21133164 tokens: 2.730, valid loss/error: 2.280 32.46
Average loss over 6652579 tokens: 2.734
Epoch: 32, train loss: 2.728, valid loss/error: 2.279 32.49
Average loss over 21091492 tokens: 2.727, valid loss/error: 2.296 32.48
Average loss over 21197861 tokens: 2.728, valid loss/error: 2.293 32.50
Average loss over 6635367 tokens: 2.732
Epoch: 33, train loss: 2.728, valid loss/error: 2.292 32.44
Average loss over 21151543 tokens: 2.732, valid loss/error: 2.285 32.52
Average loss over 21140255 tokens: 2.722, valid loss/error: 2.296 32.46
Average loss over 6642913 tokens: 2.729
Epoch: 34, train loss: 2.727, valid loss/error: 2.291 32.46
Average loss over 21171396 tokens: 2.723, valid loss/error: 2.289 32.46
Average loss over 21078896 tokens: 2.717, valid loss/error: 2.306 32.49
Average loss over 6674222 tokens: 2.739
Epoch: 35, train loss: 2.722, valid loss/error: 2.284 32.44
Average loss over 21148551 tokens: 2.720, valid loss/error: 2.289 32.47
Average loss over 21090516 tokens: 2.728, valid loss/error: 2.285 32.46
Average loss over 6652458 tokens: 2.716
Epoch: 36, train loss: 2.723, valid loss/error: 2.288 32.46
Average loss over 21127259 tokens: 2.714, valid loss/error: 2.289 32.52
Average loss over 21164994 tokens: 2.724, valid loss/error: 2.299 32.49
Average loss over 6651029 tokens: 2.737
Epoch: 37, train loss: 2.722, valid loss/error: 2.285 32.45
Average loss over 21158275 tokens: 2.721, valid loss/error: 2.284 32.50
Average loss over 21087720 tokens: 2.713, valid loss/error: 2.289 32.48
Average loss over 6653640 tokens: 2.727
Epoch: 38, train loss: 2.718, valid loss/error: 2.290 32.45
Average loss over 21146300 tokens: 2.713, valid loss/error: 2.286 32.50
Average loss over 21122301 tokens: 2.716, valid loss/error: 2.275 32.51
Average loss over 6639549 tokens: 2.743
Epoch: 39, train loss: 2.718, valid loss/error: 2.292 32.51
Average loss over 21128789 tokens: 2.716, valid loss/error: 2.291 32.48
Average loss over 21132020 tokens: 2.725, valid loss/error: 2.295 32.51
Average loss over 6663466 tokens: 2.705
Epoch: 40, train loss: 2.718, valid loss/error: 2.276 32.50
Average loss over 21143693 tokens: 2.717, valid loss/error: 2.294 32.47
Average loss over 21173386 tokens: 2.721, valid loss/error: 2.283 32.49
Average loss over 6593918 tokens: 2.713
Epoch: 41, train loss: 2.718, valid loss/error: 2.282 32.52
Average loss over 21137838 tokens: 2.711, valid loss/error: 2.276 32.48
Average loss over 21141235 tokens: 2.720, valid loss/error: 2.303 32.49
Average loss over 6638648 tokens: 2.708
Epoch: 42, train loss: 2.714, valid loss/error: 2.291 32.49
Average loss over 21103609 tokens: 2.712, valid loss/error: 2.287 32.47
Average loss over 21176969 tokens: 2.715, valid loss/error: 2.298 32.50
Average loss over 6641816 tokens: 2.732
Epoch: 43, train loss: 2.716, valid loss/error: 2.292 32.50
Average loss over 21183393 tokens: 2.717, valid loss/error: 2.283 32.49
Average loss over 21145897 tokens: 2.716, valid loss/error: 2.290 32.53
Average loss over 6607997 tokens: 2.713
Epoch: 44, train loss: 2.716, valid loss/error: 2.284 32.50
Average loss over 21115095 tokens: 2.711, valid loss/error: 2.296 32.57
Average loss over 21146505 tokens: 2.716, valid loss/error: 2.280 32.51
Average loss over 6644640 tokens: 2.720
Epoch: 45, train loss: 2.714, valid loss/error: 2.301 32.51
Average loss over 21140682 tokens: 2.706, valid loss/error: 2.290 32.50
Average loss over 21161182 tokens: 2.716, valid loss/error: 2.288 32.47
Average loss over 6620912 tokens: 2.698
Epoch: 46, train loss: 2.709, valid loss/error: 2.292 32.49
Average loss over 21190458 tokens: 2.711, valid loss/error: 2.291 32.50
Average loss over 21146172 tokens: 2.711, valid loss/error: 2.281 32.45
Average loss over 6588130 tokens: 2.694
Epoch: 47, train loss: 2.709, valid loss/error: 2.268 32.50
New best model saved
Average loss over 21144306 tokens: 2.706, valid loss/error: 2.285 32.49
Average loss over 21156744 tokens: 2.713, valid loss/error: 2.306 32.51
Average loss over 6631470 tokens: 2.717
Epoch: 48, train loss: 2.710, valid loss/error: 2.297 32.52
Average loss over 21140051 tokens: 2.703, valid loss/error: 2.275 32.50
Average loss over 21147116 tokens: 2.702, valid loss/error: 2.297 32.48
Average loss over 6634007 tokens: 2.705
Epoch: 49, train loss: 2.703, valid loss/error: 2.295 32.51
Average loss over 21125435 tokens: 2.705, valid loss/error: 2.294 32.53
Average loss over 21140378 tokens: 2.709, valid loss/error: 2.287 32.50
Average loss over 6653170 tokens: 2.708
Epoch: 50, train loss: 2.707, valid loss/error: 2.287 32.49
Average loss over 21077755 tokens: 2.702, valid loss/error: 2.279 32.45
Average loss over 21187952 tokens: 2.709, valid loss/error: 2.278 32.49
Average loss over 6668712 tokens: 2.697
Epoch: 51, train loss: 2.704, valid loss/error: 2.297 32.46
Average loss over 21105160 tokens: 2.701, valid loss/error: 2.282 32.50
Average loss over 21133936 tokens: 2.702, valid loss/error: 2.286 32.53
Average loss over 6669896 tokens: 2.714
Epoch: 52, train loss: 2.703, valid loss/error: 2.293 32.49
Average loss over 21134102 tokens: 2.702, valid loss/error: 2.275 32.52
Average loss over 21143619 tokens: 2.707, valid loss/error: 2.297 32.49
Average loss over 6656474 tokens: 2.692
Epoch: 53, train loss: 2.703, valid loss/error: 2.279 32.49
Average loss over 21165706 tokens: 2.699, valid loss/error: 2.285 32.53
Average loss over 21078761 tokens: 2.706, valid loss/error: 2.298 32.54
Average loss over 6651862 tokens: 2.713
Epoch: 54, train loss: 2.704, valid loss/error: 2.298 32.53
Average loss over 21140279 tokens: 2.697, valid loss/error: 2.284 32.53
Average loss over 21124264 tokens: 2.703, valid loss/error: 2.288 32.46
Average loss over 6661213 tokens: 2.701
Epoch: 55, train loss: 2.700, valid loss/error: 2.291 32.49
Average loss over 21127814 tokens: 2.699, valid loss/error: 2.298 32.52
Average loss over 21121218 tokens: 2.708, valid loss/error: 2.283 32.54
Average loss over 6640137 tokens: 2.686
Epoch: 56, train loss: 2.701, valid loss/error: 2.288 32.53
Average loss over 21141528 tokens: 2.698, valid loss/error: 2.289 32.51
Average loss over 21132773 tokens: 2.700, valid loss/error: 2.280 32.53
Average loss over 6634109 tokens: 2.700
Epoch: 57, train loss: 2.699, valid loss/error: 2.286 32.54
Average loss over 21143544 tokens: 2.697, valid loss/error: 2.288 32.52
Average loss over 21121640 tokens: 2.694, valid loss/error: 2.292 32.52
Average loss over 6678890 tokens: 2.714
Epoch: 58, train loss: 2.698, valid loss/error: 2.276 32.54
Average loss over 21132736 tokens: 2.704, valid loss/error: 2.285 32.54
Average loss over 21141577 tokens: 2.694, valid loss/error: 2.280 32.54
Average loss over 6629491 tokens: 2.680
Epoch: 59, train loss: 2.697, valid loss/error: 2.283 32.49
Average loss over 21149739 tokens: 2.696, valid loss/error: 2.295 32.52
Average loss over 21135663 tokens: 2.699, valid loss/error: 2.272 32.52
Average loss over 6641030 tokens: 2.697
Epoch: 60, train loss: 2.697, valid loss/error: 2.291 32.53
Average loss over 21145600 tokens: 2.695, valid loss/error: 2.293 32.53
Average loss over 21114539 tokens: 2.698, valid loss/error: 2.298 32.52
Average loss over 6663132 tokens: 2.688
Epoch: 61, train loss: 2.695, valid loss/error: 2.280 32.50
Average loss over 21156464 tokens: 2.692, valid loss/error: 2.278 32.55
Average loss over 21107590 tokens: 2.701, valid loss/error: 2.291 32.53
Average loss over 6658786 tokens: 2.687
Epoch: 62, train loss: 2.695, valid loss/error: 2.290 32.49
Average loss over 21166692 tokens: 2.703, valid loss/error: 2.287 32.57
Average loss over 21137604 tokens: 2.693, valid loss/error: 2.299 32.52
Average loss over 6648340 tokens: 2.694
Epoch: 63, train loss: 2.698, valid loss/error: 2.278 32.46
Average loss over 21137601 tokens: 2.683, valid loss/error: 2.293 32.50
Average loss over 21138756 tokens: 2.698, valid loss/error: 2.288 32.48
Average loss over 6647863 tokens: 2.693
Epoch: 64, train loss: 2.691, valid loss/error: 2.290 32.48
Average loss over 21124473 tokens: 2.691, valid loss/error: 2.286 32.50
Average loss over 21165176 tokens: 2.693, valid loss/error: 2.286 32.54
Average loss over 6654110 tokens: 2.673
Epoch: 65, train loss: 2.690, valid loss/error: 2.290 32.51
Average loss over 21149862 tokens: 2.688, valid loss/error: 2.273 32.51
Average loss over 21105486 tokens: 2.685, valid loss/error: 2.308 32.53
Average loss over 6649613 tokens: 2.709
Epoch: 66, train loss: 2.690, valid loss/error: 2.279 32.55
Average loss over 21133771 tokens: 2.683, valid loss/error: 2.280 32.50
Average loss over 21130984 tokens: 2.691, valid loss/error: 2.281 32.54
Average loss over 6648228 tokens: 2.688
Epoch: 67, train loss: 2.687, valid loss/error: 2.293 32.51
Average loss over 21158145 tokens: 2.668, valid loss/error: 2.285 32.49
Average loss over 21084754 tokens: 2.698, valid loss/error: 2.284 32.50
Average loss over 6639256 tokens: 2.686
Epoch: 68, train loss: 2.683, valid loss/error: 2.274 32.55
Average loss over 21127586 tokens: 2.686, valid loss/error: 2.288 32.54
Average loss over 21159762 tokens: 2.692, valid loss/error: 2.288 32.53
Average loss over 6638667 tokens: 2.696
Epoch: 69, train loss: 2.690, valid loss/error: 2.270 32.51
Average loss over 21139770 tokens: 2.679, valid loss/error: 2.270 32.49
Average loss over 21111217 tokens: 2.694, valid loss/error: 2.277 32.53
Average loss over 6644868 tokens: 2.690
Epoch: 70, train loss: 2.687, valid loss/error: 2.292 32.52
Average loss over 21159503 tokens: 2.687, valid loss/error: 2.279 32.54
Average loss over 21075216 tokens: 2.683, valid loss/error: 2.286 32.56
Average loss over 6684840 tokens: 2.689
Epoch: 71, train loss: 2.686, valid loss/error: 2.267 32.55
New best model saved
Average loss over 21183939 tokens: 2.699, valid loss/error: 2.290 32.49
Average loss over 21124545 tokens: 2.677, valid loss/error: 2.286 32.53
Average loss over 6610005 tokens: 2.680
Epoch: 72, train loss: 2.687, valid loss/error: 2.276 32.51
Average loss over 21063608 tokens: 2.680, valid loss/error: 2.271 32.50
Average loss over 21205020 tokens: 2.686, valid loss/error: 2.278 32.49
Average loss over 6664003 tokens: 2.712
Epoch: 73, train loss: 2.687, valid loss/error: 2.281 32.53
Average loss over 21096142 tokens: 2.681, valid loss/error: 2.272 32.49
Average loss over 21123313 tokens: 2.686, valid loss/error: 2.278 32.53
Average loss over 6651637 tokens: 2.692
Epoch: 74, train loss: 2.684, valid loss/error: 2.276 32.51
Average loss over 21116283 tokens: 2.685, valid loss/error: 2.281 32.48
Average loss over 21148994 tokens: 2.681, valid loss/error: 2.271 32.45
Average loss over 6629683 tokens: 2.699
Epoch: 75, train loss: 2.685, valid loss/error: 2.282 32.45
Average loss over 21142539 tokens: 2.688, valid loss/error: 2.270 32.49
Average loss over 21116504 tokens: 2.681, valid loss/error: 2.277 32.50
Average loss over 6635630 tokens: 2.680
Epoch: 76, train loss: 2.684, valid loss/error: 2.277 32.50
Average loss over 21206786 tokens: 2.678, valid loss/error: 2.291 32.56
Average loss over 21091725 tokens: 2.681, valid loss/error: 2.276 32.50
Average loss over 6624535 tokens: 2.684
Epoch: 77, train loss: 2.680, valid loss/error: 2.277 32.49
Average loss over 21118648 tokens: 2.679, valid loss/error: 2.287 32.46
Average loss over 21148064 tokens: 2.680, valid loss/error: 2.282 32.49
Average loss over 6653821 tokens: 2.690
Epoch: 78, train loss: 2.681, valid loss/error: 2.290 32.47
Average loss over 21145780 tokens: 2.678, valid loss/error: 2.291 32.53
Average loss over 21143917 tokens: 2.682, valid loss/error: 2.309 32.49
Average loss over 6621348 tokens: 2.681
Epoch: 79, train loss: 2.680, valid loss/error: 2.289 32.50
Average loss over 21209049 tokens: 2.682, valid loss/error: 2.262 32.50
New best model saved
Average loss over 21081690 tokens: 2.680, valid loss/error: 2.280 32.49
Average loss over 6596335 tokens: 2.660
Epoch: 80, train loss: 2.678, valid loss/error: 2.275 32.49
Average loss over 21128569 tokens: 2.680, valid loss/error: 2.270 32.54
Average loss over 21147179 tokens: 2.678, valid loss/error: 2.272 32.52
Average loss over 6645910 tokens: 2.693
Epoch: 81, train loss: 2.681, valid loss/error: 2.282 32.53
Average loss over 21113141 tokens: 2.671, valid loss/error: 2.283 32.49
Average loss over 21186339 tokens: 2.684, valid loss/error: 2.291 32.51
Average loss over 6657585 tokens: 2.699
Epoch: 82, train loss: 2.680, valid loss/error: 2.278 32.48
Average loss over 21065217 tokens: 2.673, valid loss/error: 2.279 32.52
Average loss over 21153409 tokens: 2.674, valid loss/error: 2.292 32.48
Average loss over 6653840 tokens: 2.688
Epoch: 83, train loss: 2.675, valid loss/error: 2.301 32.49
Average loss over 21142708 tokens: 2.674, valid loss/error: 2.273 32.49
Average loss over 21151788 tokens: 2.684, valid loss/error: 2.266 32.52
Average loss over 6601697 tokens: 2.652
Epoch: 84, train loss: 2.675, valid loss/error: 2.275 32.49
Average loss over 21148069 tokens: 2.676, valid loss/error: 2.279 32.51
Average loss over 21096787 tokens: 2.673, valid loss/error: 2.275 32.49
Average loss over 6679084 tokens: 2.695
Epoch: 85, train loss: 2.677, valid loss/error: 2.273 32.50
Average loss over 21130079 tokens: 2.670, valid loss/error: 2.275 32.48
Average loss over 21128688 tokens: 2.675, valid loss/error: 2.286 32.54
Average loss over 6630242 tokens: 2.672
Epoch: 86, train loss: 2.672, valid loss/error: 2.278 32.50
Average loss over 21131287 tokens: 2.665, valid loss/error: 2.271 32.49
Average loss over 21187705 tokens: 2.690, valid loss/error: 2.282 32.51
Average loss over 6603614 tokens: 2.662
Epoch: 87, train loss: 2.676, valid loss/error: 2.286 32.53
Average loss over 21117801 tokens: 2.664, valid loss/error: 2.284 32.52
Average loss over 21108161 tokens: 2.679, valid loss/error: 2.283 32.54
Average loss over 6688541 tokens: 2.689
Epoch: 88, train loss: 2.674, valid loss/error: 2.283 32.56
Average loss over 21142591 tokens: 2.662, valid loss/error: 2.285 32.52
Average loss over 21146822 tokens: 2.674, valid loss/error: 2.277 32.52
Average loss over 6633168 tokens: 2.674
Epoch: 89, train loss: 2.669, valid loss/error: 2.284 32.54
Average loss over 21106699 tokens: 2.671, valid loss/error: 2.282 32.53
Average loss over 21178765 tokens: 2.669, valid loss/error: 2.282 32.53
Average loss over 6656508 tokens: 2.669
Epoch: 90, train loss: 2.670, valid loss/error: 2.275 32.54
Average loss over 21152465 tokens: 2.666, valid loss/error: 2.291 32.48
Average loss over 21131969 tokens: 2.676, valid loss/error: 2.269 32.53
Average loss over 6645964 tokens: 2.667
Epoch: 91, train loss: 2.671, valid loss/error: 2.278 32.53
Average loss over 21113943 tokens: 2.666, valid loss/error: 2.279 32.52
Average loss over 21169109 tokens: 2.673, valid loss/error: 2.282 32.54
Average loss over 6644480 tokens: 2.660
Epoch: 92, train loss: 2.668, valid loss/error: 2.269 32.51
Average loss over 21142869 tokens: 2.676, valid loss/error: 2.264 32.55
Average loss over 21118523 tokens: 2.668, valid loss/error: 2.279 32.53
Average loss over 6655437 tokens: 2.656
Epoch: 93, train loss: 2.670, valid loss/error: 2.279 32.55
Average loss over 21150121 tokens: 2.668, valid loss/error: 2.262 32.58
Average loss over 21116039 tokens: 2.672, valid loss/error: 2.276 32.50
Average loss over 6647840 tokens: 2.682
Epoch: 94, train loss: 2.672, valid loss/error: 2.296 32.52
Average loss over 21137716 tokens: 2.673, valid loss/error: 2.273 32.54
Average loss over 21135116 tokens: 2.658, valid loss/error: 2.274 32.50
Average loss over 6654779 tokens: 2.678
Epoch: 95, train loss: 2.667, valid loss/error: 2.286 32.47
Average loss over 21136101 tokens: 2.662, valid loss/error: 2.281 32.51
Average loss over 21133165 tokens: 2.670, valid loss/error: 2.279 32.51
Average loss over 6621953 tokens: 2.666
Epoch: 96, train loss: 2.666, valid loss/error: 2.278 32.52
Average loss over 21153489 tokens: 2.664, valid loss/error: 2.289 32.51
Average loss over 21115582 tokens: 2.669, valid loss/error: 2.289 32.54
Average loss over 6657804 tokens: 2.672
Epoch: 97, train loss: 2.667, valid loss/error: 2.276 32.48
Average loss over 21131541 tokens: 2.672, valid loss/error: 2.270 32.50
Average loss over 21124606 tokens: 2.658, valid loss/error: 2.290 32.54
Average loss over 6654301 tokens: 2.675
Epoch: 98, train loss: 2.666, valid loss/error: 2.281 32.50
Average loss over 21116671 tokens: 2.659, valid loss/error: 2.278 32.50
Average loss over 21109210 tokens: 2.669, valid loss/error: 2.274 32.47
Average loss over 6656535 tokens: 2.679
Epoch: 99, train loss: 2.666, valid loss/error: 2.281 32.50
Average loss over 21123220 tokens: 2.662, valid loss/error: 2.276 32.48
Average loss over 21131495 tokens: 2.666, valid loss/error: 2.294 32.48
Average loss over 6648786 tokens: 2.666
Epoch: 100, train loss: 2.664, valid loss/error: 2.288 32.42
Average loss over 21151352 tokens: 2.659, valid loss/error: 2.261 32.47
New best model saved
Average loss over 21119141 tokens: 2.672, valid loss/error: 2.297 32.49
Average loss over 6644851 tokens: 2.666
Epoch: 101, train loss: 2.665, valid loss/error: 2.277 32.48
Average loss over 21149926 tokens: 2.667, valid loss/error: 2.286 32.47
Average loss over 21131364 tokens: 2.660, valid loss/error: 2.275 32.46
Average loss over 6612409 tokens: 2.674
Epoch: 102, train loss: 2.665, valid loss/error: 2.280 32.49
Average loss over 21094934 tokens: 2.646, valid loss/error: 2.271 32.52
Average loss over 21166366 tokens: 2.677, valid loss/error: 2.285 32.50
Average loss over 6630909 tokens: 2.684
Epoch: 103, train loss: 2.664, valid loss/error: 2.275 32.49
Average loss over 21121013 tokens: 2.655, valid loss/error: 2.260 32.50
New best model saved
Average loss over 21195868 tokens: 2.664, valid loss/error: 2.280 32.49
Average loss over 6622978 tokens: 2.673
Epoch: 104, train loss: 2.661, valid loss/error: 2.267 32.47
Average loss over 21188524 tokens: 2.666, valid loss/error: 2.277 32.55
Average loss over 21111098 tokens: 2.663, valid loss/error: 2.273 32.50
Average loss over 6602525 tokens: 2.650
Epoch: 105, train loss: 2.662, valid loss/error: 2.276 32.46
Average loss over 21171350 tokens: 2.657, valid loss/error: 2.275 32.51
Average loss over 21132314 tokens: 2.665, valid loss/error: 2.277 32.53
Average loss over 6637680 tokens: 2.677
Epoch: 106, train loss: 2.663, valid loss/error: 2.289 32.48
Average loss over 21172926 tokens: 2.661, valid loss/error: 2.271 32.44
Average loss over 21079324 tokens: 2.660, valid loss/error: 2.277 32.45
Average loss over 6643472 tokens: 2.654
Epoch: 107, train loss: 2.660, valid loss/error: 2.260 32.46
New best model saved
Average loss over 21131749 tokens: 2.648, valid loss/error: 2.279 32.48
Average loss over 21161858 tokens: 2.660, valid loss/error: 2.266 32.46
Average loss over 6639093 tokens: 2.688
Epoch: 108, train loss: 2.659, valid loss/error: 2.268 32.51
Average loss over 21168152 tokens: 2.658, valid loss/error: 2.261 32.49
Average loss over 21126319 tokens: 2.656, valid loss/error: 2.273 32.47
Average loss over 6618856 tokens: 2.656
Epoch: 109, train loss: 2.657, valid loss/error: 2.264 32.44
Average loss over 21134123 tokens: 2.653, valid loss/error: 2.278 32.49
Average loss over 21115577 tokens: 2.665, valid loss/error: 2.277 32.52
Average loss over 6658739 tokens: 2.640
Epoch: 110, train loss: 2.656, valid loss/error: 2.264 32.50
Average loss over 21154774 tokens: 2.656, valid loss/error: 2.278 32.46
Average loss over 21141611 tokens: 2.663, valid loss/error: 2.281 32.48
Average loss over 6629317 tokens: 2.657
Epoch: 111, train loss: 2.659, valid loss/error: 2.281 32.48
Average loss over 21144740 tokens: 2.646, valid loss/error: 2.261 32.45
Average loss over 21128549 tokens: 2.665, valid loss/error: 2.273 32.50
Average loss over 6650589 tokens: 2.664
Epoch: 112, train loss: 2.657, valid loss/error: 2.274 32.44
Average loss over 21133504 tokens: 2.661, valid loss/error: 2.291 32.45
Average loss over 21145968 tokens: 2.655, valid loss/error: 2.276 32.49
Average loss over 6645992 tokens: 2.665
Epoch: 113, train loss: 2.659, valid loss/error: 2.259 32.44
New best model saved
Average loss over 21126579 tokens: 2.655, valid loss/error: 2.258 32.49
New best model saved
Average loss over 21132631 tokens: 2.652, valid loss/error: 2.267 32.47
Average loss over 6651353 tokens: 2.679
Epoch: 114, train loss: 2.657, valid loss/error: 2.279 32.47
Average loss over 21129314 tokens: 2.654, valid loss/error: 2.252 32.42
New best model saved
Average loss over 21122636 tokens: 2.660, valid loss/error: 2.282 32.49
Average loss over 6659334 tokens: 2.664
Epoch: 115, train loss: 2.658, valid loss/error: 2.276 32.46
Average loss over 21155742 tokens: 2.659, valid loss/error: 2.280 32.50
Average loss over 21135625 tokens: 2.658, valid loss/error: 2.268 32.47
Average loss over 6635772 tokens: 2.645
Epoch: 116, train loss: 2.657, valid loss/error: 2.290 32.43
Average loss over 21103499 tokens: 2.658, valid loss/error: 2.297 32.44
Average loss over 21163207 tokens: 2.651, valid loss/error: 2.260 32.40
New best model saved
Average loss over 6649128 tokens: 2.642
Epoch: 117, train loss: 2.653, valid loss/error: 2.260 32.46
Average loss over 21150390 tokens: 2.647, valid loss/error: 2.275 32.47
Average loss over 21126711 tokens: 2.654, valid loss/error: 2.274 32.44
Average loss over 6661143 tokens: 2.669
Epoch: 118, train loss: 2.653, valid loss/error: 2.271 32.45
Average loss over 21141606 tokens: 2.648, valid loss/error: 2.273 32.50
Average loss over 21144274 tokens: 2.645, valid loss/error: 2.298 32.51
Average loss over 6641304 tokens: 2.678
Epoch: 119, train loss: 2.651, valid loss/error: 2.270 32.49
Average loss over 21197170 tokens: 2.658, valid loss/error: 2.264 32.48
Average loss over 21084924 tokens: 2.659, valid loss/error: 2.274 32.49
Average loss over 6649991 tokens: 2.626
Epoch: 120, train loss: 2.654, valid loss/error: 2.276 32.50
Average loss over 21116947 tokens: 2.661, valid loss/error: 2.272 32.49
Average loss over 21163468 tokens: 2.650, valid loss/error: 2.279 32.46
Average loss over 6664524 tokens: 2.647
Epoch: 121, train loss: 2.654, valid loss/error: 2.263 32.47
Average loss over 21126615 tokens: 2.646, valid loss/error: 2.276 32.46
Average loss over 21168832 tokens: 2.663, valid loss/error: 2.275 32.49
Average loss over 6607606 tokens: 2.658
Epoch: 122, train loss: 2.655, valid loss/error: 2.274 32.50
Average loss over 21164274 tokens: 2.657, valid loss/error: 2.280 32.46
Average loss over 21147368 tokens: 2.653, valid loss/error: 2.275 32.42
Average loss over 6609410 tokens: 2.641
Epoch: 123, train loss: 2.653, valid loss/error: 2.273 32.43
Average loss over 21102042 tokens: 2.647, valid loss/error: 2.277 32.48
Average loss over 21133727 tokens: 2.659, valid loss/error: 2.261 32.44
Average loss over 6662192 tokens: 2.655
Epoch: 124, train loss: 2.653, valid loss/error: 2.269 32.46
Average loss over 21114514 tokens: 2.649, valid loss/error: 2.282 32.48
Average loss over 21162373 tokens: 2.654, valid loss/error: 2.266 32.46
Average loss over 6651714 tokens: 2.645
Epoch: 125, train loss: 2.651, valid loss/error: 2.280 32.48
Average loss over 21106856 tokens: 2.648, valid loss/error: 2.278 32.45
Average loss over 21126579 tokens: 2.644, valid loss/error: 2.281 32.48
Average loss over 6654277 tokens: 2.677
Epoch: 126, train loss: 2.650, valid loss/error: 2.287 32.50
Average loss over 21162092 tokens: 2.649, valid loss/error: 2.260 32.41
Average loss over 21106447 tokens: 2.650, valid loss/error: 2.288 32.45
Average loss over 6649235 tokens: 2.661
Epoch: 127, train loss: 2.651, valid loss/error: 2.274 32.41
Average loss over 21201227 tokens: 2.650, valid loss/error: 2.257 32.41
Average loss over 21077643 tokens: 2.652, valid loss/error: 2.274 32.47
Average loss over 6639972 tokens: 2.653
Epoch: 128, train loss: 2.651, valid loss/error: 2.279 32.49
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python zhen_low_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: 3.016 39.50
Average loss over 5303090 tokens: 3.067, valid loss/error: 3.016 39.54
New best model saved
Average loss over 5322777 tokens: 3.062, valid loss/error: 3.012 39.45
New best model saved
Average loss over 5324258 tokens: 3.053, valid loss/error: 3.009 39.45
New best model saved
Average loss over 5313106 tokens: 3.046, valid loss/error: 3.008 39.44
New best model saved
Average loss over 5314369 tokens: 3.045, valid loss/error: 3.006 39.39
New best model saved
Average loss over 5338577 tokens: 3.049, valid loss/error: 3.006 39.41
Average loss over 5314310 tokens: 3.039, valid loss/error: 3.005 39.43
New best model saved
Average loss over 5318183 tokens: 3.048, valid loss/error: 3.004 39.36
New best model saved
Average loss over 5309189 tokens: 3.039, valid loss/error: 3.003 39.34
New best model saved
Average loss over 5325803 tokens: 3.042, valid loss/error: 3.001 39.36
New best model saved
Average loss over 5316181 tokens: 3.031, valid loss/error: 3.000 39.35
New best model saved
Average loss over 5333065 tokens: 3.036, valid loss/error: 3.002 39.38
Average loss over 5307635 tokens: 3.023, valid loss/error: 3.000 39.33
New best model saved
Average loss over 5320940 tokens: 3.035, valid loss/error: 3.000 39.29
New best model saved
Average loss over 5329835 tokens: 3.031, valid loss/error: 3.000 39.26
New best model saved
Average loss over 5335385 tokens: 3.031, valid loss/error: 2.996 39.21
New best model saved
Average loss over 5322857 tokens: 3.028, valid loss/error: 2.996 39.24
Average loss over 5314844 tokens: 3.027, valid loss/error: 2.997 39.21
Average loss over 5312423 tokens: 3.026, valid loss/error: 2.996 39.23
Average loss over 5309776 tokens: 3.032, valid loss/error: 2.996 39.29
New best model saved
Average loss over 5306882 tokens: 3.023, valid loss/error: 2.995 39.21
New best model saved
Average loss over 5319686 tokens: 3.026, valid loss/error: 2.994 39.26
New best model saved
Average loss over 5314927 tokens: 3.013, valid loss/error: 2.993 39.24
New best model saved
Average loss over 5320516 tokens: 3.017, valid loss/error: 2.993 39.21
Average loss over 5325096 tokens: 3.026, valid loss/error: 2.992 39.17
New best model saved
Average loss over 2974921 tokens: 3.034
Epoch: 1, train loss: 3.036, valid loss/error: 2.991 39.18
New best model saved
Average loss over 5309512 tokens: 3.010, valid loss/error: 2.991 39.15
New best model saved
Average loss over 5308871 tokens: 3.015, valid loss/error: 2.991 39.16
New best model saved
Average loss over 5315160 tokens: 3.027, valid loss/error: 2.992 39.19
Average loss over 5312534 tokens: 3.012, valid loss/error: 2.992 39.20
Average loss over 5310695 tokens: 3.011, valid loss/error: 2.990 39.15
New best model saved
Average loss over 5312899 tokens: 3.006, valid loss/error: 2.992 39.15
Average loss over 5330549 tokens: 3.014, valid loss/error: 2.990 39.14
New best model saved
Average loss over 5321665 tokens: 3.013, valid loss/error: 2.991 39.17
Average loss over 5329596 tokens: 3.007, valid loss/error: 2.990 39.15
Average loss over 5327919 tokens: 3.007, valid loss/error: 2.989 39.15
New best model saved
Average loss over 5335588 tokens: 3.019, valid loss/error: 2.989 39.14
New best model saved
Average loss over 5321592 tokens: 3.016, valid loss/error: 2.989 39.17
Average loss over 5309872 tokens: 3.005, valid loss/error: 2.988 39.05
New best model saved
Average loss over 5323277 tokens: 3.001, valid loss/error: 2.988 39.14
Average loss over 5321698 tokens: 3.007, valid loss/error: 2.987 39.13
New best model saved
Average loss over 5319980 tokens: 3.006, valid loss/error: 2.989 39.16
Average loss over 5311772 tokens: 3.001, valid loss/error: 2.987 39.09
Average loss over 5315433 tokens: 3.007, valid loss/error: 2.986 39.09
New best model saved
Average loss over 5325367 tokens: 3.015, valid loss/error: 2.987 39.15
Average loss over 5321072 tokens: 3.006, valid loss/error: 2.986 39.15
New best model saved
Average loss over 5316261 tokens: 3.014, valid loss/error: 2.987 39.15
Average loss over 5323942 tokens: 3.007, valid loss/error: 2.986 39.10
New best model saved
Average loss over 5317620 tokens: 3.010, valid loss/error: 2.986 39.12
Average loss over 5314976 tokens: 2.999, valid loss/error: 2.987 39.13
Average loss over 5320636 tokens: 3.008, valid loss/error: 2.985 39.15
New best model saved
Average loss over 2970145 tokens: 3.012
Epoch: 2, train loss: 3.010, valid loss/error: 2.985 39.13
New best model saved
Average loss over 5336350 tokens: 3.006, valid loss/error: 2.986 39.13
Average loss over 5329922 tokens: 2.998, valid loss/error: 2.986 39.13
Average loss over 5308538 tokens: 2.999, valid loss/error: 2.985 39.09
Average loss over 5339116 tokens: 3.008, valid loss/error: 2.984 39.10
New best model saved
Average loss over 5318204 tokens: 2.992, valid loss/error: 2.984 39.10
Average loss over 5318629 tokens: 2.995, valid loss/error: 2.983 39.08
New best model saved
Average loss over 5333138 tokens: 3.001, valid loss/error: 2.983 39.11
New best model saved
Average loss over 5327195 tokens: 3.006, valid loss/error: 2.982 39.06
New best model saved
Average loss over 5309238 tokens: 2.994, valid loss/error: 2.983 39.07
Average loss over 5314698 tokens: 3.000, valid loss/error: 2.982 39.05
Average loss over 5310387 tokens: 2.988, valid loss/error: 2.984 39.06
Average loss over 5311394 tokens: 2.996, valid loss/error: 2.983 39.02
New best model saved
Average loss over 5319894 tokens: 3.001, valid loss/error: 2.983 39.05
Average loss over 5317260 tokens: 2.996, valid loss/error: 2.983 39.06
Average loss over 5312823 tokens: 2.991, valid loss/error: 2.983 39.06
Average loss over 5335745 tokens: 2.999, valid loss/error: 2.982 39.04
Average loss over 5325039 tokens: 2.991, valid loss/error: 2.981 39.00
New best model saved
Average loss over 5317420 tokens: 2.992, valid loss/error: 2.981 39.03
New best model saved
Average loss over 5306307 tokens: 2.994, valid loss/error: 2.984 39.05
Average loss over 5331930 tokens: 2.995, valid loss/error: 2.981 39.02
New best model saved
Average loss over 5308426 tokens: 2.998, valid loss/error: 2.983 39.04
Average loss over 5318294 tokens: 2.990, valid loss/error: 2.983 39.06
Average loss over 5312619 tokens: 2.987, valid loss/error: 2.981 39.05
Average loss over 5312143 tokens: 2.987, valid loss/error: 2.982 39.06
Average loss over 5313011 tokens: 2.991, valid loss/error: 2.980 39.03
New best model saved
Average loss over 2960911 tokens: 2.989
Epoch: 3, train loss: 2.996, valid loss/error: 2.982 39.05
Average loss over 5316456 tokens: 2.995, valid loss/error: 2.982 39.04
Average loss over 5334862 tokens: 2.988, valid loss/error: 2.981 39.01
Average loss over 5302814 tokens: 2.987, valid loss/error: 2.980 39.00
New best model saved
Average loss over 5320974 tokens: 2.990, valid loss/error: 2.981 39.03
Average loss over 5308646 tokens: 2.986, valid loss/error: 2.981 39.08
Average loss over 5318862 tokens: 2.983, valid loss/error: 2.979 39.00
New best model saved
Average loss over 5313400 tokens: 2.991, valid loss/error: 2.978 38.96
New best model saved
Average loss over 5303903 tokens: 2.975, valid loss/error: 2.979 39.00
Average loss over 5331471 tokens: 2.978, valid loss/error: 2.980 38.99
Average loss over 5324000 tokens: 2.985, valid loss/error: 2.979 39.02
Average loss over 5322485 tokens: 2.987, valid loss/error: 2.981 39.02
Average loss over 5314663 tokens: 2.983, valid loss/error: 2.979 39.05
Average loss over 5320671 tokens: 2.976, valid loss/error: 2.979 38.99
Average loss over 5321529 tokens: 2.984, valid loss/error: 2.980 39.01
Average loss over 5309608 tokens: 2.984, valid loss/error: 2.980 39.04
Average loss over 5331570 tokens: 2.985, valid loss/error: 2.979 39.01
Average loss over 5324301 tokens: 2.999, valid loss/error: 2.978 39.06
Average loss over 5314371 tokens: 2.988, valid loss/error: 2.978 38.99
Average loss over 5325052 tokens: 2.982, valid loss/error: 2.977 38.96
New best model saved
Average loss over 5327578 tokens: 2.991, valid loss/error: 2.977 38.91
New best model saved
Average loss over 5305841 tokens: 2.984, valid loss/error: 2.978 39.00
Average loss over 5317933 tokens: 2.984, valid loss/error: 2.976 38.98
New best model saved
Average loss over 5315077 tokens: 2.984, valid loss/error: 2.977 38.99
Average loss over 5320138 tokens: 2.985, valid loss/error: 2.979 39.01
Average loss over 5323542 tokens: 2.983, valid loss/error: 2.976 38.98
New best model saved
Average loss over 2978884 tokens: 2.982
Epoch: 4, train loss: 2.985, valid loss/error: 2.977 39.05
Average loss over 5318455 tokens: 2.980, valid loss/error: 2.977 39.09
Average loss over 5319540 tokens: 2.976, valid loss/error: 2.977 38.98
Average loss over 5328998 tokens: 2.977, valid loss/error: 2.977 38.99
Average loss over 5332725 tokens: 2.978, valid loss/error: 2.977 39.02
Average loss over 5322842 tokens: 2.982, valid loss/error: 2.976 38.96
Average loss over 5323095 tokens: 2.984, valid loss/error: 2.976 38.98
New best model saved
Average loss over 5310172 tokens: 2.977, valid loss/error: 2.977 38.93
Average loss over 5328626 tokens: 2.977, valid loss/error: 2.978 38.97
Average loss over 5317926 tokens: 2.974, valid loss/error: 2.976 38.91
New best model saved
Average loss over 5326542 tokens: 2.985, valid loss/error: 2.977 38.93
Average loss over 5315899 tokens: 2.980, valid loss/error: 2.976 38.89
New best model saved
Average loss over 5325779 tokens: 2.976, valid loss/error: 2.976 38.93
Average loss over 5322598 tokens: 2.974, valid loss/error: 2.978 38.97
Average loss over 5310488 tokens: 2.972, valid loss/error: 2.979 39.02
Average loss over 5327795 tokens: 2.973, valid loss/error: 2.974 38.87
New best model saved
Average loss over 5316146 tokens: 2.981, valid loss/error: 2.975 38.96
Average loss over 5328463 tokens: 2.982, valid loss/error: 2.976 38.94
Average loss over 5324644 tokens: 2.982, valid loss/error: 2.975 38.92
Average loss over 5317767 tokens: 2.970, valid loss/error: 2.973 38.89
New best model saved
Average loss over 5311375 tokens: 2.976, valid loss/error: 2.976 38.96
Average loss over 5315899 tokens: 2.973, valid loss/error: 2.973 38.91
New best model saved
Average loss over 5313728 tokens: 2.977, valid loss/error: 2.974 38.92
Average loss over 5306784 tokens: 2.980, valid loss/error: 2.973 38.91
New best model saved
Average loss over 5304442 tokens: 2.969, valid loss/error: 2.975 38.96
Average loss over 5320388 tokens: 2.979, valid loss/error: 2.973 38.88
Average loss over 2957515 tokens: 2.969
Epoch: 5, train loss: 2.977, valid loss/error: 2.974 38.93
Average loss over 5324840 tokens: 2.964, valid loss/error: 2.972 38.85
New best model saved
Average loss over 5328981 tokens: 2.977, valid loss/error: 2.973 38.86
Average loss over 5319753 tokens: 2.964, valid loss/error: 2.976 38.93
Average loss over 5315767 tokens: 2.973, valid loss/error: 2.974 38.92
Average loss over 5323821 tokens: 2.974, valid loss/error: 2.972 38.87
New best model saved
Average loss over 5309574 tokens: 2.977, valid loss/error: 2.973 38.93
Average loss over 5316733 tokens: 2.971, valid loss/error: 2.974 38.90
Average loss over 5322695 tokens: 2.970, valid loss/error: 2.973 38.90
Average loss over 5319216 tokens: 2.967, valid loss/error: 2.976 38.99
Average loss over 5323923 tokens: 2.971, valid loss/error: 2.975 38.97
Average loss over 5319882 tokens: 2.975, valid loss/error: 2.974 38.94
Average loss over 5332770 tokens: 2.974, valid loss/error: 2.973 38.90
Average loss over 5323715 tokens: 2.967, valid loss/error: 2.974 38.92
Average loss over 5327037 tokens: 2.970, valid loss/error: 2.974 38.91
Average loss over 5319691 tokens: 2.968, valid loss/error: 2.972 38.88
New best model saved
Average loss over 5320803 tokens: 2.967, valid loss/error: 2.972 38.93
Average loss over 5315697 tokens: 2.968, valid loss/error: 2.973 38.96
Average loss over 5301793 tokens: 2.965, valid loss/error: 2.973 38.90
Average loss over 5322904 tokens: 2.968, valid loss/error: 2.973 38.93
Average loss over 5308338 tokens: 2.971, valid loss/error: 2.972 38.95
Average loss over 5320029 tokens: 2.973, valid loss/error: 2.973 38.90
Average loss over 5313693 tokens: 2.977, valid loss/error: 2.973 38.88
Average loss over 5325384 tokens: 2.975, valid loss/error: 2.972 38.92
Average loss over 5314067 tokens: 2.967, valid loss/error: 2.974 38.92
Average loss over 5307584 tokens: 2.967, valid loss/error: 2.973 38.94
Average loss over 2969941 tokens: 2.970
Epoch: 6, train loss: 2.970, valid loss/error: 2.971 38.86
New best model saved
Average loss over 5307893 tokens: 2.964, valid loss/error: 2.973 38.91
Average loss over 5326893 tokens: 2.965, valid loss/error: 2.972 38.93
Average loss over 5318298 tokens: 2.969, valid loss/error: 2.973 38.94
Average loss over 5315310 tokens: 2.966, valid loss/error: 2.973 38.91
Average loss over 5313292 tokens: 2.963, valid loss/error: 2.973 38.93
Average loss over 5310003 tokens: 2.966, valid loss/error: 2.973 38.89
Average loss over 5327534 tokens: 2.966, valid loss/error: 2.971 38.90
Average loss over 5318535 tokens: 2.961, valid loss/error: 2.972 38.84
New best model saved
Average loss over 5335508 tokens: 2.965, valid loss/error: 2.970 38.86
New best model saved
Average loss over 5326980 tokens: 2.956, valid loss/error: 2.970 38.91
New best model saved
Average loss over 5329562 tokens: 2.967, valid loss/error: 2.972 38.88
Average loss over 5330585 tokens: 2.972, valid loss/error: 2.973 38.95
Average loss over 5316576 tokens: 2.968, valid loss/error: 2.971 38.92
Average loss over 5313663 tokens: 2.967, valid loss/error: 2.972 38.91
Average loss over 5322974 tokens: 2.964, valid loss/error: 2.972 38.91
Average loss over 5321280 tokens: 2.963, valid loss/error: 2.973 38.94
Average loss over 5288033 tokens: 2.957, valid loss/error: 2.971 38.87
Average loss over 5308177 tokens: 2.957, valid loss/error: 2.972 38.88
Average loss over 5324093 tokens: 2.965, valid loss/error: 2.971 38.86
Average loss over 5322934 tokens: 2.964, valid loss/error: 2.971 38.92
Average loss over 5316729 tokens: 2.965, valid loss/error: 2.968 38.84
New best model saved
Average loss over 5315932 tokens: 2.969, valid loss/error: 2.970 38.90
Average loss over 5324542 tokens: 2.966, valid loss/error: 2.969 38.89
Average loss over 5310304 tokens: 2.962, valid loss/error: 2.969 38.90
Average loss over 5330317 tokens: 2.960, valid loss/error: 2.971 38.87
Average loss over 2972684 tokens: 2.966
Epoch: 7, train loss: 2.964, valid loss/error: 2.971 38.85
Average loss over 5337102 tokens: 2.954, valid loss/error: 2.971 38.81
New best model saved
Average loss over 5315491 tokens: 2.951, valid loss/error: 2.970 38.92
Average loss over 5326214 tokens: 2.959, valid loss/error: 2.970 38.91
Average loss over 5315654 tokens: 2.957, valid loss/error: 2.968 38.89
New best model saved
Average loss over 5307250 tokens: 2.954, valid loss/error: 2.970 38.92
Average loss over 5331202 tokens: 2.962, valid loss/error: 2.969 38.87
Average loss over 5312972 tokens: 2.955, valid loss/error: 2.971 38.88
Average loss over 5322541 tokens: 2.960, valid loss/error: 2.970 38.90
Average loss over 5324676 tokens: 2.956, valid loss/error: 2.972 38.94
Average loss over 5315033 tokens: 2.960, valid loss/error: 2.970 38.89
Average loss over 5327478 tokens: 2.960, valid loss/error: 2.970 38.88
Average loss over 5333147 tokens: 2.960, valid loss/error: 2.970 38.83
Average loss over 5318258 tokens: 2.954, valid loss/error: 2.970 38.89
Average loss over 5318495 tokens: 2.959, valid loss/error: 2.970 38.84
Average loss over 5325114 tokens: 2.962, valid loss/error: 2.969 38.84
Average loss over 5329742 tokens: 2.965, valid loss/error: 2.970 38.88
Average loss over 5309867 tokens: 2.958, valid loss/error: 2.970 38.87
Average loss over 5325223 tokens: 2.967, valid loss/error: 2.968 38.82
Average loss over 5309697 tokens: 2.956, valid loss/error: 2.970 38.85
Average loss over 5313743 tokens: 2.964, valid loss/error: 2.968 38.85
New best model saved
Average loss over 5324496 tokens: 2.969, valid loss/error: 2.968 38.81
New best model saved
Average loss over 5303898 tokens: 2.956, valid loss/error: 2.969 38.88
Average loss over 5312906 tokens: 2.961, valid loss/error: 2.969 38.87
Average loss over 5294681 tokens: 2.956, valid loss/error: 2.970 38.79
New best model saved
Average loss over 5322798 tokens: 2.962, valid loss/error: 2.969 38.81
Average loss over 2970953 tokens: 2.966
Epoch: 8, train loss: 2.959, valid loss/error: 2.968 38.84
Average loss over 5308828 tokens: 2.956, valid loss/error: 2.968 38.84
Average loss over 5311547 tokens: 2.952, valid loss/error: 2.970 38.86
Average loss over 5311714 tokens: 2.949, valid loss/error: 2.969 38.81
Average loss over 5327077 tokens: 2.952, valid loss/error: 2.969 38.84
Average loss over 5331187 tokens: 2.959, valid loss/error: 2.969 38.85
Average loss over 5305287 tokens: 2.952, valid loss/error: 2.970 38.85
Average loss over 5314925 tokens: 2.953, valid loss/error: 2.970 38.83
Average loss over 5333655 tokens: 2.955, valid loss/error: 2.970 38.80
Average loss over 5325141 tokens: 2.967, valid loss/error: 2.968 38.81
Average loss over 5320878 tokens: 2.955, valid loss/error: 2.968 38.84
New best model saved
Average loss over 5307609 tokens: 2.948, valid loss/error: 2.969 38.89
Average loss over 5322071 tokens: 2.955, valid loss/error: 2.966 38.79
New best model saved
Average loss over 5332896 tokens: 2.957, valid loss/error: 2.969 38.89
Average loss over 5316581 tokens: 2.956, valid loss/error: 2.967 38.84
Average loss over 5305486 tokens: 2.945, valid loss/error: 2.970 38.88
Average loss over 5311407 tokens: 2.959, valid loss/error: 2.967 38.82
Average loss over 5313758 tokens: 2.954, valid loss/error: 2.969 38.85
Average loss over 5333825 tokens: 2.957, valid loss/error: 2.970 38.86
Average loss over 5318789 tokens: 2.951, valid loss/error: 2.967 38.81
Average loss over 5316587 tokens: 2.956, valid loss/error: 2.967 38.84
Average loss over 5317670 tokens: 2.953, valid loss/error: 2.968 38.79
Average loss over 5329340 tokens: 2.959, valid loss/error: 2.970 38.88
Average loss over 5337269 tokens: 2.957, valid loss/error: 2.969 38.88
Average loss over 5314178 tokens: 2.951, valid loss/error: 2.968 38.85
Average loss over 5312640 tokens: 2.953, valid loss/error: 2.970 38.87
Average loss over 2968286 tokens: 2.965
Epoch: 9, train loss: 2.955, valid loss/error: 2.969 38.84
Average loss over 5315706 tokens: 2.952, valid loss/error: 2.969 38.82
Average loss over 5321652 tokens: 2.952, valid loss/error: 2.967 38.83
Average loss over 5309929 tokens: 2.947, valid loss/error: 2.969 38.90
Average loss over 5320481 tokens: 2.954, valid loss/error: 2.970 38.85
Average loss over 5336700 tokens: 2.951, valid loss/error: 2.967 38.81
Average loss over 5314107 tokens: 2.949, valid loss/error: 2.968 38.86
Average loss over 5315602 tokens: 2.953, valid loss/error: 2.968 38.83
Average loss over 5308684 tokens: 2.953, valid loss/error: 2.968 38.81
Average loss over 5311464 tokens: 2.952, valid loss/error: 2.967 38.84
Average loss over 5315507 tokens: 2.952, valid loss/error: 2.968 38.83
Average loss over 5314314 tokens: 2.951, valid loss/error: 2.969 38.86
Average loss over 5311302 tokens: 2.944, valid loss/error: 2.967 38.81
Average loss over 5321920 tokens: 2.957, valid loss/error: 2.968 38.87
Average loss over 5329862 tokens: 2.956, valid loss/error: 2.967 38.81
Average loss over 5324569 tokens: 2.951, valid loss/error: 2.967 38.86
Average loss over 5315330 tokens: 2.951, valid loss/error: 2.966 38.86
New best model saved
Average loss over 5319988 tokens: 2.953, valid loss/error: 2.967 38.82
Average loss over 5321806 tokens: 2.955, valid loss/error: 2.970 38.87
Average loss over 5318667 tokens: 2.945, valid loss/error: 2.969 38.83
Average loss over 5319656 tokens: 2.948, valid loss/error: 2.969 38.85
Average loss over 5332481 tokens: 2.948, valid loss/error: 2.968 38.87
Average loss over 5323642 tokens: 2.948, valid loss/error: 2.968 38.85
Average loss over 5320900 tokens: 2.946, valid loss/error: 2.970 38.89
Average loss over 5314179 tokens: 2.949, valid loss/error: 2.968 38.82
Average loss over 5322048 tokens: 2.946, valid loss/error: 2.967 38.79
Average loss over 2968135 tokens: 2.946
Epoch: 10, train loss: 2.950, valid loss/error: 2.968 38.82
Average loss over 5320674 tokens: 2.945, valid loss/error: 2.969 38.88
Average loss over 5320641 tokens: 2.944, valid loss/error: 2.967 38.84
Average loss over 5309635 tokens: 2.943, valid loss/error: 2.968 38.86
Average loss over 5302022 tokens: 2.941, valid loss/error: 2.968 38.87
Average loss over 5327367 tokens: 2.943, valid loss/error: 2.966 38.78
New best model saved
Average loss over 5323029 tokens: 2.944, valid loss/error: 2.969 38.78
New best model saved
Average loss over 5295357 tokens: 2.941, valid loss/error: 2.967 38.83
Average loss over 5315703 tokens: 2.949, valid loss/error: 2.967 38.77
New best model saved
Average loss over 5325923 tokens: 2.951, valid loss/error: 2.967 38.77
Average loss over 5329712 tokens: 2.944, valid loss/error: 2.965 38.79
New best model saved
Average loss over 5332990 tokens: 2.950, valid loss/error: 2.967 38.80
Average loss over 5313555 tokens: 2.943, valid loss/error: 2.968 38.82
Average loss over 5327075 tokens: 2.950, valid loss/error: 2.967 38.85
Average loss over 5317892 tokens: 2.943, valid loss/error: 2.965 38.76
New best model saved
Average loss over 5323192 tokens: 2.947, valid loss/error: 2.966 38.74
New best model saved
Average loss over 5332151 tokens: 2.948, valid loss/error: 2.967 38.80
Average loss over 5326788 tokens: 2.947, valid loss/error: 2.965 38.76
New best model saved
Average loss over 5324001 tokens: 2.949, valid loss/error: 2.966 38.75
Average loss over 5304664 tokens: 2.945, valid loss/error: 2.967 38.78
Average loss over 5309501 tokens: 2.939, valid loss/error: 2.966 38.81
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/zhen_low_finetune_train.py", line 324, in <module>
    terr, done_tokens, cur_checkid, remain_steps, _Dws = train(td, tl, vd, nvalid, optimizer, lrsch, mymodel, lossf, cuda_device, logger, done_tokens, multi_gpu, multi_gpu_optimizer, tokens_optm, batch_report, save_every, chkpf, state_holder, statesf, num_checkpoint, cur_checkid, report_eva, remain_steps, dss_ws > 0, i >= start_chkp_save, scaler)
  File "/home/yfguo/transformer_924/zhen_low_finetune_train.py", line 68, in train
    wd_add = ot.ne(pad_id).int().sum().item()
RuntimeError: CUDA error: unspecified launch failure
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python zhen_low_finetune_train.py
Design models with seed: 666666
Load pre-trained model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: 3.016 39.50
Average loss over 5303090 tokens: 3.067, valid loss/error: 3.016 39.54
New best model saved
Average loss over 5322777 tokens: 3.062, valid loss/error: 3.012 39.45
New best model saved
Average loss over 5324258 tokens: 3.053, valid loss/error: 3.009 39.45
New best model saved
Average loss over 5313106 tokens: 3.046, valid loss/error: 3.008 39.44
New best model saved
Average loss over 5314369 tokens: 3.045, valid loss/error: 3.006 39.39
New best model saved
Average loss over 5338577 tokens: 3.049, valid loss/error: 3.006 39.41
Average loss over 5314310 tokens: 3.039, valid loss/error: 3.005 39.43
New best model saved
Average loss over 5318183 tokens: 3.048, valid loss/error: 3.004 39.36
New best model saved
Average loss over 5309189 tokens: 3.039, valid loss/error: 3.003 39.34
New best model saved
Average loss over 5325803 tokens: 3.042, valid loss/error: 3.001 39.36
New best model saved
Average loss over 5316181 tokens: 3.031, valid loss/error: 3.000 39.35
New best model saved
Average loss over 5333065 tokens: 3.036, valid loss/error: 3.002 39.38
Average loss over 5307635 tokens: 3.023, valid loss/error: 3.000 39.33
New best model saved
Average loss over 5320940 tokens: 3.035, valid loss/error: 3.000 39.29
New best model saved
Average loss over 5329835 tokens: 3.031, valid loss/error: 3.000 39.26
New best model saved
Average loss over 5335385 tokens: 3.031, valid loss/error: 2.996 39.21
New best model saved
Average loss over 5322857 tokens: 3.028, valid loss/error: 2.996 39.24
Average loss over 5314844 tokens: 3.027, valid loss/error: 2.997 39.21
Average loss over 5312423 tokens: 3.026, valid loss/error: 2.996 39.23
Average loss over 5309776 tokens: 3.032, valid loss/error: 2.996 39.29
New best model saved
Average loss over 5306882 tokens: 3.023, valid loss/error: 2.995 39.21
New best model saved
Average loss over 5319686 tokens: 3.026, valid loss/error: 2.994 39.26
New best model saved
Average loss over 5314927 tokens: 3.013, valid loss/error: 2.993 39.24
New best model saved
Average loss over 5320516 tokens: 3.017, valid loss/error: 2.993 39.21
Average loss over 5325096 tokens: 3.026, valid loss/error: 2.992 39.17
New best model saved
Average loss over 2974921 tokens: 3.034
Epoch: 1, train loss: 3.036, valid loss/error: 2.991 39.18
New best model saved
Average loss over 5309512 tokens: 3.010, valid loss/error: 2.991 39.15
New best model saved
Average loss over 5308871 tokens: 3.015, valid loss/error: 2.991 39.16
New best model saved
Average loss over 5315160 tokens: 3.027, valid loss/error: 2.992 39.19
Average loss over 5312534 tokens: 3.012, valid loss/error: 2.992 39.20
Average loss over 5310695 tokens: 3.011, valid loss/error: 2.990 39.15
New best model saved
Average loss over 5312899 tokens: 3.006, valid loss/error: 2.992 39.15
Average loss over 5330549 tokens: 3.014, valid loss/error: 2.990 39.14
New best model saved
Average loss over 5321665 tokens: 3.013, valid loss/error: 2.991 39.17
Average loss over 5329596 tokens: 3.007, valid loss/error: 2.990 39.15
Average loss over 5327919 tokens: 3.007, valid loss/error: 2.989 39.15
New best model saved
Average loss over 5335588 tokens: 3.019, valid loss/error: 2.989 39.14
New best model saved
Average loss over 5321592 tokens: 3.016, valid loss/error: 2.989 39.17
Average loss over 5309872 tokens: 3.005, valid loss/error: 2.988 39.05
New best model saved
Average loss over 5323277 tokens: 3.001, valid loss/error: 2.988 39.14
Average loss over 5321698 tokens: 3.007, valid loss/error: 2.987 39.13
New best model saved
Average loss over 5319980 tokens: 3.006, valid loss/error: 2.989 39.16
Average loss over 5311772 tokens: 3.001, valid loss/error: 2.987 39.09
Average loss over 5315433 tokens: 3.007, valid loss/error: 2.986 39.09
New best model saved
Average loss over 5325367 tokens: 3.015, valid loss/error: 2.987 39.15
Average loss over 5321072 tokens: 3.006, valid loss/error: 2.986 39.15
New best model saved
Average loss over 5316261 tokens: 3.014, valid loss/error: 2.987 39.15
Average loss over 5323942 tokens: 3.007, valid loss/error: 2.986 39.10
New best model saved
Average loss over 5317620 tokens: 3.010, valid loss/error: 2.986 39.12
Average loss over 5314976 tokens: 2.999, valid loss/error: 2.987 39.13
Average loss over 5320636 tokens: 3.008, valid loss/error: 2.985 39.15
New best model saved
Average loss over 2970145 tokens: 3.012
Epoch: 2, train loss: 3.010, valid loss/error: 2.985 39.13
New best model saved
Average loss over 5336350 tokens: 3.006, valid loss/error: 2.986 39.13
Average loss over 5329922 tokens: 2.998, valid loss/error: 2.986 39.13
Average loss over 5308538 tokens: 2.999, valid loss/error: 2.985 39.09
Average loss over 5339116 tokens: 3.008, valid loss/error: 2.984 39.10
New best model saved
Average loss over 5318204 tokens: 2.992, valid loss/error: 2.984 39.10
Average loss over 5318629 tokens: 2.995, valid loss/error: 2.983 39.08
New best model saved
Average loss over 5333138 tokens: 3.001, valid loss/error: 2.983 39.11
New best model saved
Average loss over 5327195 tokens: 3.006, valid loss/error: 2.982 39.06
New best model saved
Average loss over 5309238 tokens: 2.994, valid loss/error: 2.983 39.07
Average loss over 5314698 tokens: 3.000, valid loss/error: 2.982 39.05
Average loss over 5310387 tokens: 2.988, valid loss/error: 2.984 39.06
Average loss over 5311394 tokens: 2.996, valid loss/error: 2.983 39.02
New best model saved
Average loss over 5319894 tokens: 3.001, valid loss/error: 2.983 39.05
Average loss over 5317260 tokens: 2.996, valid loss/error: 2.983 39.06
Average loss over 5312823 tokens: 2.991, valid loss/error: 2.983 39.06
Average loss over 5335745 tokens: 2.999, valid loss/error: 2.982 39.04
Average loss over 5325039 tokens: 2.991, valid loss/error: 2.981 39.00
New best model saved
Average loss over 5317420 tokens: 2.992, valid loss/error: 2.981 39.03
New best model saved
Average loss over 5306307 tokens: 2.994, valid loss/error: 2.984 39.05
Average loss over 5331930 tokens: 2.995, valid loss/error: 2.981 39.02
New best model saved
Average loss over 5308426 tokens: 2.998, valid loss/error: 2.983 39.04
Average loss over 5318294 tokens: 2.990, valid loss/error: 2.983 39.06
Average loss over 5312619 tokens: 2.987, valid loss/error: 2.981 39.05
Average loss over 5312143 tokens: 2.987, valid loss/error: 2.982 39.06
Average loss over 5313011 tokens: 2.991, valid loss/error: 2.980 39.03
New best model saved
Average loss over 2960911 tokens: 2.989
Epoch: 3, train loss: 2.996, valid loss/error: 2.982 39.05
Average loss over 5316456 tokens: 2.995, valid loss/error: 2.982 39.04
Average loss over 5334862 tokens: 2.988, valid loss/error: 2.981 39.01
Average loss over 5302814 tokens: 2.987, valid loss/error: 2.980 39.00
New best model saved
Average loss over 5320974 tokens: 2.990, valid loss/error: 2.981 39.03
Average loss over 5308646 tokens: 2.986, valid loss/error: 2.981 39.08
Average loss over 5318862 tokens: 2.983, valid loss/error: 2.979 39.00
New best model saved
Average loss over 5313400 tokens: 2.991, valid loss/error: 2.978 38.96
New best model saved
Average loss over 5303903 tokens: 2.975, valid loss/error: 2.979 39.00
Average loss over 5331471 tokens: 2.978, valid loss/error: 2.980 38.99
Average loss over 5324000 tokens: 2.985, valid loss/error: 2.979 39.02
Average loss over 5322485 tokens: 2.987, valid loss/error: 2.981 39.02
Average loss over 5314663 tokens: 2.983, valid loss/error: 2.979 39.05
Average loss over 5320671 tokens: 2.976, valid loss/error: 2.979 38.99
Average loss over 5321529 tokens: 2.984, valid loss/error: 2.980 39.01
Average loss over 5309608 tokens: 2.984, valid loss/error: 2.980 39.04
Average loss over 5331570 tokens: 2.985, valid loss/error: 2.979 39.01
Average loss over 5324301 tokens: 2.999, valid loss/error: 2.978 39.06
Average loss over 5314371 tokens: 2.988, valid loss/error: 2.978 38.99
Average loss over 5325052 tokens: 2.982, valid loss/error: 2.977 38.96
New best model saved
Average loss over 5327578 tokens: 2.991, valid loss/error: 2.977 38.91
New best model saved
Average loss over 5305841 tokens: 2.984, valid loss/error: 2.978 39.00
Average loss over 5317933 tokens: 2.984, valid loss/error: 2.976 38.98
New best model saved
Average loss over 5315077 tokens: 2.984, valid loss/error: 2.977 38.99
Average loss over 5320138 tokens: 2.985, valid loss/error: 2.979 39.01
Average loss over 5323542 tokens: 2.983, valid loss/error: 2.976 38.98
New best model saved
Average loss over 2978884 tokens: 2.982
Epoch: 4, train loss: 2.985, valid loss/error: 2.977 39.05
Average loss over 5318455 tokens: 2.980, valid loss/error: 2.977 39.09
Average loss over 5319540 tokens: 2.976, valid loss/error: 2.977 38.98
Average loss over 5328998 tokens: 2.977, valid loss/error: 2.977 38.99
Average loss over 5332725 tokens: 2.978, valid loss/error: 2.977 39.02
Average loss over 5322842 tokens: 2.982, valid loss/error: 2.976 38.96
Average loss over 5323095 tokens: 2.984, valid loss/error: 2.976 38.98
New best model saved
Average loss over 5310172 tokens: 2.977, valid loss/error: 2.977 38.93
Average loss over 5328626 tokens: 2.977, valid loss/error: 2.978 38.97
Average loss over 5317926 tokens: 2.974, valid loss/error: 2.976 38.91
New best model saved
Average loss over 5326542 tokens: 2.985, valid loss/error: 2.977 38.93
Average loss over 5315899 tokens: 2.980, valid loss/error: 2.976 38.89
New best model saved
Average loss over 5325779 tokens: 2.976, valid loss/error: 2.976 38.93
Average loss over 5322598 tokens: 2.974, valid loss/error: 2.978 38.97
Average loss over 5310488 tokens: 2.972, valid loss/error: 2.979 39.02
Average loss over 5327795 tokens: 2.973, valid loss/error: 2.974 38.87
New best model saved
Average loss over 5316146 tokens: 2.981, valid loss/error: 2.975 38.96
Average loss over 5328463 tokens: 2.982, valid loss/error: 2.976 38.94
Average loss over 5324644 tokens: 2.982, valid loss/error: 2.975 38.92
Average loss over 5317767 tokens: 2.970, valid loss/error: 2.973 38.89
New best model saved
Average loss over 5311375 tokens: 2.976, valid loss/error: 2.976 38.96
Average loss over 5315899 tokens: 2.973, valid loss/error: 2.973 38.91
New best model saved
Average loss over 5313728 tokens: 2.977, valid loss/error: 2.974 38.92
Average loss over 5306784 tokens: 2.980, valid loss/error: 2.973 38.91
New best model saved
Average loss over 5304442 tokens: 2.969, valid loss/error: 2.975 38.96
Average loss over 5320388 tokens: 2.979, valid loss/error: 2.973 38.88
Average loss over 2957515 tokens: 2.969
Epoch: 5, train loss: 2.977, valid loss/error: 2.974 38.93
Average loss over 5324840 tokens: 2.964, valid loss/error: 2.972 38.85
New best model saved
Average loss over 5328981 tokens: 2.977, valid loss/error: 2.973 38.86
Average loss over 5319753 tokens: 2.964, valid loss/error: 2.976 38.93
Average loss over 5315767 tokens: 2.973, valid loss/error: 2.974 38.92
Average loss over 5323821 tokens: 2.974, valid loss/error: 2.972 38.87
New best model saved
Average loss over 5309574 tokens: 2.977, valid loss/error: 2.973 38.93
Average loss over 5316733 tokens: 2.971, valid loss/error: 2.974 38.90
Average loss over 5322695 tokens: 2.970, valid loss/error: 2.973 38.90
Average loss over 5319216 tokens: 2.967, valid loss/error: 2.976 38.99
Average loss over 5323923 tokens: 2.971, valid loss/error: 2.975 38.97
Average loss over 5319882 tokens: 2.975, valid loss/error: 2.974 38.94
Average loss over 5332770 tokens: 2.974, valid loss/error: 2.973 38.90
Average loss over 5323715 tokens: 2.967, valid loss/error: 2.974 38.92
Average loss over 5327037 tokens: 2.970, valid loss/error: 2.974 38.91
Average loss over 5319691 tokens: 2.968, valid loss/error: 2.972 38.88
New best model saved
Average loss over 5320803 tokens: 2.967, valid loss/error: 2.972 38.93
Average loss over 5315697 tokens: 2.968, valid loss/error: 2.973 38.96
Average loss over 5301793 tokens: 2.965, valid loss/error: 2.973 38.90
Average loss over 5322904 tokens: 2.968, valid loss/error: 2.973 38.93
Average loss over 5308338 tokens: 2.971, valid loss/error: 2.972 38.95
Average loss over 5320029 tokens: 2.973, valid loss/error: 2.973 38.90
Average loss over 5313693 tokens: 2.977, valid loss/error: 2.973 38.88
Average loss over 5325384 tokens: 2.975, valid loss/error: 2.972 38.92
Average loss over 5314067 tokens: 2.967, valid loss/error: 2.974 38.92
Average loss over 5307584 tokens: 2.967, valid loss/error: 2.973 38.94
Average loss over 2969941 tokens: 2.970
Epoch: 6, train loss: 2.970, valid loss/error: 2.971 38.86
New best model saved
Average loss over 5307893 tokens: 2.964, valid loss/error: 2.973 38.91
Average loss over 5326893 tokens: 2.965, valid loss/error: 2.972 38.93
Average loss over 5318298 tokens: 2.969, valid loss/error: 2.973 38.94
Average loss over 5315310 tokens: 2.966, valid loss/error: 2.973 38.91
Average loss over 5313292 tokens: 2.963, valid loss/error: 2.973 38.93
Average loss over 5310003 tokens: 2.966, valid loss/error: 2.973 38.89
Average loss over 5327534 tokens: 2.966, valid loss/error: 2.971 38.90
Average loss over 5318535 tokens: 2.961, valid loss/error: 2.972 38.84
New best model saved
Average loss over 5335508 tokens: 2.965, valid loss/error: 2.970 38.86
New best model saved
Average loss over 5326980 tokens: 2.956, valid loss/error: 2.970 38.91
New best model saved
Average loss over 5329562 tokens: 2.967, valid loss/error: 2.972 38.88
Average loss over 5330585 tokens: 2.972, valid loss/error: 2.973 38.95
Average loss over 5316576 tokens: 2.968, valid loss/error: 2.971 38.92
Average loss over 5313663 tokens: 2.967, valid loss/error: 2.972 38.91
Average loss over 5322974 tokens: 2.964, valid loss/error: 2.972 38.91
Average loss over 5321280 tokens: 2.963, valid loss/error: 2.973 38.94
Average loss over 5288033 tokens: 2.957, valid loss/error: 2.971 38.87
Average loss over 5308177 tokens: 2.957, valid loss/error: 2.972 38.88
Average loss over 5324093 tokens: 2.965, valid loss/error: 2.971 38.86
Average loss over 5322934 tokens: 2.964, valid loss/error: 2.971 38.92
Average loss over 5316729 tokens: 2.965, valid loss/error: 2.968 38.84
New best model saved
Average loss over 5315932 tokens: 2.969, valid loss/error: 2.970 38.90
Average loss over 5324542 tokens: 2.966, valid loss/error: 2.969 38.89
Average loss over 5310304 tokens: 2.962, valid loss/error: 2.969 38.90
Average loss over 5330317 tokens: 2.960, valid loss/error: 2.971 38.87
Average loss over 2972684 tokens: 2.966
Epoch: 7, train loss: 2.964, valid loss/error: 2.971 38.85
Average loss over 5337102 tokens: 2.954, valid loss/error: 2.971 38.81
New best model saved
Average loss over 5315491 tokens: 2.951, valid loss/error: 2.970 38.92
Average loss over 5326214 tokens: 2.959, valid loss/error: 2.970 38.91
Average loss over 5315654 tokens: 2.957, valid loss/error: 2.968 38.89
New best model saved
Average loss over 5307250 tokens: 2.954, valid loss/error: 2.970 38.92
Average loss over 5331202 tokens: 2.962, valid loss/error: 2.969 38.87
Average loss over 5312972 tokens: 2.955, valid loss/error: 2.971 38.88
Average loss over 5322541 tokens: 2.960, valid loss/error: 2.970 38.90
Average loss over 5324676 tokens: 2.956, valid loss/error: 2.972 38.94
Average loss over 5315033 tokens: 2.960, valid loss/error: 2.970 38.89
Average loss over 5327478 tokens: 2.960, valid loss/error: 2.970 38.88
Average loss over 5333147 tokens: 2.960, valid loss/error: 2.970 38.83
Average loss over 5318258 tokens: 2.954, valid loss/error: 2.970 38.89
Average loss over 5318495 tokens: 2.959, valid loss/error: 2.970 38.84
Average loss over 5325114 tokens: 2.962, valid loss/error: 2.969 38.84
Average loss over 5329742 tokens: 2.965, valid loss/error: 2.970 38.88
Average loss over 5309867 tokens: 2.958, valid loss/error: 2.970 38.87
Average loss over 5325223 tokens: 2.967, valid loss/error: 2.968 38.82
Average loss over 5309697 tokens: 2.956, valid loss/error: 2.970 38.84
Average loss over 5313743 tokens: 2.964, valid loss/error: 2.968 38.84
New best model saved
Average loss over 5324496 tokens: 2.969, valid loss/error: 2.968 38.79
New best model saved
Average loss over 5303898 tokens: 2.956, valid loss/error: 2.969 38.88
Average loss over 5312906 tokens: 2.961, valid loss/error: 2.969 38.86
Average loss over 5294681 tokens: 2.956, valid loss/error: 2.970 38.80
Average loss over 5322798 tokens: 2.962, valid loss/error: 2.969 38.80
Average loss over 2970953 tokens: 2.966
Epoch: 8, train loss: 2.959, valid loss/error: 2.968 38.84
Average loss over 5308828 tokens: 2.956, valid loss/error: 2.968 38.85
Average loss over 5311547 tokens: 2.952, valid loss/error: 2.970 38.86
Average loss over 5311714 tokens: 2.949, valid loss/error: 2.969 38.82
Average loss over 5327077 tokens: 2.952, valid loss/error: 2.969 38.84
Average loss over 5331187 tokens: 2.959, valid loss/error: 2.969 38.85
Average loss over 5305287 tokens: 2.952, valid loss/error: 2.970 38.85
Average loss over 5314925 tokens: 2.953, valid loss/error: 2.970 38.83
Average loss over 5333655 tokens: 2.955, valid loss/error: 2.970 38.82
Average loss over 5325141 tokens: 2.967, valid loss/error: 2.968 38.82
Average loss over 5320878 tokens: 2.955, valid loss/error: 2.968 38.84
New best model saved
Average loss over 5307609 tokens: 2.948, valid loss/error: 2.969 38.89
Average loss over 5322071 tokens: 2.955, valid loss/error: 2.967 38.80
New best model saved
Average loss over 5332896 tokens: 2.957, valid loss/error: 2.969 38.88
Average loss over 5316581 tokens: 2.956, valid loss/error: 2.967 38.84
Average loss over 5305486 tokens: 2.945, valid loss/error: 2.970 38.87
Average loss over 5311407 tokens: 2.959, valid loss/error: 2.967 38.82
Average loss over 5313758 tokens: 2.954, valid loss/error: 2.969 38.85
Average loss over 5333825 tokens: 2.957, valid loss/error: 2.970 38.85
Average loss over 5318789 tokens: 2.951, valid loss/error: 2.967 38.82
Average loss over 5316587 tokens: 2.956, valid loss/error: 2.967 38.85
Average loss over 5317670 tokens: 2.953, valid loss/error: 2.968 38.79
New best model saved
Average loss over 5329340 tokens: 2.959, valid loss/error: 2.970 38.88
Average loss over 5337269 tokens: 2.957, valid loss/error: 2.969 38.87
Average loss over 5314178 tokens: 2.951, valid loss/error: 2.968 38.86
Average loss over 5312640 tokens: 2.953, valid loss/error: 2.970 38.86
Average loss over 2968286 tokens: 2.965
Epoch: 9, train loss: 2.955, valid loss/error: 2.969 38.85
Average loss over 5315706 tokens: 2.952, valid loss/error: 2.969 38.82
Average loss over 5321652 tokens: 2.952, valid loss/error: 2.967 38.83
Average loss over 5309929 tokens: 2.947, valid loss/error: 2.969 38.90
Average loss over 5320481 tokens: 2.954, valid loss/error: 2.970 38.85
Average loss over 5336700 tokens: 2.951, valid loss/error: 2.967 38.82
Average loss over 5314107 tokens: 2.949, valid loss/error: 2.968 38.85
Average loss over 5315602 tokens: 2.953, valid loss/error: 2.968 38.82
Average loss over 5308684 tokens: 2.953, valid loss/error: 2.968 38.82
Average loss over 5311464 tokens: 2.952, valid loss/error: 2.967 38.84
Average loss over 5315507 tokens: 2.952, valid loss/error: 2.968 38.83
Average loss over 5314314 tokens: 2.951, valid loss/error: 2.969 38.85
Average loss over 5311302 tokens: 2.944, valid loss/error: 2.967 38.80
Average loss over 5321920 tokens: 2.957, valid loss/error: 2.967 38.87
Average loss over 5329862 tokens: 2.956, valid loss/error: 2.967 38.83
Average loss over 5324569 tokens: 2.951, valid loss/error: 2.967 38.87
Average loss over 5315330 tokens: 2.951, valid loss/error: 2.966 38.86
New best model saved
Average loss over 5319988 tokens: 2.953, valid loss/error: 2.967 38.81
Average loss over 5321806 tokens: 2.955, valid loss/error: 2.970 38.87
Average loss over 5318667 tokens: 2.945, valid loss/error: 2.968 38.82
Average loss over 5319656 tokens: 2.948, valid loss/error: 2.969 38.84
Average loss over 5332481 tokens: 2.948, valid loss/error: 2.968 38.85
Average loss over 5323642 tokens: 2.948, valid loss/error: 2.968 38.86
Average loss over 5320900 tokens: 2.946, valid loss/error: 2.970 38.88
Average loss over 5314179 tokens: 2.949, valid loss/error: 2.968 38.83
Average loss over 5322048 tokens: 2.946, valid loss/error: 2.967 38.80
Average loss over 2968135 tokens: 2.946
Epoch: 10, train loss: 2.950, valid loss/error: 2.968 38.82
Average loss over 5320674 tokens: 2.945, valid loss/error: 2.969 38.87
Average loss over 5320641 tokens: 2.944, valid loss/error: 2.967 38.84
Average loss over 5309635 tokens: 2.943, valid loss/error: 2.968 38.86
Average loss over 5302022 tokens: 2.941, valid loss/error: 2.968 38.87
Average loss over 5327367 tokens: 2.943, valid loss/error: 2.966 38.76
New best model saved
Average loss over 5323029 tokens: 2.944, valid loss/error: 2.969 38.77
Average loss over 5295357 tokens: 2.941, valid loss/error: 2.967 38.83
Average loss over 5315703 tokens: 2.949, valid loss/error: 2.967 38.77
Average loss over 5325923 tokens: 2.951, valid loss/error: 2.967 38.77
Average loss over 5329712 tokens: 2.944, valid loss/error: 2.965 38.79
New best model saved
Average loss over 5332990 tokens: 2.950, valid loss/error: 2.967 38.79
Average loss over 5313555 tokens: 2.943, valid loss/error: 2.968 38.81
Average loss over 5327075 tokens: 2.950, valid loss/error: 2.967 38.86
Average loss over 5317892 tokens: 2.943, valid loss/error: 2.965 38.75
New best model saved
Average loss over 5323192 tokens: 2.947, valid loss/error: 2.966 38.74
New best model saved
Average loss over 5332151 tokens: 2.948, valid loss/error: 2.967 38.79
Average loss over 5326788 tokens: 2.947, valid loss/error: 2.965 38.77
New best model saved
Average loss over 5324001 tokens: 2.949, valid loss/error: 2.966 38.75
Average loss over 5304664 tokens: 2.945, valid loss/error: 2.967 38.78
Average loss over 5309501 tokens: 2.939, valid loss/error: 2.966 38.80
Average loss over 5324280 tokens: 2.950, valid loss/error: 2.967 38.79
Average loss over 5322796 tokens: 2.959, valid loss/error: 2.966 38.80
Average loss over 5309027 tokens: 2.943, valid loss/error: 2.967 38.82
Average loss over 5313557 tokens: 2.950, valid loss/error: 2.967 38.82
Average loss over 5320774 tokens: 2.949, valid loss/error: 2.968 38.82
Average loss over 2976325 tokens: 2.949
Epoch: 11, train loss: 2.946, valid loss/error: 2.964 38.75
New best model saved
Average loss over 5317282 tokens: 2.939, valid loss/error: 2.967 38.75
Average loss over 5339825 tokens: 2.949, valid loss/error: 2.966 38.81
Average loss over 5321092 tokens: 2.945, valid loss/error: 2.967 38.83
Average loss over 5323242 tokens: 2.947, valid loss/error: 2.966 38.82
Average loss over 5313086 tokens: 2.940, valid loss/error: 2.966 38.85
Average loss over 5324306 tokens: 2.937, valid loss/error: 2.966 38.78
Average loss over 5317650 tokens: 2.943, valid loss/error: 2.966 38.82
Average loss over 5326887 tokens: 2.945, valid loss/error: 2.965 38.75
Average loss over 5316862 tokens: 2.941, valid loss/error: 2.967 38.79
Average loss over 5326827 tokens: 2.939, valid loss/error: 2.967 38.84
Average loss over 5317246 tokens: 2.938, valid loss/error: 2.966 38.80
Average loss over 5314575 tokens: 2.950, valid loss/error: 2.965 38.83
Average loss over 5314239 tokens: 2.943, valid loss/error: 2.967 38.83
Average loss over 5322209 tokens: 2.939, valid loss/error: 2.968 38.82
Average loss over 5332529 tokens: 2.948, valid loss/error: 2.965 38.79
Average loss over 5299782 tokens: 2.938, valid loss/error: 2.967 38.80
Average loss over 5312468 tokens: 2.943, valid loss/error: 2.966 38.79
Average loss over 5324562 tokens: 2.946, valid loss/error: 2.966 38.77
Average loss over 5325145 tokens: 2.948, valid loss/error: 2.965 38.81
Average loss over 5327298 tokens: 2.943, valid loss/error: 2.965 38.83
Average loss over 5312501 tokens: 2.949, valid loss/error: 2.966 38.87
Average loss over 5311406 tokens: 2.945, valid loss/error: 2.965 38.84
Average loss over 5309821 tokens: 2.937, valid loss/error: 2.968 38.91
Average loss over 5309946 tokens: 2.943, valid loss/error: 2.965 38.81
Average loss over 5323739 tokens: 2.943, valid loss/error: 2.967 38.84
Average loss over 2964106 tokens: 2.935
Epoch: 12, train loss: 2.943, valid loss/error: 2.967 38.86
Average loss over 5319772 tokens: 2.936, valid loss/error: 2.967 38.84
Average loss over 5324974 tokens: 2.941, valid loss/error: 2.968 38.85
Average loss over 5321709 tokens: 2.935, valid loss/error: 2.968 38.88
Average loss over 5326613 tokens: 2.946, valid loss/error: 2.967 38.86
Average loss over 5312676 tokens: 2.934, valid loss/error: 2.969 38.85
Average loss over 5308011 tokens: 2.939, valid loss/error: 2.966 38.82
Average loss over 5310920 tokens: 2.937, valid loss/error: 2.968 38.90
Average loss over 5307148 tokens: 2.938, valid loss/error: 2.967 38.88
Average loss over 5317967 tokens: 2.934, valid loss/error: 2.966 38.84
Average loss over 5322635 tokens: 2.951, valid loss/error: 2.966 38.89
Average loss over 5317557 tokens: 2.943, valid loss/error: 2.965 38.81
Average loss over 5317526 tokens: 2.936, valid loss/error: 2.965 38.79
Average loss over 5319303 tokens: 2.932, valid loss/error: 2.966 38.82
Average loss over 5334140 tokens: 2.949, valid loss/error: 2.965 38.80
Average loss over 5324663 tokens: 2.942, valid loss/error: 2.964 38.76
New best model saved
Average loss over 5320680 tokens: 2.936, valid loss/error: 2.965 38.81
Average loss over 5323463 tokens: 2.940, valid loss/error: 2.966 38.87
Average loss over 5318247 tokens: 2.940, valid loss/error: 2.966 38.81
Average loss over 5323932 tokens: 2.944, valid loss/error: 2.965 38.76
Average loss over 5316831 tokens: 2.933, valid loss/error: 2.965 38.74
Average loss over 5323815 tokens: 2.943, valid loss/error: 2.966 38.79
Average loss over 5301739 tokens: 2.936, valid loss/error: 2.965 38.81
Average loss over 5322273 tokens: 2.937, valid loss/error: 2.966 38.81
Average loss over 5327868 tokens: 2.937, valid loss/error: 2.965 38.87
Average loss over 5308618 tokens: 2.944, valid loss/error: 2.962 38.71
New best model saved
Average loss over 2975551 tokens: 2.950
Epoch: 13, train loss: 2.940, valid loss/error: 2.964 38.76
Average loss over 5325321 tokens: 2.938, valid loss/error: 2.965 38.74
Average loss over 5311730 tokens: 2.929, valid loss/error: 2.965 38.76
Average loss over 5320588 tokens: 2.931, valid loss/error: 2.967 38.84
Average loss over 5325071 tokens: 2.936, valid loss/error: 2.967 38.84
Average loss over 5304543 tokens: 2.935, valid loss/error: 2.965 38.80
Average loss over 5323811 tokens: 2.940, valid loss/error: 2.966 38.82
Average loss over 5323842 tokens: 2.939, valid loss/error: 2.966 38.77
Average loss over 5328802 tokens: 2.947, valid loss/error: 2.965 38.79
Average loss over 5306817 tokens: 2.933, valid loss/error: 2.965 38.81
Average loss over 5318676 tokens: 2.934, valid loss/error: 2.965 38.77
Average loss over 5313118 tokens: 2.937, valid loss/error: 2.964 38.79
Average loss over 5322267 tokens: 2.934, valid loss/error: 2.966 38.80
Average loss over 5313049 tokens: 2.934, valid loss/error: 2.965 38.71
Average loss over 5319364 tokens: 2.934, valid loss/error: 2.965 38.75
Average loss over 5305058 tokens: 2.938, valid loss/error: 2.966 38.79
Average loss over 5321492 tokens: 2.938, valid loss/error: 2.967 38.79
Average loss over 5330002 tokens: 2.932, valid loss/error: 2.966 38.77
Average loss over 5328305 tokens: 2.941, valid loss/error: 2.966 38.79
Average loss over 5309206 tokens: 2.941, valid loss/error: 2.968 38.87
Average loss over 5327445 tokens: 2.937, valid loss/error: 2.966 38.81
Average loss over 5318577 tokens: 2.938, valid loss/error: 2.965 38.79
Average loss over 5318753 tokens: 2.930, valid loss/error: 2.966 38.81
Average loss over 5320985 tokens: 2.942, valid loss/error: 2.965 38.79
Average loss over 5314782 tokens: 2.940, valid loss/error: 2.965 38.83
Average loss over 5314945 tokens: 2.936, valid loss/error: 2.965 38.82
Average loss over 2982082 tokens: 2.934
Epoch: 14, train loss: 2.936, valid loss/error: 2.964 38.79
Average loss over 5310190 tokens: 2.923, valid loss/error: 2.967 38.81
Average loss over 5318051 tokens: 2.929, valid loss/error: 2.965 38.82
Average loss over 5319801 tokens: 2.926, valid loss/error: 2.963 38.83
Average loss over 5327313 tokens: 2.931, valid loss/error: 2.965 38.82
Average loss over 5313578 tokens: 2.932, valid loss/error: 2.968 38.88
Average loss over 5300326 tokens: 2.928, valid loss/error: 2.965 38.84
Average loss over 5313340 tokens: 2.935, valid loss/error: 2.965 38.75
Average loss over 5315739 tokens: 2.924, valid loss/error: 2.967 38.79
Average loss over 5311995 tokens: 2.934, valid loss/error: 2.963 38.74
Average loss over 5305106 tokens: 2.932, valid loss/error: 2.966 38.85
Average loss over 5326561 tokens: 2.932, valid loss/error: 2.967 38.87
Average loss over 5316872 tokens: 2.935, valid loss/error: 2.966 38.82
Average loss over 5324370 tokens: 2.930, valid loss/error: 2.964 38.78
Average loss over 5334290 tokens: 2.935, valid loss/error: 2.964 38.80
Average loss over 5329794 tokens: 2.941, valid loss/error: 2.964 38.79
Average loss over 5314471 tokens: 2.931, valid loss/error: 2.964 38.84
Average loss over 5331697 tokens: 2.940, valid loss/error: 2.964 38.87
Average loss over 5323773 tokens: 2.946, valid loss/error: 2.966 38.83
Average loss over 5325198 tokens: 2.926, valid loss/error: 2.965 38.82
Average loss over 5307067 tokens: 2.936, valid loss/error: 2.965 38.76
Average loss over 5305804 tokens: 2.931, valid loss/error: 2.965 38.76
Average loss over 5334202 tokens: 2.941, valid loss/error: 2.964 38.79
Average loss over 5318448 tokens: 2.941, valid loss/error: 2.964 38.76
Average loss over 5324368 tokens: 2.938, valid loss/error: 2.966 38.83
Average loss over 5320124 tokens: 2.935, valid loss/error: 2.964 38.80
Average loss over 2976153 tokens: 2.942
Epoch: 15, train loss: 2.934, valid loss/error: 2.964 38.80
Average loss over 5316820 tokens: 2.928, valid loss/error: 2.965 38.78
Average loss over 5329633 tokens: 2.918, valid loss/error: 2.964 38.72
Average loss over 5308550 tokens: 2.927, valid loss/error: 2.964 38.75
Average loss over 5297274 tokens: 2.927, valid loss/error: 2.965 38.80
Average loss over 5320781 tokens: 2.934, valid loss/error: 2.965 38.84
Average loss over 5338882 tokens: 2.934, valid loss/error: 2.965 38.84
Average loss over 5315394 tokens: 2.928, valid loss/error: 2.965 38.83
Average loss over 5314836 tokens: 2.933, valid loss/error: 2.966 38.82
Average loss over 5313671 tokens: 2.934, valid loss/error: 2.966 38.85
Average loss over 5305578 tokens: 2.933, valid loss/error: 2.967 38.84
Average loss over 5313924 tokens: 2.926, valid loss/error: 2.966 38.80
Average loss over 5318892 tokens: 2.927, valid loss/error: 2.966 38.83
Average loss over 5309337 tokens: 2.928, valid loss/error: 2.964 38.75
Average loss over 5329791 tokens: 2.928, valid loss/error: 2.965 38.88
Average loss over 5328273 tokens: 2.923, valid loss/error: 2.965 38.85
Average loss over 5318341 tokens: 2.925, valid loss/error: 2.963 38.76
Average loss over 5327093 tokens: 2.938, valid loss/error: 2.965 38.81
Average loss over 5312766 tokens: 2.932, valid loss/error: 2.965 38.80
Average loss over 5329926 tokens: 2.935, valid loss/error: 2.965 38.81
Average loss over 5338857 tokens: 2.937, valid loss/error: 2.964 38.76
Average loss over 5327148 tokens: 2.932, valid loss/error: 2.966 38.84
Average loss over 5315853 tokens: 2.931, valid loss/error: 2.964 38.80
Average loss over 5322669 tokens: 2.940, valid loss/error: 2.963 38.82
Average loss over 5307774 tokens: 2.935, valid loss/error: 2.963 38.81
Average loss over 5316338 tokens: 2.934, valid loss/error: 2.964 38.84
Average loss over 2970230 tokens: 2.935
Epoch: 16, train loss: 2.931, valid loss/error: 2.964 38.85
Average loss over 5316934 tokens: 2.923, valid loss/error: 2.964 38.78
Average loss over 5336270 tokens: 2.923, valid loss/error: 2.963 38.75
Average loss over 5325382 tokens: 2.934, valid loss/error: 2.965 38.81
Average loss over 5318982 tokens: 2.926, valid loss/error: 2.964 38.77
Average loss over 5324349 tokens: 2.928, valid loss/error: 2.966 38.78
Average loss over 5319080 tokens: 2.927, valid loss/error: 2.964 38.76
Average loss over 5317575 tokens: 2.927, valid loss/error: 2.965 38.78
Average loss over 5323664 tokens: 2.928, valid loss/error: 2.966 38.79
Average loss over 5325942 tokens: 2.936, valid loss/error: 2.965 38.81
Average loss over 5318601 tokens: 2.933, valid loss/error: 2.964 38.77
Average loss over 5311791 tokens: 2.926, valid loss/error: 2.965 38.77
Average loss over 5319450 tokens: 2.926, valid loss/error: 2.964 38.75
Average loss over 5324823 tokens: 2.931, valid loss/error: 2.963 38.71
Average loss over 5309550 tokens: 2.929, valid loss/error: 2.964 38.78
Average loss over 5313419 tokens: 2.928, valid loss/error: 2.965 38.77
Average loss over 5319583 tokens: 2.931, valid loss/error: 2.965 38.81
Average loss over 5318678 tokens: 2.930, valid loss/error: 2.966 38.84
Average loss over 5324314 tokens: 2.927, valid loss/error: 2.966 38.75
Average loss over 5314792 tokens: 2.928, valid loss/error: 2.963 38.77
Average loss over 5336083 tokens: 2.935, valid loss/error: 2.963 38.80
Average loss over 5320475 tokens: 2.929, valid loss/error: 2.963 38.75
Average loss over 5308804 tokens: 2.923, valid loss/error: 2.967 38.81
Average loss over 5299550 tokens: 2.926, valid loss/error: 2.966 38.80
Average loss over 5324590 tokens: 2.928, valid loss/error: 2.965 38.73
Average loss over 5306579 tokens: 2.921, valid loss/error: 2.963 38.75
Average loss over 2969371 tokens: 2.925
Epoch: 17, train loss: 2.928, valid loss/error: 2.966 38.79
Average loss over 5320749 tokens: 2.921, valid loss/error: 2.963 38.77
Average loss over 5320551 tokens: 2.924, valid loss/error: 2.967 38.86
Average loss over 5333191 tokens: 2.923, valid loss/error: 2.965 38.82
Average loss over 5323818 tokens: 2.925, valid loss/error: 2.962 38.69
New best model saved
Average loss over 5324297 tokens: 2.922, valid loss/error: 2.964 38.75
Average loss over 5314843 tokens: 2.923, valid loss/error: 2.965 38.82
Average loss over 5320912 tokens: 2.924, valid loss/error: 2.964 38.82
Average loss over 5323563 tokens: 2.927, valid loss/error: 2.965 38.84
Average loss over 5320047 tokens: 2.924, valid loss/error: 2.964 38.76
Average loss over 5320790 tokens: 2.923, valid loss/error: 2.963 38.75
Average loss over 5311059 tokens: 2.917, valid loss/error: 2.963 38.72
Average loss over 5332367 tokens: 2.933, valid loss/error: 2.964 38.74
Average loss over 5313956 tokens: 2.935, valid loss/error: 2.965 38.78
Average loss over 5312287 tokens: 2.926, valid loss/error: 2.963 38.73
Average loss over 5302425 tokens: 2.921, valid loss/error: 2.963 38.72
Average loss over 5323220 tokens: 2.934, valid loss/error: 2.962 38.74
Average loss over 5328295 tokens: 2.924, valid loss/error: 2.964 38.72
Average loss over 5314652 tokens: 2.927, valid loss/error: 2.962 38.72
Average loss over 5321517 tokens: 2.931, valid loss/error: 2.964 38.79
Average loss over 5312542 tokens: 2.935, valid loss/error: 2.965 38.79
Average loss over 5313446 tokens: 2.928, valid loss/error: 2.965 38.82
Average loss over 5312176 tokens: 2.926, valid loss/error: 2.966 38.84
Average loss over 5328147 tokens: 2.929, valid loss/error: 2.964 38.75
Average loss over 5320010 tokens: 2.929, valid loss/error: 2.965 38.76
Average loss over 5313768 tokens: 2.919, valid loss/error: 2.962 38.70
Average loss over 2966003 tokens: 2.914
Epoch: 18, train loss: 2.926, valid loss/error: 2.964 38.77
Average loss over 5315862 tokens: 2.920, valid loss/error: 2.963 38.74
Average loss over 5310291 tokens: 2.918, valid loss/error: 2.965 38.77
Average loss over 5313298 tokens: 2.917, valid loss/error: 2.965 38.80
Average loss over 5327740 tokens: 2.925, valid loss/error: 2.965 38.82
Average loss over 5328878 tokens: 2.921, valid loss/error: 2.963 38.71
Average loss over 5323223 tokens: 2.926, valid loss/error: 2.964 38.75
Average loss over 5327810 tokens: 2.926, valid loss/error: 2.964 38.72
Average loss over 5304797 tokens: 2.928, valid loss/error: 2.965 38.79
Average loss over 5321584 tokens: 2.916, valid loss/error: 2.965 38.71
Average loss over 5320038 tokens: 2.927, valid loss/error: 2.966 38.79
Average loss over 5315884 tokens: 2.927, valid loss/error: 2.965 38.77
Average loss over 5304818 tokens: 2.925, valid loss/error: 2.963 38.70
Average loss over 5329357 tokens: 2.926, valid loss/error: 2.966 38.74
Average loss over 5336157 tokens: 2.922, valid loss/error: 2.964 38.81
Average loss over 5318364 tokens: 2.922, valid loss/error: 2.964 38.78
Average loss over 5314424 tokens: 2.918, valid loss/error: 2.964 38.80
Average loss over 5308978 tokens: 2.924, valid loss/error: 2.963 38.74
Average loss over 5322703 tokens: 2.921, valid loss/error: 2.964 38.79
Average loss over 5303639 tokens: 2.923, valid loss/error: 2.964 38.82
Average loss over 5319553 tokens: 2.921, valid loss/error: 2.964 38.84
Average loss over 256235 tokens: 2.912
Epoch: 19, train loss: 2.923, valid loss/error: 2.965 38.85
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python sigle_zhen_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: -0.644 39.50
Average loss over 10885631 tokens: -0.580, valid loss/error: -1.267 39.51
New best model saved
Average loss over 10870723 tokens: -0.595, valid loss/error: -1.373 39.49
New best model saved
Average loss over 10889827 tokens: -0.606, valid loss/error: -1.590 39.50
New best model saved
Average loss over 10872848 tokens: -0.610, valid loss/error: -1.583 39.46
New best model saved
Average loss over 10870859 tokens: -0.613, valid loss/error: -1.763 39.44
New best model saved
task_zhen_single.sh: 第 6 行： 630560 段错误               （核心已转储） python sigle_zhen_latest_train_distill_sample.py
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python sigle_zhen_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: -0.644 39.50
Average loss over 10885631 tokens: -0.580, valid loss/error: -1.267 39.51
New best model saved
Average loss over 10870723 tokens: -0.595, valid loss/error: -1.373 39.49
New best model saved
Average loss over 10889827 tokens: -0.606, valid loss/error: -1.590 39.50
New best model saved
Average loss over 10872848 tokens: -0.610, valid loss/error: -1.583 39.46
New best model saved
Average loss over 10870859 tokens: -0.613, valid loss/error: -1.763 39.44
New best model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python sigle_zhen_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: -0.644 39.50
Average loss over 10885631 tokens: -0.580, valid loss/error: -1.267 39.51
New best model saved

Session terminated, killing shell... ...killed.
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python sigle_zhen_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: -0.644 39.50
Average loss over 10885631 tokens: -0.580, valid loss/error: -1.267 39.51
New best model saved

Session terminated, killing shell... ...killed.
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python sigle_zhen_latest_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
Init lr: 1e-05, Dev Loss/Error: -0.644 39.50
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python zhen502525_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_300k/std/eva_2.961_38.62.h5
Init lr: 1e-05, Dev Loss/Error: 4.444 39.50
Average loss over 10885631 tokens: -0.580, valid loss/error: -1.267 39.51
New best model saved
Average loss over 10808582 tokens: 2.167, valid loss/error: 4.122 39.32
New best model saved
Average loss over 10870723 tokens: -0.595, valid loss/error: -1.373 39.49
New best model saved
Average loss over 10889827 tokens: -0.606, valid loss/error: -1.590 39.50
New best model saved
Average loss over 10806961 tokens: 2.165, valid loss/error: 3.880 39.25
New best model saved
Average loss over 10872848 tokens: -0.610, valid loss/error: -1.583 39.46
New best model saved
Average loss over 10810156 tokens: 2.163, valid loss/error: 3.591 39.25
New best model saved
Average loss over 10870859 tokens: -0.613, valid loss/error: -1.763 39.44
New best model saved
Average loss over 10816446 tokens: 2.156, valid loss/error: 3.290 39.25
New best model saved
Average loss over 10884269 tokens: -0.614, valid loss/error: -1.904 39.43
New best model saved
Average loss over 10888426 tokens: -0.612, valid loss/error: -1.899 39.43
New best model saved
Average loss over 10816343 tokens: 2.151, valid loss/error: 3.034 39.23
New best model saved
Average loss over 10874869 tokens: -0.611, valid loss/error: -2.008 39.38
New best model saved
Average loss over 10797613 tokens: 2.147, valid loss/error: 2.771 39.18
New best model saved
Average loss over 10888412 tokens: -0.613, valid loss/error: -2.054 39.27
New best model saved
Average loss over 10816626 tokens: 2.148, valid loss/error: 2.580 39.18
New best model saved
Average loss over 10871150 tokens: -0.623, valid loss/error: -2.157 39.29
New best model saved
Average loss over 10896988 tokens: -0.615, valid loss/error: -2.144 39.33
Average loss over 10796812 tokens: 2.141, valid loss/error: 2.502 39.18
New best model saved
Average loss over 10858192 tokens: -0.623, valid loss/error: -2.079 39.36
Average loss over 10840754 tokens: 2.141, valid loss/error: 2.494 39.12
New best model saved
Average loss over 10890733 tokens: -0.619, valid loss/error: -2.085 39.39
Average loss over 10802299 tokens: 2.127, valid loss/error: 2.484 39.16
New best model saved
Average loss over 10876855 tokens: -0.618, valid loss/error: -2.190 39.41
New best model saved
Average loss over 10879629 tokens: -0.623, valid loss/error: -2.094 39.33
Average loss over 10825047 tokens: 2.136, valid loss/error: 2.479 39.11
New best model saved
Average loss over 10870315 tokens: -0.617, valid loss/error: -2.180 39.38
Average loss over 10797352 tokens: 2.128, valid loss/error: 2.494 39.12
Average loss over 10881883 tokens: -0.624, valid loss/error: -2.131 39.35
Average loss over 10814776 tokens: 2.128, valid loss/error: 2.477 39.12
New best model saved
Average loss over 10877089 tokens: -0.618, valid loss/error: -2.175 39.31
Average loss over 5411608 tokens: -0.625
Epoch: 1, train loss: -0.613, valid loss/error: -2.079 39.33
Average loss over 10809694 tokens: 2.137, valid loss/error: 2.487 39.10
New best model saved
Average loss over 10890336 tokens: -0.624, valid loss/error: -2.139 39.30
Average loss over 10879785 tokens: -0.623, valid loss/error: -2.208 39.27
New best model saved
Average loss over 10794463 tokens: 2.129, valid loss/error: 2.488 39.10
Average loss over 10870712 tokens: -0.626, valid loss/error: -2.212 39.33
New best model saved
Average loss over 10789810 tokens: 2.136, valid loss/error: 2.490 39.05
New best model saved
Average loss over 10893505 tokens: -0.629, valid loss/error: -2.105 39.24
New best model saved
Average loss over 10820009 tokens: 2.125, valid loss/error: 2.501 39.06
Average loss over 10890348 tokens: -0.622, valid loss/error: -2.105 39.31
Average loss over 10879838 tokens: -0.629, valid loss/error: -2.253 39.32
New best model saved
Average loss over 10806198 tokens: 2.132, valid loss/error: 2.463 39.00
New best model saved
Average loss over 5370836 tokens: 2.127
Epoch: 1, train loss: 2.142, valid loss/error: 2.488 39.00
New best model saved
Average loss over 10892707 tokens: -0.621, valid loss/error: -2.155 39.28
Average loss over 10868911 tokens: -0.622, valid loss/error: -2.080 39.30
Average loss over 10801229 tokens: 2.128, valid loss/error: 2.497 39.01
Average loss over 10877904 tokens: -0.627, valid loss/error: -2.130 39.30
Average loss over 10819566 tokens: 2.129, valid loss/error: 2.478 38.91
New best model saved
Average loss over 10900089 tokens: -0.630, valid loss/error: -2.140 39.22
New best model saved
Average loss over 10824944 tokens: 2.128, valid loss/error: 2.469 39.03
Average loss over 10861189 tokens: -0.628, valid loss/error: -2.354 39.24
New best model saved
Average loss over 10874924 tokens: -0.630, valid loss/error: -2.225 39.21
New best model saved
Average loss over 10822754 tokens: 2.119, valid loss/error: 2.487 39.01
Average loss over 10883941 tokens: -0.625, valid loss/error: -2.218 39.18
New best model saved
Average loss over 10817028 tokens: 2.126, valid loss/error: 2.495 39.01
Average loss over 10864938 tokens: -0.629, valid loss/error: -2.216 39.23
Average loss over 10785262 tokens: 2.119, valid loss/error: 2.479 38.98
Average loss over 10858991 tokens: -0.624, valid loss/error: -2.167 39.24
Average loss over 10881296 tokens: -0.623, valid loss/error: -2.235 39.27
Average loss over 10831335 tokens: 2.131, valid loss/error: 2.481 38.98
Average loss over 10893995 tokens: -0.623, valid loss/error: -2.391 39.20
New best model saved
Average loss over 10801283 tokens: 2.121, valid loss/error: 2.492 38.99
Average loss over 10874970 tokens: -0.625, valid loss/error: -2.279 39.20
Average loss over 5412373 tokens: -0.625
Epoch: 2, train loss: -0.626, valid loss/error: -2.140 39.22
Average loss over 10804507 tokens: 2.124, valid loss/error: 2.469 38.96
Average loss over 10885098 tokens: -0.633, valid loss/error: -2.257 39.22
Average loss over 10818620 tokens: 2.120, valid loss/error: 2.496 38.89
New best model saved
Average loss over 10888032 tokens: -0.626, valid loss/error: -2.207 39.18
Average loss over 10792841 tokens: 2.116, valid loss/error: 2.468 38.93
Average loss over 10888668 tokens: -0.629, valid loss/error: -2.254 39.19
Average loss over 10871815 tokens: -0.629, valid loss/error: -2.281 39.19
Average loss over 10809525 tokens: 2.118, valid loss/error: 2.453 38.85
New best model saved
Average loss over 10889339 tokens: -0.633, valid loss/error: -2.080 39.17
New best model saved
Average loss over 10805784 tokens: 2.122, valid loss/error: 2.470 38.91
Average loss over 10891052 tokens: -0.626, valid loss/error: -2.170 39.23
Average loss over 10816447 tokens: 2.121, valid loss/error: 2.473 38.91
Average loss over 10873507 tokens: -0.630, valid loss/error: -2.225 39.23
Average loss over 10865790 tokens: -0.628, valid loss/error: -2.392 39.21
New best model saved
Average loss over 10796909 tokens: 2.127, valid loss/error: 2.469 38.92
Average loss over 10879090 tokens: -0.635, valid loss/error: -2.098 39.13
New best model saved
Average loss over 10803434 tokens: 2.133, valid loss/error: 2.483 38.90
Average loss over 10889934 tokens: -0.630, valid loss/error: -2.184 39.18
Average loss over 10805676 tokens: 2.122, valid loss/error: 2.441 38.88
New best model saved
Average loss over 10886144 tokens: -0.633, valid loss/error: -2.206 39.16
Average loss over 10887658 tokens: -0.635, valid loss/error: -2.307 39.14
Average loss over 10813152 tokens: 2.127, valid loss/error: 2.477 38.86
Average loss over 5374709 tokens: 2.133
Epoch: 2, train loss: 2.124, valid loss/error: 2.476 38.87
Average loss over 10877114 tokens: -0.630, valid loss/error: -2.140 39.19
Average loss over 10865746 tokens: -0.633, valid loss/error: -2.122 39.17
Average loss over 10804421 tokens: 2.119, valid loss/error: 2.497 38.80
New best model saved
Average loss over 10877278 tokens: -0.625, valid loss/error: -2.256 39.21
Average loss over 10832172 tokens: 2.117, valid loss/error: 2.484 38.83
Average loss over 10879182 tokens: -0.634, valid loss/error: -2.285 39.17
Average loss over 10793396 tokens: 2.113, valid loss/error: 2.470 38.86
Average loss over 10875233 tokens: -0.631, valid loss/error: -2.289 39.14
Average loss over 10885576 tokens: -0.628, valid loss/error: -2.231 39.14
Average loss over 10799640 tokens: 2.120, valid loss/error: 2.455 38.86
Average loss over 5401682 tokens: -0.627
Epoch: 3, train loss: -0.630, valid loss/error: -2.172 39.14
Average loss over 10877251 tokens: -0.632, valid loss/error: -2.271 39.17
Average loss over 10821883 tokens: 2.112, valid loss/error: 2.476 38.91
Average loss over 10867985 tokens: -0.634, valid loss/error: -2.229 39.14
Average loss over 10806953 tokens: 2.122, valid loss/error: 2.476 38.87
Average loss over 10862893 tokens: -0.638, valid loss/error: -2.246 39.12
New best model saved
Average loss over 10807797 tokens: 2.116, valid loss/error: 2.474 38.85
Average loss over 10894638 tokens: -0.628, valid loss/error: -2.219 39.13
Average loss over 10888248 tokens: -0.635, valid loss/error: -2.238 39.13
Average loss over 10800200 tokens: 2.123, valid loss/error: 2.441 38.86
New best model saved
Average loss over 10877406 tokens: -0.634, valid loss/error: -2.159 39.15
Average loss over 10795634 tokens: 2.119, valid loss/error: 2.469 38.90
Average loss over 10876998 tokens: -0.633, valid loss/error: -2.227 39.13
Average loss over 10826078 tokens: 2.118, valid loss/error: 2.491 38.85
Average loss over 10902122 tokens: -0.635, valid loss/error: -2.242 39.13
Average loss over 10894445 tokens: -0.631, valid loss/error: -2.171 39.10
New best model saved
Average loss over 10806734 tokens: 2.120, valid loss/error: 2.474 38.85
Average loss over 10901001 tokens: -0.632, valid loss/error: -2.222 39.07
New best model saved
Average loss over 10809688 tokens: 2.112, valid loss/error: 2.441 38.89
Average loss over 10875629 tokens: -0.634, valid loss/error: -2.294 39.09
Average loss over 10787784 tokens: 2.119, valid loss/error: 2.469 38.87
Average loss over 10860344 tokens: -0.626, valid loss/error: -2.282 39.07
Average loss over 10871543 tokens: -0.639, valid loss/error: -2.268 39.09
Average loss over 10810998 tokens: 2.117, valid loss/error: 2.493 38.85
Average loss over 10863431 tokens: -0.635, valid loss/error: -2.211 39.04
New best model saved
Average loss over 10790846 tokens: 2.124, valid loss/error: 2.466 38.93
Average loss over 10880219 tokens: -0.635, valid loss/error: -2.342 39.08
Average loss over 10814190 tokens: 2.111, valid loss/error: 2.441 38.87
Average loss over 10885281 tokens: -0.631, valid loss/error: -2.317 39.12
Average loss over 10888195 tokens: -0.637, valid loss/error: -2.330 39.03
New best model saved
Average loss over 10804490 tokens: 2.120, valid loss/error: 2.469 38.84
Average loss over 10880920 tokens: -0.630, valid loss/error: -2.343 39.11
Average loss over 10824661 tokens: 2.117, valid loss/error: 2.459 38.89
Average loss over 5394959 tokens: -0.637
Epoch: 4, train loss: -0.633, valid loss/error: -2.336 39.07
Average loss over 5367837 tokens: 2.120
Epoch: 3, train loss: 2.118, valid loss/error: 2.455 38.87
Average loss over 10875692 tokens: -0.633, valid loss/error: -2.197 39.10
Average loss over 10814427 tokens: 2.115, valid loss/error: 2.450 38.86
Average loss over 10868798 tokens: -0.637, valid loss/error: -2.299 39.07
Average loss over 10886156 tokens: -0.636, valid loss/error: -2.288 39.10
Average loss over 10785395 tokens: 2.107, valid loss/error: 2.464 38.86
Average loss over 10872341 tokens: -0.634, valid loss/error: -2.388 39.03
Average loss over 10794437 tokens: 2.109, valid loss/error: 2.452 38.88
Average loss over 10872715 tokens: -0.637, valid loss/error: -2.331 39.09
Average loss over 10825887 tokens: 2.120, valid loss/error: 2.446 38.85
Average loss over 10885481 tokens: -0.633, valid loss/error: -2.379 39.03
New best model saved
Average loss over 10880294 tokens: -0.626, valid loss/error: -2.285 39.02
New best model saved
Average loss over 10806060 tokens: 2.106, valid loss/error: 2.462 38.89
Average loss over 10877104 tokens: -0.633, valid loss/error: -2.145 39.02
New best model saved
Average loss over 10821732 tokens: 2.119, valid loss/error: 2.463 38.80
Average loss over 10886972 tokens: -0.633, valid loss/error: -2.235 39.08
Average loss over 10789863 tokens: 2.109, valid loss/error: 2.461 38.83
Average loss over 10885465 tokens: -0.630, valid loss/error: -2.123 39.12
Average loss over 10876764 tokens: -0.642, valid loss/error: -2.228 39.05
Average loss over 10845472 tokens: 2.121, valid loss/error: 2.454 38.81
Average loss over 10892937 tokens: -0.634, valid loss/error: -2.285 39.02
New best model saved
Average loss over 10820110 tokens: 2.108, valid loss/error: 2.464 38.82
Average loss over 10887557 tokens: -0.640, valid loss/error: -2.304 39.08
Average loss over 10817478 tokens: 2.116, valid loss/error: 2.416 38.84
New best model saved
Average loss over 10871746 tokens: -0.640, valid loss/error: -2.387 39.09
Average loss over 10870965 tokens: -0.642, valid loss/error: -2.177 39.06
Average loss over 10820973 tokens: 2.103, valid loss/error: 2.454 38.81
Average loss over 10886821 tokens: -0.634, valid loss/error: -2.350 39.11
Average loss over 10790734 tokens: 2.115, valid loss/error: 2.449 38.82
Average loss over 10872954 tokens: -0.643, valid loss/error: -2.223 39.14
Average loss over 10884092 tokens: -0.639, valid loss/error: -2.188 39.07
Average loss over 10795810 tokens: 2.111, valid loss/error: 2.438 38.80
Average loss over 5407332 tokens: -0.639
Epoch: 5, train loss: -0.636, valid loss/error: -2.298 39.09
Average loss over 10806841 tokens: 2.111, valid loss/error: 2.428 38.85
Average loss over 10864083 tokens: -0.640, valid loss/error: -2.255 39.06
Average loss over 10871457 tokens: -0.637, valid loss/error: -2.425 39.11
New best model saved
Average loss over 10823330 tokens: 2.123, valid loss/error: 2.444 38.86
Average loss over 10874946 tokens: -0.641, valid loss/error: -2.422 39.00
New best model saved
Average loss over 10799916 tokens: 2.116, valid loss/error: 2.469 38.81
Average loss over 10865839 tokens: -0.635, valid loss/error: -2.305 39.11
Average loss over 10812575 tokens: 2.109, valid loss/error: 2.452 38.83
Average loss over 10871443 tokens: -0.636, valid loss/error: -2.267 39.08
Average loss over 10866263 tokens: -0.637, valid loss/error: -2.383 39.08
Average loss over 10815080 tokens: 2.116, valid loss/error: 2.434 38.84
Average loss over 5354064 tokens: 2.109
Epoch: 4, train loss: 2.113, valid loss/error: 2.437 38.75
New best model saved
Average loss over 10879527 tokens: -0.638, valid loss/error: -2.182 39.04
Average loss over 10879630 tokens: -0.645, valid loss/error: -2.399 39.10
Average loss over 10798325 tokens: 2.115, valid loss/error: 2.451 38.82
Average loss over 10896370 tokens: -0.630, valid loss/error: -2.278 39.04
Average loss over 10789076 tokens: 2.114, valid loss/error: 2.452 38.75
Average loss over 10873903 tokens: -0.639, valid loss/error: -2.201 39.13
Average loss over 10793084 tokens: 2.108, valid loss/error: 2.440 38.74
New best model saved
Average loss over 10878203 tokens: -0.642, valid loss/error: -2.301 39.09
Average loss over 10883185 tokens: -0.641, valid loss/error: -2.256 39.03
Average loss over 10802958 tokens: 2.110, valid loss/error: 2.427 38.79
Average loss over 10893860 tokens: -0.639, valid loss/error: -2.157 39.06
Average loss over 10796269 tokens: 2.104, valid loss/error: 2.427 38.76
Average loss over 10892646 tokens: -0.639, valid loss/error: -2.377 39.06
Average loss over 10805160 tokens: 2.109, valid loss/error: 2.432 38.81
Average loss over 10866092 tokens: -0.637, valid loss/error: -2.406 39.11
Average loss over 10879280 tokens: -0.637, valid loss/error: -2.374 39.09
Average loss over 10811517 tokens: 2.115, valid loss/error: 2.459 38.82
Average loss over 10872819 tokens: -0.640, valid loss/error: -2.355 39.11
Average loss over 10794933 tokens: 2.110, valid loss/error: 2.447 38.84
Average loss over 10876201 tokens: -0.645, valid loss/error: -2.281 38.99
New best model saved
Average loss over 5404924 tokens: -0.639
Epoch: 6, train loss: -0.639, valid loss/error: -2.314 39.00
Average loss over 10814937 tokens: 2.114, valid loss/error: 2.442 38.83
Average loss over 10872212 tokens: -0.636, valid loss/error: -2.317 39.07
Average loss over 10815416 tokens: 2.115, valid loss/error: 2.460 38.82
Average loss over 10867808 tokens: -0.635, valid loss/error: -2.464 39.07
New best model saved
Average loss over 10871907 tokens: -0.640, valid loss/error: -2.249 39.01
Average loss over 10802253 tokens: 2.098, valid loss/error: 2.443 38.80
Average loss over 10872014 tokens: -0.636, valid loss/error: -2.219 39.00
Average loss over 10817784 tokens: 2.105, valid loss/error: 2.427 38.71
New best model saved
Average loss over 10865384 tokens: -0.638, valid loss/error: -2.264 39.03
Average loss over 10816290 tokens: 2.103, valid loss/error: 2.406 38.76
New best model saved
Average loss over 10875181 tokens: -0.644, valid loss/error: -2.398 39.03
Average loss over 10872195 tokens: -0.647, valid loss/error: -2.411 39.00
Average loss over 10795211 tokens: 2.103, valid loss/error: 2.439 38.81
Average loss over 10869947 tokens: -0.641, valid loss/error: -2.279 39.00
Average loss over 10809541 tokens: 2.103, valid loss/error: 2.447 38.80
Average loss over 10878180 tokens: -0.647, valid loss/error: -2.237 39.06
Average loss over 10818069 tokens: 2.107, valid loss/error: 2.442 38.76
Average loss over 10879823 tokens: -0.648, valid loss/error: -2.359 39.08
Average loss over 10860625 tokens: -0.639, valid loss/error: -2.247 39.08
Average loss over 10793751 tokens: 2.100, valid loss/error: 2.432 38.72
Average loss over 10866543 tokens: -0.634, valid loss/error: -2.359 39.09
Average loss over 10810838 tokens: 2.105, valid loss/error: 2.479 38.77
Average loss over 10858624 tokens: -0.642, valid loss/error: -2.395 39.09
Average loss over 5359855 tokens: 2.094
Epoch: 5, train loss: 2.107, valid loss/error: 2.421 38.72
Average loss over 10870949 tokens: -0.644, valid loss/error: -2.381 39.09
Average loss over 10799455 tokens: 2.102, valid loss/error: 2.420 38.76
Average loss over 10885842 tokens: -0.635, valid loss/error: -2.347 39.10
Average loss over 10799602 tokens: 2.105, valid loss/error: 2.426 38.76
Average loss over 10877780 tokens: -0.639, valid loss/error: -2.274 39.09
Average loss over 10892440 tokens: -0.639, valid loss/error: -2.386 39.05
Average loss over 10791523 tokens: 2.101, valid loss/error: 2.402 38.74
New best model saved
Average loss over 10889978 tokens: -0.642, valid loss/error: -2.293 39.08
Average loss over 10804575 tokens: 2.106, valid loss/error: 2.436 38.76
Average loss over 5398440 tokens: -0.652
Epoch: 7, train loss: -0.641, valid loss/error: -2.262 39.06
Average loss over 10884039 tokens: -0.641, valid loss/error: -2.271 39.02
Average loss over 10803402 tokens: 2.112, valid loss/error: 2.427 38.76
Average loss over 10865758 tokens: -0.645, valid loss/error: -2.443 39.05
Average loss over 10816218 tokens: 2.104, valid loss/error: 2.426 38.72
Average loss over 10881219 tokens: -0.643, valid loss/error: -2.338 39.05
Average loss over 10803998 tokens: 2.115, valid loss/error: 2.446 38.68
New best model saved
Average loss over 10881249 tokens: -0.644, valid loss/error: -2.519 39.10
New best model saved
Average loss over 10873382 tokens: -0.648, valid loss/error: -2.228 39.06
Average loss over 10791716 tokens: 2.100, valid loss/error: 2.406 38.72
Average loss over 10880523 tokens: -0.639, valid loss/error: -2.280 39.06
Average loss over 10824341 tokens: 2.115, valid loss/error: 2.454 38.74
Average loss over 10869232 tokens: -0.634, valid loss/error: -2.249 39.05
Average loss over 10800803 tokens: 2.101, valid loss/error: 2.445 38.72
Average loss over 10872333 tokens: -0.639, valid loss/error: -2.395 39.07
Average loss over 10872071 tokens: -0.638, valid loss/error: -2.312 39.11
Average loss over 10814153 tokens: 2.100, valid loss/error: 2.414 38.75
Average loss over 10864623 tokens: -0.641, valid loss/error: -2.193 39.05
Average loss over 10796585 tokens: 2.098, valid loss/error: 2.415 38.70
Average loss over 10877468 tokens: -0.638, valid loss/error: -2.404 39.05
Average loss over 10814977 tokens: 2.103, valid loss/error: 2.433 38.71
Average loss over 10885764 tokens: -0.641, valid loss/error: -2.292 39.06
Average loss over 10880915 tokens: -0.643, valid loss/error: -2.409 39.03
Average loss over 10810848 tokens: 2.106, valid loss/error: 2.375 38.67
New best model saved
Average loss over 10872772 tokens: -0.641, valid loss/error: -2.410 39.04
Average loss over 10790711 tokens: 2.108, valid loss/error: 2.389 38.68
Average loss over 10891907 tokens: -0.638, valid loss/error: -2.223 38.99
New best model saved
Average loss over 10815642 tokens: 2.107, valid loss/error: 2.411 38.75
Average loss over 10872047 tokens: -0.642, valid loss/error: -2.332 39.05
Average loss over 10865236 tokens: -0.640, valid loss/error: -2.236 38.99
Average loss over 10793308 tokens: 2.098, valid loss/error: 2.414 38.78
Average loss over 10878883 tokens: -0.641, valid loss/error: -2.319 38.98
New best model saved
Average loss over 5396727 tokens: -0.640
Epoch: 8, train loss: -0.641, valid loss/error: -2.367 39.02
Average loss over 10821297 tokens: 2.098, valid loss/error: 2.427 38.68
Average loss over 5372412 tokens: 2.097
Epoch: 6, train loss: 2.104, valid loss/error: 2.400 38.63
New best model saved
Average loss over 10883268 tokens: -0.651, valid loss/error: -2.436 39.03
Average loss over 10878406 tokens: -0.644, valid loss/error: -2.240 39.02
Average loss over 10802499 tokens: 2.112, valid loss/error: 2.414 38.70
Average loss over 10888386 tokens: -0.640, valid loss/error: -2.246 39.01
Average loss over 10806519 tokens: 2.108, valid loss/error: 2.390 38.77
Average loss over 10882984 tokens: -0.642, valid loss/error: -2.355 39.02
Average loss over 10810804 tokens: 2.099, valid loss/error: 2.431 38.72
Average loss over 10888482 tokens: -0.643, valid loss/error: -2.297 39.04
Average loss over 10876297 tokens: -0.644, valid loss/error: -2.349 39.01
Average loss over 10798600 tokens: 2.105, valid loss/error: 2.446 38.69
Average loss over 10866295 tokens: -0.640, valid loss/error: -2.411 39.02
Average loss over 10800890 tokens: 2.108, valid loss/error: 2.428 38.67
Average loss over 10877780 tokens: -0.642, valid loss/error: -2.320 38.97
New best model saved
Average loss over 10813726 tokens: 2.105, valid loss/error: 2.431 38.68
Average loss over 10864228 tokens: -0.645, valid loss/error: -2.391 38.96
New best model saved
Average loss over 10878977 tokens: -0.640, valid loss/error: -2.304 38.96
Average loss over 10792200 tokens: 2.096, valid loss/error: 2.395 38.71
Average loss over 10877535 tokens: -0.643, valid loss/error: -2.322 38.92
New best model saved
Average loss over 10805594 tokens: 2.108, valid loss/error: 2.400 38.71
Average loss over 10883998 tokens: -0.643, valid loss/error: -2.355 39.02
Average loss over 10807947 tokens: 2.101, valid loss/error: 2.418 38.76
Average loss over 10878308 tokens: -0.639, valid loss/error: -2.354 39.02
Average loss over 10864112 tokens: -0.651, valid loss/error: -2.406 38.99
Average loss over 10806739 tokens: 2.093, valid loss/error: 2.406 38.74
Average loss over 10869956 tokens: -0.645, valid loss/error: -2.434 39.01
Average loss over 10806733 tokens: 2.106, valid loss/error: 2.424 38.75
Average loss over 10870763 tokens: -0.642, valid loss/error: -2.341 39.02
Average loss over 10801262 tokens: 2.107, valid loss/error: 2.412 38.64
Average loss over 10862116 tokens: -0.635, valid loss/error: -2.320 39.00
Average loss over 10890915 tokens: -0.642, valid loss/error: -2.458 39.02
Average loss over 10800474 tokens: 2.098, valid loss/error: 2.407 38.66
Average loss over 5401691 tokens: -0.651
Epoch: 9, train loss: -0.643, valid loss/error: -2.406 38.97
Average loss over 10874236 tokens: -0.648, valid loss/error: -2.445 38.99
Average loss over 10800963 tokens: 2.099, valid loss/error: 2.413 38.71
Average loss over 10854609 tokens: -0.644, valid loss/error: -2.332 39.06
Average loss over 10822511 tokens: 2.107, valid loss/error: 2.376 38.69
Average loss over 10883383 tokens: -0.641, valid loss/error: -2.389 38.98
Average loss over 10800906 tokens: 2.097, valid loss/error: 2.407 38.69
Average loss over 10890316 tokens: -0.651, valid loss/error: -2.344 39.00
Average loss over 10890540 tokens: -0.636, valid loss/error: -2.397 39.03
Average loss over 10821256 tokens: 2.101, valid loss/error: 2.387 38.70
Average loss over 10876996 tokens: -0.644, valid loss/error: -2.426 39.01
Average loss over 10820121 tokens: 2.104, valid loss/error: 2.424 38.63
Average loss over 10873546 tokens: -0.640, valid loss/error: -2.404 39.01
Average loss over 5361746 tokens: 2.092
Epoch: 7, train loss: 2.103, valid loss/error: 2.419 38.66
Average loss over 10872623 tokens: -0.645, valid loss/error: -2.317 39.03
Average loss over 10820469 tokens: 2.096, valid loss/error: 2.393 38.71
Average loss over 10868824 tokens: -0.645, valid loss/error: -2.417 39.00
Average loss over 10788020 tokens: 2.099, valid loss/error: 2.426 38.65
Average loss over 10877312 tokens: -0.648, valid loss/error: -2.371 38.95
Average loss over 10876466 tokens: -0.643, valid loss/error: -2.381 38.97
Average loss over 10806589 tokens: 2.096, valid loss/error: 2.401 38.76
Average loss over 10889098 tokens: -0.644, valid loss/error: -2.316 38.97
Average loss over 10814313 tokens: 2.097, valid loss/error: 2.366 38.64
New best model saved
Average loss over 10869183 tokens: -0.646, valid loss/error: -2.273 38.97
Average loss over 10811542 tokens: 2.092, valid loss/error: 2.434 38.66
Average loss over 10885510 tokens: -0.646, valid loss/error: -2.355 38.96
Average loss over 10873347 tokens: -0.643, valid loss/error: -2.489 39.02
Average loss over 10819589 tokens: 2.105, valid loss/error: 2.403 38.74
Average loss over 10892928 tokens: -0.651, valid loss/error: -2.386 39.00
Average loss over 10798036 tokens: 2.107, valid loss/error: 2.410 38.66
Average loss over 10888382 tokens: -0.644, valid loss/error: -2.326 38.93
Average loss over 10800206 tokens: 2.102, valid loss/error: 2.389 38.68
Average loss over 10891392 tokens: -0.639, valid loss/error: -2.353 38.97
Average loss over 5382478 tokens: -0.643
Epoch: 10, train loss: -0.644, valid loss/error: -2.357 38.99
Average loss over 10810526 tokens: 2.103, valid loss/error: 2.407 38.72
Average loss over 10874995 tokens: -0.646, valid loss/error: -2.424 38.98
Average loss over 10810881 tokens: 2.093, valid loss/error: 2.415 38.70
Average loss over 10871826 tokens: -0.643, valid loss/error: -2.429 38.94
Average loss over 10847290 tokens: -0.644, valid loss/error: -2.334 38.92
New best model saved
Average loss over 10819989 tokens: 2.099, valid loss/error: 2.414 38.70
Average loss over 10873836 tokens: -0.650, valid loss/error: -2.328 39.00
Average loss over 10806235 tokens: 2.094, valid loss/error: 2.377 38.72
Average loss over 10869069 tokens: -0.646, valid loss/error: -2.312 38.97
Average loss over 10813307 tokens: 2.100, valid loss/error: 2.392 38.71
Average loss over 10893982 tokens: -0.649, valid loss/error: -2.366 38.99
Average loss over 10878909 tokens: -0.644, valid loss/error: -2.463 39.01
Average loss over 10786665 tokens: 2.098, valid loss/error: 2.404 38.70
Average loss over 10876190 tokens: -0.642, valid loss/error: -2.390 39.00
Average loss over 10830923 tokens: 2.098, valid loss/error: 2.447 38.71
Average loss over 10890695 tokens: -0.647, valid loss/error: -2.344 38.98
Average loss over 10819082 tokens: 2.106, valid loss/error: 2.405 38.66
Average loss over 10906479 tokens: -0.641, valid loss/error: -2.420 38.97
Average loss over 10883237 tokens: -0.648, valid loss/error: -2.499 38.95
Average loss over 10798668 tokens: 2.107, valid loss/error: 2.400 38.69
Average loss over 10881186 tokens: -0.650, valid loss/error: -2.127 39.01
Average loss over 10814035 tokens: 2.095, valid loss/error: 2.401 38.63
Average loss over 10882478 tokens: -0.647, valid loss/error: -2.396 38.97
Average loss over 5366902 tokens: 2.107
Epoch: 8, train loss: 2.099, valid loss/error: 2.390 38.68
Average loss over 10872029 tokens: -0.641, valid loss/error: -2.378 38.96
Average loss over 10805618 tokens: 2.091, valid loss/error: 2.373 38.65
Average loss over 10863639 tokens: -0.642, valid loss/error: -2.296 38.93
Average loss over 10797283 tokens: 2.093, valid loss/error: 2.417 38.65
Average loss over 10881670 tokens: -0.648, valid loss/error: -2.334 38.98
Average loss over 10878954 tokens: -0.649, valid loss/error: -2.328 39.05
Average loss over 10814436 tokens: 2.101, valid loss/error: 2.384 38.65
Average loss over 10864729 tokens: -0.646, valid loss/error: -2.437 38.97
Average loss over 5405049 tokens: -0.644
Epoch: 11, train loss: -0.646, valid loss/error: -2.293 38.95
Average loss over 10808315 tokens: 2.102, valid loss/error: 2.405 38.66
Average loss over 10862664 tokens: -0.644, valid loss/error: -2.435 38.98
Average loss over 10798827 tokens: 2.089, valid loss/error: 2.408 38.62
New best model saved
Average loss over 10884031 tokens: -0.644, valid loss/error: -2.435 38.99
Average loss over 10799617 tokens: 2.095, valid loss/error: 2.418 38.60
New best model saved
Average loss over 10871862 tokens: -0.652, valid loss/error: -2.352 38.95
Average loss over 10873446 tokens: -0.646, valid loss/error: -2.361 38.99
Average loss over 10799121 tokens: 2.100, valid loss/error: 2.398 38.59
New best model saved
Average loss over 10869586 tokens: -0.644, valid loss/error: -2.336 38.99
Average loss over 10809699 tokens: 2.095, valid loss/error: 2.417 38.57
New best model saved
Average loss over 10873264 tokens: -0.648, valid loss/error: -2.436 39.00
Average loss over 10785718 tokens: 2.091, valid loss/error: 2.385 38.56
New best model saved
Average loss over 10877270 tokens: -0.655, valid loss/error: -2.490 39.01
Average loss over 10874576 tokens: -0.648, valid loss/error: -2.363 39.00
Average loss over 10831062 tokens: 2.103, valid loss/error: 2.382 38.57
Average loss over 10874137 tokens: -0.644, valid loss/error: -2.367 38.94
Average loss over 10807326 tokens: 2.099, valid loss/error: 2.402 38.62
Average loss over 10899977 tokens: -0.646, valid loss/error: -2.429 38.96
Average loss over 10818809 tokens: 2.094, valid loss/error: 2.407 38.56
New best model saved
Average loss over 10885927 tokens: -0.647, valid loss/error: -2.435 38.94
Average loss over 10880871 tokens: -0.646, valid loss/error: -2.447 38.98
Average loss over 10817382 tokens: 2.102, valid loss/error: 2.407 38.57
Average loss over 10873608 tokens: -0.647, valid loss/error: -2.205 38.97
Average loss over 10788127 tokens: 2.091, valid loss/error: 2.370 38.62
Average loss over 10890260 tokens: -0.646, valid loss/error: -2.437 38.95
Average loss over 10800566 tokens: 2.096, valid loss/error: 2.373 38.56
Average loss over 10875802 tokens: -0.642, valid loss/error: -2.384 38.99
Average loss over 10858872 tokens: -0.644, valid loss/error: -2.384 38.99
Average loss over 10828931 tokens: 2.098, valid loss/error: 2.366 38.54
New best model saved
Average loss over 10891461 tokens: -0.647, valid loss/error: -2.499 39.02
Average loss over 10805039 tokens: 2.104, valid loss/error: 2.379 38.59
Average loss over 10870067 tokens: -0.645, valid loss/error: -2.421 38.99
Average loss over 5401993 tokens: -0.644
Epoch: 12, train loss: -0.646, valid loss/error: -2.343 38.97
Average loss over 10805960 tokens: 2.106, valid loss/error: 2.370 38.59
Average loss over 5362116 tokens: 2.085
Epoch: 9, train loss: 2.097, valid loss/error: 2.392 38.58
Average loss over 10863514 tokens: -0.654, valid loss/error: -2.435 39.01
Average loss over 10870233 tokens: -0.651, valid loss/error: -2.370 38.99
Average loss over 10798934 tokens: 2.091, valid loss/error: 2.404 38.61
Average loss over 10890590 tokens: -0.648, valid loss/error: -2.384 38.93
Average loss over 10800484 tokens: 2.100, valid loss/error: 2.414 38.60
Average loss over 10871451 tokens: -0.648, valid loss/error: -2.529 38.98
New best model saved
Average loss over 10817736 tokens: 2.100, valid loss/error: 2.386 38.63
Average loss over 10888832 tokens: -0.642, valid loss/error: -2.478 38.91
New best model saved
Average loss over 10861794 tokens: -0.652, valid loss/error: -2.396 38.95
Average loss over 10809832 tokens: 2.091, valid loss/error: 2.372 38.62
Average loss over 10887616 tokens: -0.651, valid loss/error: -2.290 38.88
New best model saved
Average loss over 10827731 tokens: 2.102, valid loss/error: 2.384 38.60
Average loss over 10881672 tokens: -0.649, valid loss/error: -2.334 39.02
Average loss over 10812666 tokens: 2.094, valid loss/error: 2.395 38.66
Average loss over 10861963 tokens: -0.646, valid loss/error: -2.401 38.94
Average loss over 10870632 tokens: -0.645, valid loss/error: -2.283 38.97
Average loss over 10802755 tokens: 2.098, valid loss/error: 2.411 38.59
Average loss over 10896215 tokens: -0.650, valid loss/error: -2.388 38.91
Average loss over 10806315 tokens: 2.098, valid loss/error: 2.398 38.61
Average loss over 10858987 tokens: -0.648, valid loss/error: -2.456 38.90
Average loss over 10820098 tokens: 2.100, valid loss/error: 2.413 38.59
Average loss over 10898325 tokens: -0.643, valid loss/error: -2.367 38.92
Average loss over 10872939 tokens: -0.648, valid loss/error: -2.214 38.94
Average loss over 10813497 tokens: 2.092, valid loss/error: 2.380 38.54
Average loss over 10889822 tokens: -0.643, valid loss/error: -2.387 38.98
Average loss over 10801433 tokens: 2.095, valid loss/error: 2.393 38.62
Average loss over 10889623 tokens: -0.654, valid loss/error: -2.385 38.97
Average loss over 10811514 tokens: 2.096, valid loss/error: 2.413 38.57
Average loss over 10879429 tokens: -0.649, valid loss/error: -2.396 39.00
Average loss over 10791223 tokens: 2.095, valid loss/error: 2.423 38.58
Average loss over 10874165 tokens: -0.643, valid loss/error: -2.372 38.96
Average loss over 5404197 tokens: -0.643
Epoch: 13, train loss: -0.648, valid loss/error: -2.319 38.97
Average loss over 10802673 tokens: 2.090, valid loss/error: 2.422 38.60
Average loss over 10878991 tokens: -0.651, valid loss/error: -2.382 38.95
Average loss over 10791535 tokens: 2.096, valid loss/error: 2.404 38.61
Average loss over 10869483 tokens: -0.646, valid loss/error: -2.428 38.94
Average loss over 10882583 tokens: -0.653, valid loss/error: -2.263 38.94
Average loss over 10804664 tokens: 2.088, valid loss/error: 2.371 38.55
Average loss over 10877641 tokens: -0.651, valid loss/error: -2.390 38.91
Average loss over 10813696 tokens: 2.092, valid loss/error: 2.385 38.55
Average loss over 10871253 tokens: -0.642, valid loss/error: -2.332 38.96
Average loss over 10828121 tokens: 2.100, valid loss/error: 2.387 38.58
Average loss over 10855759 tokens: -0.649, valid loss/error: -2.434 38.90
Average loss over 5350869 tokens: 2.107
Epoch: 10, train loss: 2.096, valid loss/error: 2.400 38.57
Average loss over 10870543 tokens: -0.647, valid loss/error: -2.334 38.95
Average loss over 10804169 tokens: 2.095, valid loss/error: 2.388 38.55
Average loss over 10882798 tokens: -0.650, valid loss/error: -2.439 38.93
Average loss over 10858724 tokens: -0.651, valid loss/error: -2.480 38.96
Average loss over 10811147 tokens: 2.100, valid loss/error: 2.375 38.64
Average loss over 10887661 tokens: -0.650, valid loss/error: -2.472 38.92
Average loss over 10806793 tokens: 2.103, valid loss/error: 2.417 38.57
Average loss over 10868960 tokens: -0.645, valid loss/error: -2.451 38.91
Average loss over 10790325 tokens: 2.086, valid loss/error: 2.420 38.63
Average loss over 10883047 tokens: -0.646, valid loss/error: -2.349 38.94
Average loss over 10869052 tokens: -0.648, valid loss/error: -2.317 39.00
Average loss over 10794718 tokens: 2.092, valid loss/error: 2.384 38.55
Average loss over 10871172 tokens: -0.644, valid loss/error: -2.527 38.99
Average loss over 10818849 tokens: 2.092, valid loss/error: 2.407 38.65
Average loss over 10861302 tokens: -0.649, valid loss/error: -2.389 38.96
Average loss over 10796828 tokens: 2.091, valid loss/error: 2.374 38.56
Average loss over 10869180 tokens: -0.649, valid loss/error: -2.386 38.98
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python zhen502525_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_300k/std/eva_2.961_38.62.h5
Init lr: 1e-05, Dev Loss/Error: 4.444 39.50
Average loss over 10808582 tokens: 2.167, valid loss/error: 4.122 39.32
New best model saved

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python zhen502525_latest_2teacher_train_distill_sample.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/rs_3072/zhen_low_FT/std/checkpoint_49.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_100k/std/train_6_2.536_3.016_39.51.h5
load student model from: /home/yfguo/transformer_924/expm/rs_6144_2/zhen_base_300k/std/eva_2.961_38.62.h5
Init lr: 1e-05, Dev Loss/Error: 4.444 39.50
Average loss over 10885631 tokens: 1.928, valid loss/error: 4.147 39.31
New best model saved
Average loss over 10870723 tokens: 1.923, valid loss/error: 3.981 39.23
New best model saved
Average loss over 10889827 tokens: 1.925, valid loss/error: 3.685 39.24
New best model saved
Average loss over 10872848 tokens: 1.918, valid loss/error: 3.427 39.26
New best model saved
Average loss over 10870859 tokens: 1.910, valid loss/error: 3.154 39.20
New best model saved
Average loss over 10884269 tokens: 1.908, valid loss/error: 2.902 39.20
New best model saved
Average loss over 10888426 tokens: 1.915, valid loss/error: 2.695 39.15
New best model saved
Average loss over 10874869 tokens: 1.905, valid loss/error: 2.537 39.11
New best model saved
Average loss over 10888412 tokens: 1.905, valid loss/error: 2.484 39.03
New best model saved
Average loss over 10871150 tokens: 1.894, valid loss/error: 2.476 39.10
New best model saved
Average loss over 10896988 tokens: 1.905, valid loss/error: 2.471 39.17
New best model saved
Average loss over 10858192 tokens: 1.895, valid loss/error: 2.490 39.14
Average loss over 10890733 tokens: 1.904, valid loss/error: 2.472 39.10
Average loss over 10876855 tokens: 1.901, valid loss/error: 2.465 39.17
New best model saved
Average loss over 10879629 tokens: 1.896, valid loss/error: 2.484 39.06
Average loss over 10870315 tokens: 1.902, valid loss/error: 2.469 39.16
Average loss over 10881883 tokens: 1.897, valid loss/error: 2.476 39.07
Average loss over 10877089 tokens: 1.903, valid loss/error: 2.468 39.04
Average loss over 5411608 tokens: 1.892
Epoch: 1, train loss: 1.907, valid loss/error: 2.482 39.04
Average loss over 10890336 tokens: 1.899, valid loss/error: 2.474 39.07
Average loss over 10879785 tokens: 1.898, valid loss/error: 2.464 39.05
New best model saved
Average loss over 10870712 tokens: 1.895, valid loss/error: 2.457 39.06
New best model saved
Average loss over 10893505 tokens: 1.888, valid loss/error: 2.486 39.06
Average loss over 10890348 tokens: 1.896, valid loss/error: 2.489 39.09
Average loss over 10879838 tokens: 1.888, valid loss/error: 2.452 39.05
New best model saved
Average loss over 10892707 tokens: 1.904, valid loss/error: 2.472 39.02
New best model saved
Average loss over 10868911 tokens: 1.898, valid loss/error: 2.485 39.07
Average loss over 10877904 tokens: 1.890, valid loss/error: 2.474 39.01
New best model saved
Average loss over 10900089 tokens: 1.887, valid loss/error: 2.482 38.97
New best model saved
Average loss over 10861189 tokens: 1.891, valid loss/error: 2.443 38.98
New best model saved
Average loss over 10874924 tokens: 1.888, valid loss/error: 2.462 38.97
Average loss over 10883941 tokens: 1.895, valid loss/error: 2.471 38.96
New best model saved
Average loss over 10864938 tokens: 1.894, valid loss/error: 2.460 38.95
New best model saved
Average loss over 10858991 tokens: 1.897, valid loss/error: 2.472 39.01
Average loss over 10881296 tokens: 1.900, valid loss/error: 2.462 39.01
Average loss over 10893995 tokens: 1.893, valid loss/error: 2.424 39.03
New best model saved
Average loss over 10874970 tokens: 1.895, valid loss/error: 2.453 38.94
New best model saved
Average loss over 5412373 tokens: 1.897
Epoch: 2, train loss: 1.894, valid loss/error: 2.478 38.96
Average loss over 10885098 tokens: 1.886, valid loss/error: 2.451 38.90
New best model saved
Average loss over 10888032 tokens: 1.894, valid loss/error: 2.466 38.90
Average loss over 10888668 tokens: 1.889, valid loss/error: 2.454 38.90
New best model saved
Average loss over 10871815 tokens: 1.893, valid loss/error: 2.451 39.02
Average loss over 10889339 tokens: 1.886, valid loss/error: 2.485 38.94
Average loss over 10891052 tokens: 1.898, valid loss/error: 2.466 38.98
Average loss over 10873507 tokens: 1.884, valid loss/error: 2.456 38.98
Average loss over 10865790 tokens: 1.893, valid loss/error: 2.425 38.89
New best model saved
Average loss over 10879090 tokens: 1.886, valid loss/error: 2.479 38.90
Average loss over 10889934 tokens: 1.890, valid loss/error: 2.471 38.96
Average loss over 10886144 tokens: 1.887, valid loss/error: 2.459 38.95
Average loss over 10887658 tokens: 1.886, valid loss/error: 2.446 38.96
Average loss over 10877114 tokens: 1.889, valid loss/error: 2.468 38.93
Average loss over 10865746 tokens: 1.885, valid loss/error: 2.476 38.98
Average loss over 10877278 tokens: 1.897, valid loss/error: 2.448 38.96
Average loss over 10879182 tokens: 1.883, valid loss/error: 2.449 38.90
Average loss over 10875233 tokens: 1.892, valid loss/error: 2.447 38.91
Average loss over 10885576 tokens: 1.892, valid loss/error: 2.457 38.90
Average loss over 5401682 tokens: 1.898
Epoch: 3, train loss: 1.890, valid loss/error: 2.469 38.84
New best model saved
Average loss over 10877251 tokens: 1.885, valid loss/error: 2.448 38.88
Average loss over 10867985 tokens: 1.883, valid loss/error: 2.453 38.96
Average loss over 10862893 tokens: 1.881, valid loss/error: 2.456 38.92
Average loss over 10894638 tokens: 1.893, valid loss/error: 2.459 38.87
Average loss over 10888248 tokens: 1.884, valid loss/error: 2.456 38.92
Average loss over 10877406 tokens: 1.889, valid loss/error: 2.476 38.88
Average loss over 10876998 tokens: 1.885, valid loss/error: 2.457 38.91
Average loss over 10902122 tokens: 1.886, valid loss/error: 2.455 38.90
Average loss over 10894445 tokens: 1.890, valid loss/error: 2.469 38.92
Average loss over 10901001 tokens: 1.890, valid loss/error: 2.458 38.80
New best model saved
Average loss over 10875629 tokens: 1.882, valid loss/error: 2.442 38.90
Average loss over 10860344 tokens: 1.895, valid loss/error: 2.447 38.87
Average loss over 10871543 tokens: 1.876, valid loss/error: 2.446 38.86
Average loss over 10863431 tokens: 1.885, valid loss/error: 2.454 38.87
Average loss over 10880219 tokens: 1.891, valid loss/error: 2.432 38.90
Average loss over 10885281 tokens: 1.891, valid loss/error: 2.441 38.88
Average loss over 10888195 tokens: 1.882, valid loss/error: 2.442 38.80
Average loss over 10880920 tokens: 1.891, valid loss/error: 2.427 38.87
Average loss over 5394959 tokens: 1.886
Epoch: 4, train loss: 1.887, valid loss/error: 2.436 38.84
Average loss over 10875692 tokens: 1.887, valid loss/error: 2.464 38.88
Average loss over 10868798 tokens: 1.888, valid loss/error: 2.440 38.85
Average loss over 10886156 tokens: 1.885, valid loss/error: 2.440 38.86
Average loss over 10872341 tokens: 1.883, valid loss/error: 2.426 38.85
Average loss over 10872715 tokens: 1.882, valid loss/error: 2.423 38.90
New best model saved
Average loss over 10885481 tokens: 1.884, valid loss/error: 2.423 38.86
Average loss over 10880294 tokens: 1.896, valid loss/error: 2.433 38.88
Average loss over 10877104 tokens: 1.888, valid loss/error: 2.467 38.88
Average loss over 10886972 tokens: 1.888, valid loss/error: 2.447 38.89
Average loss over 10885465 tokens: 1.895, valid loss/error: 2.484 38.83
Average loss over 10876764 tokens: 1.879, valid loss/error: 2.448 38.82
Average loss over 10892937 tokens: 1.885, valid loss/error: 2.434 38.77
New best model saved
Average loss over 10887557 tokens: 1.880, valid loss/error: 2.429 38.86
Average loss over 10871746 tokens: 1.875, valid loss/error: 2.431 38.83
Average loss over 10870965 tokens: 1.879, valid loss/error: 2.454 38.89
Average loss over 10886821 tokens: 1.888, valid loss/error: 2.427 38.88
Average loss over 10872954 tokens: 1.879, valid loss/error: 2.462 38.81
Average loss over 10884092 tokens: 1.880, valid loss/error: 2.460 38.87
Average loss over 5407332 tokens: 1.875
Epoch: 5, train loss: 1.884, valid loss/error: 2.435 38.86
Average loss over 10864083 tokens: 1.879, valid loss/error: 2.440 38.87
Average loss over 10871457 tokens: 1.887, valid loss/error: 2.411 38.86
New best model saved
Average loss over 10874946 tokens: 1.879, valid loss/error: 2.410 38.82
New best model saved
Average loss over 10865839 tokens: 1.884, valid loss/error: 2.435 38.83
Average loss over 10871443 tokens: 1.888, valid loss/error: 2.440 38.82
Average loss over 10866263 tokens: 1.883, valid loss/error: 2.430 38.88
Average loss over 10879527 tokens: 1.888, valid loss/error: 2.470 38.85
Average loss over 10879630 tokens: 1.874, valid loss/error: 2.418 38.86
Average loss over 10896370 tokens: 1.893, valid loss/error: 2.440 38.84
Average loss over 10873903 tokens: 1.882, valid loss/error: 2.448 38.88
Average loss over 10878203 tokens: 1.879, valid loss/error: 2.433 38.89
Average loss over 10883185 tokens: 1.875, valid loss/error: 2.426 38.76
New best model saved
Average loss over 10893860 tokens: 1.877, valid loss/error: 2.453 38.85
Average loss over 10892646 tokens: 1.885, valid loss/error: 2.414 38.79
Average loss over 10866092 tokens: 1.886, valid loss/error: 2.405 38.87
New best model saved
Average loss over 10879280 tokens: 1.883, valid loss/error: 2.412 38.78
Average loss over 10872819 tokens: 1.879, valid loss/error: 2.424 38.81
Average loss over 10876201 tokens: 1.873, valid loss/error: 2.425 38.75
New best model saved
Average loss over 5404924 tokens: 1.879
Epoch: 6, train loss: 1.882, valid loss/error: 2.426 38.72
New best model saved
Average loss over 10872212 tokens: 1.884, valid loss/error: 2.432 38.84
Average loss over 10867808 tokens: 1.886, valid loss/error: 2.407 38.83
Average loss over 10871907 tokens: 1.876, valid loss/error: 2.434 38.78
Average loss over 10872014 tokens: 1.886, valid loss/error: 2.438 38.77
Average loss over 10865384 tokens: 1.885, valid loss/error: 2.436 38.77
Average loss over 10875181 tokens: 1.877, valid loss/error: 2.416 38.75
Average loss over 10872195 tokens: 1.872, valid loss/error: 2.403 38.74
New best model saved
Average loss over 10869947 tokens: 1.879, valid loss/error: 2.435 38.75
Average loss over 10878180 tokens: 1.874, valid loss/error: 2.433 38.78
Average loss over 10879823 tokens: 1.871, valid loss/error: 2.422 38.83
Average loss over 10860625 tokens: 1.878, valid loss/error: 2.431 38.81
Average loss over 10866543 tokens: 1.888, valid loss/error: 2.420 38.80
Average loss over 10858624 tokens: 1.878, valid loss/error: 2.415 38.82
Average loss over 10870949 tokens: 1.879, valid loss/error: 2.407 38.80
Average loss over 10885842 tokens: 1.887, valid loss/error: 2.419 38.83
Average loss over 10877780 tokens: 1.882, valid loss/error: 2.422 38.82
Average loss over 10892440 tokens: 1.880, valid loss/error: 2.412 38.77
Average loss over 10889978 tokens: 1.879, valid loss/error: 2.434 38.80
Average loss over 5398440 tokens: 1.869
Epoch: 7, train loss: 1.880, valid loss/error: 2.448 38.78
Average loss over 10884039 tokens: 1.878, valid loss/error: 2.442 38.80
Average loss over 10865758 tokens: 1.878, valid loss/error: 2.411 38.82
Average loss over 10881219 tokens: 1.877, valid loss/error: 2.417 38.79
Average loss over 10881249 tokens: 1.874, valid loss/error: 2.383 38.82
New best model saved
Average loss over 10873382 tokens: 1.873, valid loss/error: 2.439 38.83
Average loss over 10880523 tokens: 1.884, valid loss/error: 2.424 38.83
Average loss over 10869232 tokens: 1.887, valid loss/error: 2.430 38.79
Average loss over 10872333 tokens: 1.882, valid loss/error: 2.410 38.80
Average loss over 10872071 tokens: 1.882, valid loss/error: 2.433 38.81
Average loss over 10864623 tokens: 1.877, valid loss/error: 2.455 38.85
Average loss over 10877468 tokens: 1.879, valid loss/error: 2.405 38.80
Average loss over 10885764 tokens: 1.877, valid loss/error: 2.432 38.79
Average loss over 10880915 tokens: 1.877, valid loss/error: 2.408 38.80
Average loss over 10872772 tokens: 1.879, valid loss/error: 2.407 38.78
Average loss over 10891907 tokens: 1.880, valid loss/error: 2.440 38.75
Average loss over 10872047 tokens: 1.880, valid loss/error: 2.427 38.80
Average loss over 10865236 tokens: 1.879, valid loss/error: 2.439 38.74
Average loss over 10878883 tokens: 1.879, valid loss/error: 2.415 38.76
Average loss over 5396727 tokens: 1.884
Epoch: 8, train loss: 1.879, valid loss/error: 2.412 38.76
Average loss over 10883268 tokens: 1.872, valid loss/error: 2.397 38.73
Average loss over 10878406 tokens: 1.877, valid loss/error: 2.437 38.77
Average loss over 10888386 tokens: 1.878, valid loss/error: 2.421 38.79
Average loss over 10882984 tokens: 1.883, valid loss/error: 2.408 38.83
Average loss over 10888482 tokens: 1.875, valid loss/error: 2.425 38.87
Average loss over 10876297 tokens: 1.874, valid loss/error: 2.421 38.80
Average loss over 10866295 tokens: 1.880, valid loss/error: 2.405 38.84
Average loss over 10877780 tokens: 1.878, valid loss/error: 2.417 38.76
Average loss over 10864228 tokens: 1.876, valid loss/error: 2.403 38.75
Average loss over 10878977 tokens: 1.881, valid loss/error: 2.425 38.74
Average loss over 10877535 tokens: 1.879, valid loss/error: 2.420 38.81
Average loss over 10883998 tokens: 1.878, valid loss/error: 2.416 38.78
Average loss over 10878308 tokens: 1.885, valid loss/error: 2.408 38.67
New best model saved
Average loss over 10864112 tokens: 1.868, valid loss/error: 2.410 38.72
Average loss over 10869956 tokens: 1.875, valid loss/error: 2.401 38.76
Average loss over 10870763 tokens: 1.882, valid loss/error: 2.409 38.74
Average loss over 10862116 tokens: 1.887, valid loss/error: 2.414 38.78
Average loss over 10890915 tokens: 1.881, valid loss/error: 2.392 38.76
Average loss over 5401691 tokens: 1.868
Epoch: 9, train loss: 1.878, valid loss/error: 2.401 38.71
Average loss over 10874236 tokens: 1.870, valid loss/error: 2.399 38.72
Average loss over 10854609 tokens: 1.882, valid loss/error: 2.418 38.82
Average loss over 10883383 tokens: 1.880, valid loss/error: 2.411 38.73
Average loss over 10890316 tokens: 1.871, valid loss/error: 2.412 38.80
Average loss over 10890540 tokens: 1.886, valid loss/error: 2.412 38.78
Average loss over 10876996 tokens: 1.873, valid loss/error: 2.402 38.76
Average loss over 10873546 tokens: 1.878, valid loss/error: 2.417 38.78
Average loss over 10872623 tokens: 1.875, valid loss/error: 2.423 38.70
Average loss over 10868824 tokens: 1.878, valid loss/error: 2.404 38.80
Average loss over 10877312 tokens: 1.877, valid loss/error: 2.399 38.72
Average loss over 10876466 tokens: 1.874, valid loss/error: 2.409 38.77
Average loss over 10889098 tokens: 1.877, valid loss/error: 2.421 38.78
Average loss over 10869183 tokens: 1.872, valid loss/error: 2.432 38.77
Average loss over 10885510 tokens: 1.874, valid loss/error: 2.415 38.79
Average loss over 10873347 tokens: 1.879, valid loss/error: 2.397 38.82
Average loss over 10892928 tokens: 1.870, valid loss/error: 2.408 38.78
Average loss over 10888382 tokens: 1.877, valid loss/error: 2.421 38.76
Average loss over 10891392 tokens: 1.883, valid loss/error: 2.417 38.73
Average loss over 5382478 tokens: 1.885
Epoch: 10, train loss: 1.877, valid loss/error: 2.406 38.75
Average loss over 10874995 tokens: 1.873, valid loss/error: 2.400 38.72
Average loss over 10871826 tokens: 1.881, valid loss/error: 2.394 38.75
Average loss over 10847290 tokens: 1.879, valid loss/error: 2.413 38.72
Average loss over 10873836 tokens: 1.870, valid loss/error: 2.415 38.77
Average loss over 10869069 tokens: 1.874, valid loss/error: 2.417 38.82
Average loss over 10893982 tokens: 1.873, valid loss/error: 2.410 38.79
Average loss over 10878909 tokens: 1.878, valid loss/error: 2.395 38.79
Average loss over 10876190 tokens: 1.879, valid loss/error: 2.411 38.74
Average loss over 10890695 tokens: 1.874, valid loss/error: 2.411 38.79
Average loss over 10906479 tokens: 1.883, valid loss/error: 2.408 38.78
Average loss over 10883237 tokens: 1.871, valid loss/error: 2.387 38.67
New best model saved
Average loss over 10881186 tokens: 1.867, valid loss/error: 2.439 38.72
Average loss over 10882478 tokens: 1.874, valid loss/error: 2.396 38.72
Average loss over 10872029 tokens: 1.880, valid loss/error: 2.410 38.75
Average loss over 10863639 tokens: 1.877, valid loss/error: 2.417 38.71
Average loss over 10881670 tokens: 1.868, valid loss/error: 2.423 38.73
Average loss over 10878954 tokens: 1.868, valid loss/error: 2.405 38.71
Average loss over 10864729 tokens: 1.875, valid loss/error: 2.398 38.73
Average loss over 5405049 tokens: 1.880
Epoch: 11, train loss: 1.875, valid loss/error: 2.421 38.73
Average loss over 10862664 tokens: 1.878, valid loss/error: 2.406 38.80
Average loss over 10884031 tokens: 1.879, valid loss/error: 2.396 38.75
Average loss over 10871862 tokens: 1.867, valid loss/error: 2.420 38.67
Average loss over 10873446 tokens: 1.878, valid loss/error: 2.417 38.80
Average loss over 10869586 tokens: 1.876, valid loss/error: 2.411 38.75
Average loss over 10873264 tokens: 1.868, valid loss/error: 2.404 38.73
Average loss over 10877270 tokens: 1.867, valid loss/error: 2.388 38.70
Average loss over 10874576 tokens: 1.873, valid loss/error: 2.405 38.71
Average loss over 10874137 tokens: 1.879, valid loss/error: 2.406 38.75
Average loss over 10899977 tokens: 1.878, valid loss/error: 2.398 38.76
Average loss over 10885927 tokens: 1.874, valid loss/error: 2.406 38.77
Average loss over 10880871 tokens: 1.876, valid loss/error: 2.398 38.72
Average loss over 10873608 tokens: 1.875, valid loss/error: 2.444 38.74
Average loss over 10890260 tokens: 1.873, valid loss/error: 2.403 38.69
Average loss over 10875802 tokens: 1.878, valid loss/error: 2.407 38.72
Average loss over 10858872 tokens: 1.879, valid loss/error: 2.407 38.72
Average loss over 10891461 tokens: 1.873, valid loss/error: 2.379 38.77
New best model saved
Average loss over 10870067 tokens: 1.876, valid loss/error: 2.398 38.71
Average loss over 5401993 tokens: 1.875
Epoch: 12, train loss: 1.875, valid loss/error: 2.409 38.69
Average loss over 10863514 tokens: 1.868, valid loss/error: 2.400 38.74
Average loss over 10870233 tokens: 1.870, valid loss/error: 2.406 38.72
Average loss over 10890590 tokens: 1.873, valid loss/error: 2.404 38.70
Average loss over 10871451 tokens: 1.872, valid loss/error: 2.380 38.72
Average loss over 10888832 tokens: 1.881, valid loss/error: 2.389 38.72
Average loss over 10861794 tokens: 1.871, valid loss/error: 2.401 38.79
Average loss over 10887616 tokens: 1.870, valid loss/error: 2.427 38.76
Average loss over 10881672 tokens: 1.870, valid loss/error: 2.426 38.77
Average loss over 10861963 tokens: 1.872, valid loss/error: 2.419 38.73
Average loss over 10870632 tokens: 1.875, valid loss/error: 2.424 38.80
Average loss over 10896215 tokens: 1.871, valid loss/error: 2.397 38.70
Average loss over 10858987 tokens: 1.871, valid loss/error: 2.387 38.74
Average loss over 10898325 tokens: 1.883, valid loss/error: 2.402 38.74
Average loss over 10872939 tokens: 1.873, valid loss/error: 2.421 38.72
Average loss over 10889822 tokens: 1.880, valid loss/error: 2.401 38.72
Average loss over 10889623 tokens: 1.868, valid loss/error: 2.413 38.75
Average loss over 10879429 tokens: 1.876, valid loss/error: 2.404 38.87
Average loss over 10874165 tokens: 1.879, valid loss/error: 2.407 38.75
Average loss over 5404197 tokens: 1.882
Epoch: 13, train loss: 1.874, valid loss/error: 2.423 38.75
Average loss over 10878991 tokens: 1.869, valid loss/error: 2.406 38.79
Average loss over 10869483 tokens: 1.876, valid loss/error: 2.400 38.76
Average loss over 10882583 tokens: 1.871, valid loss/error: 2.432 38.74
Average loss over 10877641 tokens: 1.869, valid loss/error: 2.398 38.75
Average loss over 10871253 tokens: 1.882, valid loss/error: 2.414 38.75
Average loss over 10855759 tokens: 1.873, valid loss/error: 2.395 38.81
Average loss over 10870543 tokens: 1.876, valid loss/error: 2.414 38.81
Average loss over 10882798 tokens: 1.871, valid loss/error: 2.394 38.75
Average loss over 10858724 tokens: 1.869, valid loss/error: 2.383 38.76
Average loss over 10887661 tokens: 1.872, valid loss/error: 2.389 38.80
Average loss over 10868960 tokens: 1.880, valid loss/error: 2.389 38.73
Average loss over 10883047 tokens: 1.873, valid loss/error: 2.405 38.76
Average loss over 10869052 tokens: 1.875, valid loss/error: 2.416 38.73
Average loss over 10871172 tokens: 1.875, valid loss/error: 2.371 38.79
New best model saved
Average loss over 10861302 tokens: 1.875, valid loss/error: 2.404 38.79
Average loss over 10869180 tokens: 1.867, valid loss/error: 2.396 38.78
Average loss over 10901777 tokens: 1.870, valid loss/error: 2.398 38.71
Average loss over 10886918 tokens: 1.870, valid loss/error: 2.396 38.71
Average loss over 5392875 tokens: 1.872
Epoch: 14, train loss: 1.873, valid loss/error: 2.424 38.76
Average loss over 10879354 tokens: 1.875, valid loss/error: 2.440 38.71
Average loss over 10872773 tokens: 1.869, valid loss/error: 2.403 38.75
Average loss over 10885856 tokens: 1.873, valid loss/error: 2.387 38.73
Average loss over 10857713 tokens: 1.876, valid loss/error: 2.382 38.70
Average loss over 10871449 tokens: 1.876, valid loss/error: 2.378 38.72
Average loss over 10883805 tokens: 1.872, valid loss/error: 2.389 38.75
Average loss over 10886582 tokens: 1.873, valid loss/error: 2.412 38.78
Average loss over 10884192 tokens: 1.874, valid loss/error: 2.407 38.69
Average loss over 10874690 tokens: 1.869, valid loss/error: 2.409 38.77
Average loss over 10886190 tokens: 1.867, valid loss/error: 2.385 38.71
Average loss over 10862925 tokens: 1.877, valid loss/error: 2.417 38.76
Average loss over 10876280 tokens: 1.867, valid loss/error: 2.379 38.79
Average loss over 10884645 tokens: 1.868, valid loss/error: 2.408 38.69
Average loss over 10886037 tokens: 1.872, valid loss/error: 2.419 38.73
Average loss over 10858055 tokens: 1.870, valid loss/error: 2.402 38.72
Average loss over 10865110 tokens: 1.879, valid loss/error: 2.374 38.76
Average loss over 10879984 tokens: 1.865, valid loss/error: 2.392 38.73
Average loss over 10894149 tokens: 1.878, valid loss/error: 2.375 38.74
Average loss over 5407203 tokens: 1.871
Epoch: 15, train loss: 1.872, valid loss/error: 2.412 38.67
New best model saved
Average loss over 10874281 tokens: 1.866, valid loss/error: 2.396 38.72
Average loss over 10894386 tokens: 1.860, valid loss/error: 2.387 38.71
Average loss over 10888090 tokens: 1.876, valid loss/error: 2.417 38.72
Average loss over 10875572 tokens: 1.874, valid loss/error: 2.392 38.69
Average loss over 10869972 tokens: 1.872, valid loss/error: 2.377 38.66
New best model saved
Average loss over 10899960 tokens: 1.869, valid loss/error: 2.371 38.67
Average loss over 10893543 tokens: 1.876, valid loss/error: 2.415 38.74
Average loss over 10864596 tokens: 1.870, valid loss/error: 2.414 38.76
Average loss over 10886905 tokens: 1.864, valid loss/error: 2.393 38.74
Average loss over 10874010 tokens: 1.866, valid loss/error: 2.435 38.77
Average loss over 10868822 tokens: 1.877, valid loss/error: 2.408 38.67
Average loss over 10876328 tokens: 1.873, valid loss/error: 2.396 38.75
Average loss over 10879001 tokens: 1.868, valid loss/error: 2.388 38.75
Average loss over 10877740 tokens: 1.876, valid loss/error: 2.402 38.76
Average loss over 10859179 tokens: 1.875, valid loss/error: 2.427 38.76
Average loss over 10877464 tokens: 1.877, valid loss/error: 2.406 38.72
Average loss over 10882230 tokens: 1.870, valid loss/error: 2.394 38.80
Average loss over 10882392 tokens: 1.873, valid loss/error: 2.419 38.80
Average loss over 5398680 tokens: 1.871
Epoch: 16, train loss: 1.871, valid loss/error: 2.408 38.76
Average loss over 10867533 tokens: 1.873, valid loss/error: 2.401 38.78
Average loss over 10867595 tokens: 1.870, valid loss/error: 2.375 38.72
Average loss over 10902897 tokens: 1.872, valid loss/error: 2.416 38.73
Average loss over 10883817 tokens: 1.867, valid loss/error: 2.392 38.73
Average loss over 10887161 tokens: 1.870, valid loss/error: 2.413 38.75
Average loss over 10892080 tokens: 1.877, valid loss/error: 2.382 38.71
Average loss over 10879549 tokens: 1.875, valid loss/error: 2.395 38.76
Average loss over 10876516 tokens: 1.867, valid loss/error: 2.388 38.74
Average loss over 10887956 tokens: 1.868, valid loss/error: 2.400 38.71
Average loss over 10873081 tokens: 1.862, valid loss/error: 2.383 38.66
New best model saved
Average loss over 10881524 tokens: 1.872, valid loss/error: 2.390 38.71
Average loss over 10883621 tokens: 1.877, valid loss/error: 2.380 38.73
Average loss over 10883295 tokens: 1.869, valid loss/error: 2.408 38.78
Average loss over 10880988 tokens: 1.872, valid loss/error: 2.389 38.75
Average loss over 10872716 tokens: 1.874, valid loss/error: 2.404 38.80
Average loss over 10875787 tokens: 1.876, valid loss/error: 2.373 38.76
Average loss over 10851275 tokens: 1.869, valid loss/error: 2.408 38.79
Average loss over 10866892 tokens: 1.869, valid loss/error: 2.407 38.71
Average loss over 5407014 tokens: 1.865
Epoch: 17, train loss: 1.871, valid loss/error: 2.375 38.74
Average loss over 10872896 tokens: 1.863, valid loss/error: 2.393 38.74
Average loss over 10870845 tokens: 1.872, valid loss/error: 2.408 38.78
Average loss over 10869594 tokens: 1.882, valid loss/error: 2.440 38.72
Average loss over 10856137 tokens: 1.869, valid loss/error: 2.381 38.71
Average loss over 10885000 tokens: 1.871, valid loss/error: 2.385 38.72
Average loss over 10877067 tokens: 1.881, valid loss/error: 2.375 38.75
Average loss over 10874413 tokens: 1.867, valid loss/error: 2.402 38.66
Average loss over 10892300 tokens: 1.868, valid loss/error: 2.386 38.70
Average loss over 10870291 tokens: 1.866, valid loss/error: 2.403 38.69
Average loss over 10879965 tokens: 1.872, valid loss/error: 2.420 38.76
Average loss over 10898036 tokens: 1.859, valid loss/error: 2.402 38.78
Average loss over 10869424 tokens: 1.869, valid loss/error: 2.371 38.74
Average loss over 10887220 tokens: 1.874, valid loss/error: 2.396 38.74
Average loss over 10869048 tokens: 1.869, valid loss/error: 2.395 38.78
Average loss over 10891232 tokens: 1.869, valid loss/error: 2.419 38.73
Average loss over 10886635 tokens: 1.865, valid loss/error: 2.437 38.68
Average loss over 10870937 tokens: 1.867, valid loss/error: 2.373 38.71
Average loss over 10881963 tokens: 1.871, valid loss/error: 2.399 38.76
Average loss over 5389176 tokens: 1.875
Epoch: 18, train loss: 1.870, valid loss/error: 2.371 38.73
Average loss over 10881728 tokens: 1.867, valid loss/error: 2.365 38.71
New best model saved
Average loss over 10877937 tokens: 1.864, valid loss/error: 2.386 38.73
Average loss over 10897858 tokens: 1.876, valid loss/error: 2.383 38.71
Average loss over 10878594 tokens: 1.866, valid loss/error: 2.381 38.73
Average loss over 10873922 tokens: 1.868, valid loss/error: 2.408 38.66
Average loss over 10868998 tokens: 1.864, valid loss/error: 2.373 38.68
Average loss over 10883071 tokens: 1.871, valid loss/error: 2.371 38.73
Average loss over 10874310 tokens: 1.874, valid loss/error: 2.388 38.81
Average loss over 10864056 tokens: 1.873, valid loss/error: 2.386 38.77
Average loss over 10874666 tokens: 1.867, valid loss/error: 2.392 38.72
Average loss over 10857773 tokens: 1.876, valid loss/error: 2.393 38.78
Average loss over 10887748 tokens: 1.867, valid loss/error: 2.414 38.80
Average loss over 10859646 tokens: 1.875, valid loss/error: 2.390 38.76
Average loss over 10901404 tokens: 1.869, valid loss/error: 2.403 38.71
Average loss over 10878457 tokens: 1.866, valid loss/error: 2.407 38.71
Average loss over 10888439 tokens: 1.871, valid loss/error: 2.392 38.70
Average loss over 10896456 tokens: 1.871, valid loss/error: 2.407 38.68
Average loss over 10885099 tokens: 1.873, valid loss/error: 2.369 38.71
Average loss over 5393733 tokens: 1.874
Epoch: 19, train loss: 1.870, valid loss/error: 2.414 38.69
Average loss over 10880437 tokens: 1.861, valid loss/error: 2.401 38.68
Average loss over 10881612 tokens: 1.866, valid loss/error: 2.418 38.68
Average loss over 10877396 tokens: 1.867, valid loss/error: 2.419 38.70
Average loss over 10873008 tokens: 1.875, valid loss/error: 2.382 38.64
New best model saved
Average loss over 10871709 tokens: 1.868, valid loss/error: 2.396 38.68
Average loss over 10868636 tokens: 1.868, valid loss/error: 2.383 38.67
Average loss over 10879986 tokens: 1.864, valid loss/error: 2.410 38.68
Average loss over 10875858 tokens: 1.861, valid loss/error: 2.396 38.75
Average loss over 10890291 tokens: 1.876, valid loss/error: 2.384 38.73
Average loss over 10871789 tokens: 1.872, valid loss/error: 2.397 38.70
Average loss over 10863960 tokens: 1.865, valid loss/error: 2.413 38.78
Average loss over 10889249 tokens: 1.876, valid loss/error: 2.402 38.76
Average loss over 10874108 tokens: 1.863, valid loss/error: 2.386 38.73
Average loss over 10879172 tokens: 1.876, valid loss/error: 2.424 38.78
Average loss over 10885384 tokens: 1.872, valid loss/error: 2.399 38.76
Average loss over 10883964 tokens: 1.868, valid loss/error: 2.370 38.76
Average loss over 10871509 tokens: 1.867, valid loss/error: 2.413 38.75
Average loss over 10861145 tokens: 1.867, valid loss/error: 2.387 38.79
Average loss over 5389416 tokens: 1.868
Epoch: 20, train loss: 1.868, valid loss/error: 2.391 38.82
Average loss over 10893883 tokens: 1.872, valid loss/error: 2.404 38.78
Average loss over 10885442 tokens: 1.868, valid loss/error: 2.376 38.64
Average loss over 10870904 tokens: 1.871, valid loss/error: 2.403 38.70
Average loss over 10873923 tokens: 1.861, valid loss/error: 2.378 38.78
Average loss over 10871715 tokens: 1.871, valid loss/error: 2.389 38.78
Average loss over 10881364 tokens: 1.867, valid loss/error: 2.383 38.72
Average loss over 10888612 tokens: 1.874, valid loss/error: 2.385 38.75
Average loss over 10877542 tokens: 1.869, valid loss/error: 2.402 38.69
Average loss over 10878707 tokens: 1.873, valid loss/error: 2.394 38.79
Average loss over 10890724 tokens: 1.865, valid loss/error: 2.374 38.71
Average loss over 10879432 tokens: 1.864, valid loss/error: 2.379 38.75
Average loss over 10870473 tokens: 1.866, valid loss/error: 2.402 38.67
Average loss over 10865721 tokens: 1.865, valid loss/error: 2.366 38.76
Average loss over 10873953 tokens: 1.864, valid loss/error: 2.379 38.75
Average loss over 10882732 tokens: 1.877, valid loss/error: 2.373 38.73
Average loss over 10879514 tokens: 1.868, valid loss/error: 2.390 38.62
New best model saved
Average loss over 10876179 tokens: 1.873, valid loss/error: 2.396 38.72
Average loss over 10875546 tokens: 1.868, valid loss/error: 2.379 38.68
Average loss over 5396666 tokens: 1.874
Epoch: 21, train loss: 1.869, valid loss/error: 2.428 38.63
Average loss over 10872728 tokens: 1.872, valid loss/error: 2.386 38.71
Average loss over 10854354 tokens: 1.873, valid loss/error: 2.375 38.74
Average loss over 10879838 tokens: 1.876, valid loss/error: 2.364 38.68
New best model saved
Average loss over 10864015 tokens: 1.867, valid loss/error: 2.378 38.69
Average loss over 10891008 tokens: 1.869, valid loss/error: 2.395 38.73
Average loss over 10869822 tokens: 1.869, valid loss/error: 2.409 38.75
Average loss over 10871527 tokens: 1.871, valid loss/error: 2.446 38.73
Average loss over 10885506 tokens: 1.862, valid loss/error: 2.383 38.72
Average loss over 10881922 tokens: 1.866, valid loss/error: 2.397 38.75
Average loss over 10868109 tokens: 1.867, valid loss/error: 2.399 38.78
Average loss over 10882375 tokens: 1.873, valid loss/error: 2.383 38.71
Average loss over 10855807 tokens: 1.868, valid loss/error: 2.383 38.77
Average loss over 10869505 tokens: 1.871, valid loss/error: 2.406 38.71
Average loss over 10887739 tokens: 1.865, valid loss/error: 2.397 38.77
Average loss over 10886963 tokens: 1.867, valid loss/error: 2.391 38.78
Average loss over 10875732 tokens: 1.863, valid loss/error: 2.404 38.67
Average loss over 10864619 tokens: 1.855, valid loss/error: 2.385 38.77
Average loss over 10893223 tokens: 1.866, valid loss/error: 2.363 38.65
New best model saved
Average loss over 5397939 tokens: 1.870
Epoch: 22, train loss: 1.868, valid loss/error: 2.430 38.66
Average loss over 10873470 tokens: 1.868, valid loss/error: 2.395 38.72
Average loss over 10854564 tokens: 1.862, valid loss/error: 2.389 38.71
Average loss over 10884793 tokens: 1.857, valid loss/error: 2.401 38.75
Average loss over 10876643 tokens: 1.871, valid loss/error: 2.362 38.76
New best model saved
Average loss over 10855042 tokens: 1.867, valid loss/error: 2.393 38.76
Average loss over 10876442 tokens: 1.869, valid loss/error: 2.386 38.71
Average loss over 10885780 tokens: 1.867, valid loss/error: 2.400 38.65
Average loss over 10865473 tokens: 1.869, valid loss/error: 2.411 38.68
Average loss over 10870775 tokens: 1.870, valid loss/error: 2.419 38.73
Average loss over 10858466 tokens: 1.862, valid loss/error: 2.393 38.70
Average loss over 10864121 tokens: 1.872, valid loss/error: 2.358 38.68
New best model saved
Average loss over 10870219 tokens: 1.864, valid loss/error: 2.357 38.72
New best model saved
Average loss over 10871169 tokens: 1.864, valid loss/error: 2.384 38.72
Average loss over 10883927 tokens: 1.866, valid loss/error: 2.378 38.75
Average loss over 10888176 tokens: 1.872, valid loss/error: 2.387 38.73
Average loss over 10860840 tokens: 1.867, valid loss/error: 2.372 38.71
Average loss over 10863089 tokens: 1.874, valid loss/error: 2.383 38.72
Average loss over 10894322 tokens: 1.866, valid loss/error: 2.405 38.68
Average loss over 5404410 tokens: 1.870
Epoch: 23, train loss: 1.867, valid loss/error: 2.394 38.73
Average loss over 10876836 tokens: 1.874, valid loss/error: 2.393 38.69
Average loss over 10896177 tokens: 1.869, valid loss/error: 2.384 38.71
Average loss over 10884610 tokens: 1.872, valid loss/error: 2.404 38.74
Average loss over 10864640 tokens: 1.871, valid loss/error: 2.388 38.69
Average loss over 10879698 tokens: 1.868, valid loss/error: 2.387 38.62
New best model saved
Average loss over 10870009 tokens: 1.867, valid loss/error: 2.411 38.68
Average loss over 10886102 tokens: 1.873, valid loss/error: 2.394 38.76
Average loss over 10864907 tokens: 1.864, valid loss/error: 2.419 38.74
Average loss over 10878881 tokens: 1.861, valid loss/error: 2.392 38.71
Average loss over 10874816 tokens: 1.864, valid loss/error: 2.397 38.68
Average loss over 10875804 tokens: 1.866, valid loss/error: 2.406 38.66
Average loss over 10884138 tokens: 1.869, valid loss/error: 2.378 38.60
New best model saved
Average loss over 10878131 tokens: 1.870, valid loss/error: 2.416 38.72
Average loss over 10862058 tokens: 1.861, valid loss/error: 2.401 38.74
Average loss over 10883040 tokens: 1.870, valid loss/error: 2.393 38.71
Average loss over 10877710 tokens: 1.873, valid loss/error: 2.390 38.68
Average loss over 10885053 tokens: 1.859, valid loss/error: 2.406 38.70
Average loss over 10879552 tokens: 1.865, valid loss/error: 2.389 38.66
Average loss over 5411984 tokens: 1.864
Epoch: 24, train loss: 1.868, valid loss/error: 2.393 38.75
Average loss over 10865158 tokens: 1.866, valid loss/error: 2.391 38.75
Average loss over 10874929 tokens: 1.856, valid loss/error: 2.385 38.74
Average loss over 10874636 tokens: 1.869, valid loss/error: 2.390 38.69
Average loss over 10874288 tokens: 1.865, valid loss/error: 2.381 38.68
Average loss over 10887316 tokens: 1.855, valid loss/error: 2.414 38.70
Average loss over 10878632 tokens: 1.868, valid loss/error: 2.400 38.70
Average loss over 10895431 tokens: 1.859, valid loss/error: 2.406 38.74
Average loss over 10882677 tokens: 1.866, valid loss/error: 2.372 38.70
Average loss over 10879472 tokens: 1.872, valid loss/error: 2.372 38.70
Average loss over 10877590 tokens: 1.872, valid loss/error: 2.383 38.68
Average loss over 10877783 tokens: 1.867, valid loss/error: 2.385 38.65
Average loss over 10871475 tokens: 1.865, valid loss/error: 2.393 38.78
Average loss over 10880159 tokens: 1.872, valid loss/error: 2.402 38.70
Average loss over 10888719 tokens: 1.868, valid loss/error: 2.394 38.76
Average loss over 10866658 tokens: 1.876, valid loss/error: 2.385 38.74
Average loss over 10885102 tokens: 1.871, valid loss/error: 2.390 38.77
Average loss over 10863930 tokens: 1.862, valid loss/error: 2.361 38.75
Average loss over 10905114 tokens: 1.871, valid loss/error: 2.403 38.69
Average loss over 5396649 tokens: 1.856
Epoch: 25, train loss: 1.866, valid loss/error: 2.385 38.69
Average loss over 10887190 tokens: 1.869, valid loss/error: 2.420 38.78
Average loss over 10883684 tokens: 1.866, valid loss/error: 2.382 38.71
Average loss over 10882024 tokens: 1.872, valid loss/error: 2.378 38.71
Average loss over 10876682 tokens: 1.866, valid loss/error: 2.385 38.74
Average loss over 10887350 tokens: 1.869, valid loss/error: 2.392 38.68
Average loss over 10879520 tokens: 1.863, valid loss/error: 2.415 38.79
Average loss over 10891933 tokens: 1.863, valid loss/error: 2.393 38.76
Average loss over 10886210 tokens: 1.873, valid loss/error: 2.370 38.71
Average loss over 10881401 tokens: 1.864, valid loss/error: 2.405 38.72
Average loss over 10872900 tokens: 1.863, valid loss/error: 2.386 38.73
Average loss over 10865645 tokens: 1.865, valid loss/error: 2.398 38.78
Average loss over 10866163 tokens: 1.864, valid loss/error: 2.407 38.83
Average loss over 10894330 tokens: 1.859, valid loss/error: 2.379 38.80
Average loss over 10871935 tokens: 1.866, valid loss/error: 2.400 38.78
Average loss over 10890070 tokens: 1.858, valid loss/error: 2.403 38.70
Average loss over 10891160 tokens: 1.862, valid loss/error: 2.393 38.79
Average loss over 10864333 tokens: 1.869, valid loss/error: 2.382 38.73
Average loss over 10891572 tokens: 1.875, valid loss/error: 2.368 38.74
Average loss over 5399202 tokens: 1.862
Epoch: 26, train loss: 1.866, valid loss/error: 2.368 38.72
Average loss over 10895144 tokens: 1.866, valid loss/error: 2.382 38.66
Average loss over 10878134 tokens: 1.867, valid loss/error: 2.385 38.70
Average loss over 10862051 tokens: 1.863, valid loss/error: 2.365 38.63
Average loss over 10880068 tokens: 1.867, valid loss/error: 2.377 38.68
Average loss over 10869134 tokens: 1.865, valid loss/error: 2.387 38.78
Average loss over 10877639 tokens: 1.859, valid loss/error: 2.387 38.74
Average loss over 10870183 tokens: 1.863, valid loss/error: 2.364 38.73
Average loss over 10870375 tokens: 1.866, valid loss/error: 2.414 38.75
Average loss over 10882246 tokens: 1.864, valid loss/error: 2.376 38.73
Average loss over 10872153 tokens: 1.869, valid loss/error: 2.416 38.75
Average loss over 10874396 tokens: 1.863, valid loss/error: 2.402 38.71
Average loss over 10883160 tokens: 1.867, valid loss/error: 2.393 38.71
Average loss over 10877632 tokens: 1.859, valid loss/error: 2.368 38.73
Average loss over 10859224 tokens: 1.865, valid loss/error: 2.400 38.78
Average loss over 10887325 tokens: 1.867, valid loss/error: 2.405 38.71
Average loss over 10890949 tokens: 1.870, valid loss/error: 2.376 38.75
Average loss over 10892520 tokens: 1.865, valid loss/error: 2.370 38.75
Average loss over 10890750 tokens: 1.869, valid loss/error: 2.380 38.78
Average loss over 5402468 tokens: 1.870
Epoch: 27, train loss: 1.865, valid loss/error: 2.403 38.71
Average loss over 10878720 tokens: 1.859, valid loss/error: 2.384 38.71
Average loss over 10892124 tokens: 1.857, valid loss/error: 2.367 38.78
Average loss over 10878411 tokens: 1.864, valid loss/error: 2.382 38.79
Average loss over 10892191 tokens: 1.865, valid loss/error: 2.378 38.69
Average loss over 10879676 tokens: 1.869, valid loss/error: 2.355 38.77
New best model saved
Average loss over 10880122 tokens: 1.862, valid loss/error: 2.368 38.70
Average loss over 10890523 tokens: 1.862, valid loss/error: 2.381 38.80
Average loss over 10872718 tokens: 1.868, valid loss/error: 2.370 38.74
Average loss over 10863996 tokens: 1.862, valid loss/error: 2.374 38.74
Average loss over 10862118 tokens: 1.863, valid loss/error: 2.364 38.75
Average loss over 10885674 tokens: 1.863, valid loss/error: 2.394 38.69
Average loss over 10861478 tokens: 1.862, valid loss/error: 2.370 38.69
Average loss over 10875845 tokens: 1.871, valid loss/error: 2.350 38.65
New best model saved
Average loss over 10867859 tokens: 1.855, valid loss/error: 2.376 38.73
Average loss over 10868090 tokens: 1.862, valid loss/error: 2.395 38.71
Average loss over 10898310 tokens: 1.872, valid loss/error: 2.354 38.75
Average loss over 10864422 tokens: 1.866, valid loss/error: 2.365 38.69
Average loss over 10873771 tokens: 1.862, valid loss/error: 2.366 38.72
Average loss over 5397979 tokens: 1.868
Epoch: 28, train loss: 1.864, valid loss/error: 2.384 38.73
Average loss over 10872246 tokens: 1.869, valid loss/error: 2.380 38.68
Average loss over 10887519 tokens: 1.861, valid loss/error: 2.387 38.66
Average loss over 10863176 tokens: 1.863, valid loss/error: 2.360 38.68
Average loss over 10883971 tokens: 1.863, valid loss/error: 2.376 38.69
Average loss over 10879636 tokens: 1.858, valid loss/error: 2.380 38.69
Average loss over 10865830 tokens: 1.866, valid loss/error: 2.375 38.68
Average loss over 10885937 tokens: 1.864, valid loss/error: 2.379 38.71
Average loss over 10873543 tokens: 1.862, valid loss/error: 2.365 38.67
Average loss over 10882537 tokens: 1.862, valid loss/error: 2.367 38.73
Average loss over 10868599 tokens: 1.863, valid loss/error: 2.377 38.68
Average loss over 10881048 tokens: 1.866, valid loss/error: 2.365 38.67
Average loss over 10887204 tokens: 1.867, valid loss/error: 2.373 38.67
Average loss over 10885420 tokens: 1.871, valid loss/error: 2.389 38.59
New best model saved
Average loss over 10886759 tokens: 1.869, valid loss/error: 2.402 38.65
Average loss over 10893291 tokens: 1.862, valid loss/error: 2.393 38.73
Average loss over 10852375 tokens: 1.863, valid loss/error: 2.378 38.64
Average loss over 10880604 tokens: 1.873, valid loss/error: 2.383 38.69
Average loss over 10867431 tokens: 1.862, valid loss/error: 2.362 38.70
Average loss over 5393448 tokens: 1.854
Epoch: 29, train loss: 1.864, valid loss/error: 2.373 38.74
Average loss over 10874603 tokens: 1.875, valid loss/error: 2.358 38.72
Average loss over 10877404 tokens: 1.861, valid loss/error: 2.388 38.71
Average loss over 10892891 tokens: 1.855, valid loss/error: 2.374 38.76
Average loss over 10864096 tokens: 1.865, valid loss/error: 2.384 38.69
Average loss over 10853193 tokens: 1.862, valid loss/error: 2.372 38.71
Average loss over 10884637 tokens: 1.871, valid loss/error: 2.396 38.68
Average loss over 10870887 tokens: 1.867, valid loss/error: 2.404 38.68
Average loss over 10882746 tokens: 1.862, valid loss/error: 2.376 38.68
Average loss over 10870119 tokens: 1.868, valid loss/error: 2.363 38.68
Average loss over 10870552 tokens: 1.873, valid loss/error: 2.405 38.75
Average loss over 10856146 tokens: 1.860, valid loss/error: 2.389 38.74
Average loss over 10878084 tokens: 1.857, valid loss/error: 2.375 38.70
Average loss over 10890835 tokens: 1.865, valid loss/error: 2.381 38.66
Average loss over 10873997 tokens: 1.868, valid loss/error: 2.395 38.72
Average loss over 10891443 tokens: 1.866, valid loss/error: 2.383 38.68
Average loss over 10863534 tokens: 1.864, valid loss/error: 2.371 38.66
Average loss over 10887207 tokens: 1.855, valid loss/error: 2.399 38.69
Average loss over 10893039 tokens: 1.856, valid loss/error: 2.356 38.69
Average loss over 5405874 tokens: 1.860
Epoch: 30, train loss: 1.864, valid loss/error: 2.359 38.68
Average loss over 10876789 tokens: 1.869, valid loss/error: 2.363 38.61
Average loss over 10894268 tokens: 1.855, valid loss/error: 2.361 38.63
Average loss over 10862120 tokens: 1.868, valid loss/error: 2.366 38.68
Average loss over 10862266 tokens: 1.868, valid loss/error: 2.374 38.71
Average loss over 10888704 tokens: 1.862, valid loss/error: 2.369 38.68
Average loss over 10868392 tokens: 1.862, valid loss/error: 2.367 38.69
Average loss over 10885948 tokens: 1.865, valid loss/error: 2.401 38.73
Average loss over 10882457 tokens: 1.864, valid loss/error: 2.374 38.63
Average loss over 10878336 tokens: 1.862, valid loss/error: 2.395 38.62
Average loss over 10878568 tokens: 1.866, valid loss/error: 2.380 38.73
Average loss over 10870460 tokens: 1.864, valid loss/error: 2.379 38.70
Average loss over 10879151 tokens: 1.861, valid loss/error: 2.400 38.65
Average loss over 10873837 tokens: 1.862, valid loss/error: 2.376 38.68
Average loss over 10887869 tokens: 1.864, valid loss/error: 2.399 38.69
Average loss over 10894427 tokens: 1.868, valid loss/error: 2.374 38.58
New best model saved
Average loss over 10873337 tokens: 1.867, valid loss/error: 2.376 38.70
Average loss over 10864404 tokens: 1.861, valid loss/error: 2.418 38.69
Average loss over 10867869 tokens: 1.861, valid loss/error: 2.390 38.64
Average loss over 5391588 tokens: 1.851
Epoch: 31, train loss: 1.863, valid loss/error: 2.395 38.63
Average loss over 10871260 tokens: 1.860, valid loss/error: 2.371 38.68
Average loss over 10870157 tokens: 1.858, valid loss/error: 2.363 38.66
Average loss over 10863189 tokens: 1.863, valid loss/error: 2.379 38.77
Average loss over 10871147 tokens: 1.860, valid loss/error: 2.368 38.74
Average loss over 10871114 tokens: 1.860, valid loss/error: 2.385 38.66
Average loss over 10881044 tokens: 1.855, valid loss/error: 2.372 38.67
Average loss over 10890464 tokens: 1.863, valid loss/error: 2.369 38.67
Average loss over 10876620 tokens: 1.869, valid loss/error: 2.364 38.71
Average loss over 10877050 tokens: 1.866, valid loss/error: 2.405 38.68
Average loss over 10897955 tokens: 1.866, valid loss/error: 2.384 38.66
Average loss over 10880194 tokens: 1.865, valid loss/error: 2.376 38.66
Average loss over 10882611 tokens: 1.867, valid loss/error: 2.397 38.70
Average loss over 10871436 tokens: 1.867, valid loss/error: 2.348 38.65
New best model saved
Average loss over 10872540 tokens: 1.866, valid loss/error: 2.375 38.74
Average loss over 10880134 tokens: 1.859, valid loss/error: 2.391 38.74
Average loss over 10877986 tokens: 1.862, valid loss/error: 2.366 38.68
Average loss over 10898181 tokens: 1.864, valid loss/error: 2.394 38.66
Average loss over 10880644 tokens: 1.864, valid loss/error: 2.370 38.70
Average loss over 5410103 tokens: 1.850
Epoch: 32, train loss: 1.863, valid loss/error: 2.359 38.76
Average loss over 10887701 tokens: 1.865, valid loss/error: 2.370 38.72
Average loss over 10865960 tokens: 1.865, valid loss/error: 2.361 38.64
Average loss over 10872783 tokens: 1.861, valid loss/error: 2.366 38.66
Average loss over 10872166 tokens: 1.858, valid loss/error: 2.359 38.75
Average loss over 10880717 tokens: 1.867, valid loss/error: 2.400 38.73
Average loss over 10856423 tokens: 1.869, valid loss/error: 2.372 38.77
Average loss over 10879697 tokens: 1.861, valid loss/error: 2.358 38.79
Average loss over 10888864 tokens: 1.862, valid loss/error: 2.390 38.79
Average loss over 10867793 tokens: 1.861, valid loss/error: 2.380 38.74
Average loss over 10887862 tokens: 1.857, valid loss/error: 2.385 38.78
Average loss over 10884809 tokens: 1.857, valid loss/error: 2.363 38.70
Average loss over 10893920 tokens: 1.868, valid loss/error: 2.368 38.68
Average loss over 10880082 tokens: 1.863, valid loss/error: 2.363 38.78
Average loss over 10856605 tokens: 1.861, valid loss/error: 2.372 38.70
Average loss over 10884320 tokens: 1.864, valid loss/error: 2.392 38.75
Average loss over 10878045 tokens: 1.859, valid loss/error: 2.362 38.73
Average loss over 10857989 tokens: 1.862, valid loss/error: 2.374 38.76
Average loss over 10883419 tokens: 1.852, valid loss/error: 2.367 38.70
Average loss over 5404148 tokens: 1.858
Epoch: 33, train loss: 1.862, valid loss/error: 2.375 38.68
Average loss over 10873328 tokens: 1.862, valid loss/error: 2.366 38.70
Average loss over 10877521 tokens: 1.861, valid loss/error: 2.390 38.70
Average loss over 10889493 tokens: 1.870, valid loss/error: 2.392 38.72
Average loss over 10870751 tokens: 1.860, valid loss/error: 2.389 38.67
Average loss over 10885142 tokens: 1.859, valid loss/error: 2.377 38.70
Average loss over 10883522 tokens: 1.862, valid loss/error: 2.351 38.71
Average loss over 10858867 tokens: 1.870, valid loss/error: 2.382 38.78
Average loss over 10879056 tokens: 1.863, valid loss/error: 2.350 38.73
Average loss over 10879696 tokens: 1.866, valid loss/error: 2.390 38.67
Average loss over 10882747 tokens: 1.865, valid loss/error: 2.377 38.66
Average loss over 10892170 tokens: 1.856, valid loss/error: 2.390 38.67
Average loss over 10877751 tokens: 1.867, valid loss/error: 2.363 38.65
Average loss over 10865694 tokens: 1.863, valid loss/error: 2.363 38.67
Average loss over 10865971 tokens: 1.858, valid loss/error: 2.396 38.62
Average loss over 10884997 tokens: 1.866, valid loss/error: 2.374 38.69
Average loss over 10871907 tokens: 1.857, valid loss/error: 2.391 38.68
Average loss over 10866833 tokens: 1.856, valid loss/error: 2.366 38.72
Average loss over 10883914 tokens: 1.860, valid loss/error: 2.381 38.72
Average loss over 5404681 tokens: 1.863
Epoch: 34, train loss: 1.862, valid loss/error: 2.387 38.68
Average loss over 10864315 tokens: 1.859, valid loss/error: 2.402 38.66
Average loss over 10873838 tokens: 1.857, valid loss/error: 2.378 38.76
Average loss over 10887171 tokens: 1.861, valid loss/error: 2.402 38.71
Average loss over 10881731 tokens: 1.859, valid loss/error: 2.398 38.66
Average loss over 10904647 tokens: 1.863, valid loss/error: 2.393 38.71
Average loss over 10883535 tokens: 1.859, valid loss/error: 2.398 38.71
Average loss over 10883804 tokens: 1.863, valid loss/error: 2.372 38.72
Average loss over 10872033 tokens: 1.861, valid loss/error: 2.348 38.70
New best model saved
Average loss over 10882843 tokens: 1.867, valid loss/error: 2.379 38.75
Average loss over 10865802 tokens: 1.860, valid loss/error: 2.381 38.73
Average loss over 10877765 tokens: 1.854, valid loss/error: 2.361 38.73
Average loss over 10879139 tokens: 1.858, valid loss/error: 2.364 38.64
Average loss over 10867394 tokens: 1.857, valid loss/error: 2.383 38.71
Average loss over 10866164 tokens: 1.867, valid loss/error: 2.372 38.71
Average loss over 10894614 tokens: 1.865, valid loss/error: 2.371 38.67
Average loss over 10884440 tokens: 1.867, valid loss/error: 2.361 38.63
Average loss over 10871061 tokens: 1.874, valid loss/error: 2.372 38.71
Average loss over 10868566 tokens: 1.858, valid loss/error: 2.364 38.68
Average loss over 5405539 tokens: 1.868
Epoch: 35, train loss: 1.862, valid loss/error: 2.372 38.62
Average loss over 10871668 tokens: 1.853, valid loss/error: 2.394 38.68
Average loss over 10868378 tokens: 1.862, valid loss/error: 2.391 38.74
Average loss over 10849676 tokens: 1.855, valid loss/error: 2.400 38.62
Average loss over 10875049 tokens: 1.869, valid loss/error: 2.387 38.68
Average loss over 10870087 tokens: 1.849, valid loss/error: 2.366 38.69
Average loss over 10882681 tokens: 1.869, valid loss/error: 2.377 38.72
Average loss over 10869492 tokens: 1.859, valid loss/error: 2.371 38.71
Average loss over 10874519 tokens: 1.860, valid loss/error: 2.392 38.70
Average loss over 10898961 tokens: 1.860, valid loss/error: 2.384 38.70
Average loss over 10867036 tokens: 1.863, valid loss/error: 2.386 38.77
Average loss over 10883732 tokens: 1.871, valid loss/error: 2.385 38.71
Average loss over 10864632 tokens: 1.856, valid loss/error: 2.393 38.68
Average loss over 10862181 tokens: 1.859, valid loss/error: 2.348 38.71
New best model saved
Average loss over 10873098 tokens: 1.858, valid loss/error: 2.351 38.67
Average loss over 10887849 tokens: 1.865, valid loss/error: 2.390 38.64
Average loss over 10896290 tokens: 1.859, valid loss/error: 2.358 38.65
Average loss over 10881315 tokens: 1.861, valid loss/error: 2.390 38.76
Average loss over 10860240 tokens: 1.862, valid loss/error: 2.379 38.72
Average loss over 5392421 tokens: 1.852
Epoch: 36, train loss: 1.860, valid loss/error: 2.380 38.65
Average loss over 10905650 tokens: 1.862, valid loss/error: 2.358 38.65
Average loss over 10895281 tokens: 1.859, valid loss/error: 2.371 38.60
Average loss over 10878883 tokens: 1.856, valid loss/error: 2.372 38.60
Average loss over 10877743 tokens: 1.862, valid loss/error: 2.373 38.68
Average loss over 10879345 tokens: 1.859, valid loss/error: 2.368 38.71
Average loss over 10868383 tokens: 1.867, valid loss/error: 2.403 38.71
Average loss over 10877681 tokens: 1.860, valid loss/error: 2.379 38.69
Average loss over 10882315 tokens: 1.861, valid loss/error: 2.373 38.65
Average loss over 10878517 tokens: 1.861, valid loss/error: 2.377 38.58
Average loss over 10868225 tokens: 1.862, valid loss/error: 2.400 38.68
Average loss over 10879386 tokens: 1.863, valid loss/error: 2.369 38.61
Average loss over 10875154 tokens: 1.867, valid loss/error: 2.389 38.62
Average loss over 10872709 tokens: 1.856, valid loss/error: 2.366 38.66
Average loss over 10889115 tokens: 1.862, valid loss/error: 2.378 38.70
Average loss over 10875024 tokens: 1.870, valid loss/error: 2.364 38.67
Average loss over 10902755 tokens: 1.860, valid loss/error: 2.382 38.70
Average loss over 10879619 tokens: 1.853, valid loss/error: 2.374 38.68
Average loss over 10872668 tokens: 1.864, valid loss/error: 2.382 38.65
Average loss over 5399215 tokens: 1.866
Epoch: 37, train loss: 1.861, valid loss/error: 2.369 38.65
Average loss over 10859768 tokens: 1.860, valid loss/error: 2.372 38.61
Average loss over 10860142 tokens: 1.856, valid loss/error: 2.342 38.65
New best model saved
Average loss over 10884162 tokens: 1.861, valid loss/error: 2.368 38.59
Average loss over 10892303 tokens: 1.862, valid loss/error: 2.355 38.59
Average loss over 10861070 tokens: 1.865, valid loss/error: 2.381 38.59
Average loss over 10874111 tokens: 1.863, valid loss/error: 2.366 38.72
Average loss over 10871670 tokens: 1.865, valid loss/error: 2.387 38.61
Average loss over 10885668 tokens: 1.865, valid loss/error: 2.363 38.64
Average loss over 10875090 tokens: 1.862, valid loss/error: 2.353 38.60
Average loss over 10881744 tokens: 1.856, valid loss/error: 2.397 38.62
Average loss over 10883175 tokens: 1.860, valid loss/error: 2.365 38.70
Average loss over 10877196 tokens: 1.857, valid loss/error: 2.348 38.72
Average loss over 10891108 tokens: 1.850, valid loss/error: 2.361 38.62
Average loss over 10883638 tokens: 1.856, valid loss/error: 2.386 38.63
Average loss over 10885607 tokens: 1.867, valid loss/error: 2.346 38.60
Average loss over 10872761 tokens: 1.856, valid loss/error: 2.381 38.54
New best model saved
Average loss over 10881041 tokens: 1.863, valid loss/error: 2.390 38.55
Average loss over 10853849 tokens: 1.857, valid loss/error: 2.388 38.56
Average loss over 5395369 tokens: 1.868
Epoch: 38, train loss: 1.860, valid loss/error: 2.377 38.59
Average loss over 10858165 tokens: 1.857, valid loss/error: 2.354 38.59
Average loss over 7952891 tokens: 1.857
Epoch: 39, train loss: 1.857, valid loss/error: 2.373 38.59
Last training step reached
model saved
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 456, in <module>
    minloss, minerr = eva(vd, nvalid, high_teach_model, teach_model,student_model, lossf, distilllossf, cuda_device, multi_gpu, use_amp)
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 218, in eva
    stu_out_softmax_withoutT, stu_out_sotfmax_byT, stu_out = stu_model(seq_batch, seq_o.narrow(1, 0, lo))
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_NMT_T2.py", line 56, in forward
    return self.dec(self.enc(inpute, _mask), inputo, _mask)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_Decoder_T2.py", line 179, in forward
    T = self.T()
TypeError: 'float' object is not callable
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 456, in <module>
    minloss, minerr = eva(vd, nvalid, high_teach_model, teach_model,student_model, lossf, distilllossf, cuda_device, multi_gpu, use_amp)
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 218, in eva
    stu_out_softmax_withoutT, stu_out_sotfmax_byT, stu_out = stu_model(seq_batch, seq_o.narrow(1, 0, lo))
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_NMT_T2.py", line 56, in forward
    return self.dec(self.enc(inpute, _mask), inputo, _mask)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_Decoder_T2.py", line 179, in forward
    T = self.T()
TypeError: 'int' object is not callable
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 323, in <module>
    mymodel_teach = NMT(cnfg.isize, nwordi, nwordt, cnfg.nlayer, cnfg.ff_hsize, cnfg.drop, cnfg.attn_drop, cnfg.act_drop,
  File "/home/yfguo/transformer_924/transformer/distill_NMT_T2.py", line 37, in __init__
    self.enc = Encoder(isize, snwd, enc_layer, fhsize=fhsize, dropout=dropout, attn_drop=attn_drop, act_drop=act_drop, num_head=num_head, xseql=xseql, ahsize=ahsize, norm_output=norm_output)
  File "/home/yfguo/transformer_924/transformer/Encoder.py", line 112, in __init__
    self.nets = nn.ModuleList([EncoderLayer(isize, fhsize=_fhsize, dropout=dropout, attn_drop=attn_drop, act_drop=act_drop, num_head=num_head, ahsize=_ahsize) for i in range(num_layer)])
  File "/home/yfguo/transformer_924/transformer/Encoder.py", line 112, in <listcomp>
    self.nets = nn.ModuleList([EncoderLayer(isize, fhsize=_fhsize, dropout=dropout, attn_drop=attn_drop, act_drop=act_drop, num_head=num_head, ahsize=_ahsize) for i in range(num_layer)])
  File "/home/yfguo/transformer_924/transformer/Encoder.py", line 39, in __init__
    self.ff = PositionwiseFF(isize, hsize=_fhsize, dropout=dropout, act_drop=act_drop, norm_residual=norm_residual)
  File "/home/yfguo/transformer_924/modules/base.py", line 37, in __init__
    _ = [Linear(isize, _hsize)]
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/linear.py", line 96, in __init__
    self.weight = Parameter(torch.empty((out_features, in_features), **factory_kwargs))
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1626, in __setattr__
    params = self.__dict__.get('_parameters')
AttributeError: 'dict' object has no attribute '__dict__'. Did you mean: '__dir__'?
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5

Session terminated, killing shell...+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 509, in <module>
    terr, done_tokens, cur_checkid, remain_steps, _Dws = train(low_td,middle_td,high_td, tl, vd, nvalid, stu_optimizer, stu_lrsch, high_teach_model,teach_model,student_model, lossf,distilllossf,
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 96, in train
    teach_out_softmax_withoutT, teach_out_sotfmax_byT, teach_out = teach_model(seq_batch, oi)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_NMT_T2.py", line 56, in forward
    return self.dec(self.enc(inpute, _mask), inputo, _mask)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_Decoder_T2.py", line 196, in forward
    out = net(inpute, out, src_pad_mask, _mask)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/transformer/distill_Decoder_T2.py", line 55, in forward
    context = self.ff(context)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/transformer_924/modules/base.py", line 69, in forward
    out = self.net(_out)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/container.py", line 217, in forward
    input = module(input)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1495, in _call_impl
    forward_call = (self._slow_forward if torch._C._get_tracing_state() else self.forward)
AttributeError: module 'torch._C' has no attribute 'torch'
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
Average loss over 21130555 tokens: 2.928, valid loss/error: 2.964 32.65
New best model saved
Average loss over 21167240 tokens: 2.887, valid loss/error: 2.427 32.61
New best model saved
Average loss over 6645593 tokens: 2.844
Epoch: 1, train loss: 2.898, valid loss/error: 2.358 32.57
New best model saved
Average loss over 21142121 tokens: 2.826, valid loss/error: 2.328 32.59
New best model saved
Average loss over 21166432 tokens: 2.826, valid loss/error: 2.326 32.57
New best model saved
Average loss over 6610427 tokens: 2.810
Epoch: 2, train loss: 2.824, valid loss/error: 2.336 32.57
New best model saved
Average loss over 21204564 tokens: 2.819, valid loss/error: 2.317 32.47
New best model saved
task_endeT2.sh: 第 6 行： 64182 段错误               （核心已转储） python ende920404_latest_2teacher_train_distill_sample_T_2.py
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
Average loss over 21130555 tokens: 2.928, valid loss/error: 2.964 32.65
New best model saved
Average loss over 21167240 tokens: 2.887, valid loss/error: 2.427 32.61
New best model saved
Average loss over 6645593 tokens: 2.844
Epoch: 1, train loss: 2.898, valid loss/error: 2.358 32.57
New best model saved
Average loss over 21142121 tokens: 2.826, valid loss/error: 2.328 32.59
New best model saved
Average loss over 21166432 tokens: 2.826, valid loss/error: 2.326 32.57
New best model saved
Average loss over 6610427 tokens: 2.810
Epoch: 2, train loss: 2.824, valid loss/error: 2.336 32.57
New best model saved
Average loss over 21204564 tokens: 2.819, valid loss/error: 2.317 32.47
New best model saved
Average loss over 21113694 tokens: 2.807, valid loss/error: 2.322 32.53
Average loss over 6653044 tokens: 2.816
Epoch: 3, train loss: 2.813, valid loss/error: 2.324 32.58
Average loss over 21186976 tokens: 2.823, valid loss/error: 2.320 32.54
Average loss over 21123622 tokens: 2.802, valid loss/error: 2.311 32.59
New best model saved
Average loss over 6623740 tokens: 2.791
Epoch: 4, train loss: 2.809, valid loss/error: 2.316 32.58
Average loss over 21170103 tokens: 2.808, valid loss/error: 2.313 32.56
Average loss over 21103750 tokens: 2.792, valid loss/error: 2.323 32.55
Average loss over 6640976 tokens: 2.796
Epoch: 5, train loss: 2.800, valid loss/error: 2.312 32.55
Average loss over 21124776 tokens: 2.786, valid loss/error: 2.315 32.55
Average loss over 21166286 tokens: 2.804, valid loss/error: 2.317 32.53
Average loss over 6638709 tokens: 2.794
Epoch: 6, train loss: 2.795, valid loss/error: 2.309 32.55
New best model saved
Average loss over 21147086 tokens: 2.790, valid loss/error: 2.319 32.56
Average loss over 21118643 tokens: 2.787, valid loss/error: 2.312 32.54
Average loss over 6662331 tokens: 2.791
Epoch: 7, train loss: 2.789, valid loss/error: 2.297 32.50
New best model saved
Average loss over 21146190 tokens: 2.783, valid loss/error: 2.307 32.47
Average loss over 21081958 tokens: 2.780, valid loss/error: 2.309 32.49
Average loss over 6663043 tokens: 2.798
Epoch: 8, train loss: 2.784, valid loss/error: 2.315 32.49
Average loss over 21149838 tokens: 2.778, valid loss/error: 2.322 32.48
Average loss over 21117284 tokens: 2.782, valid loss/error: 2.306 32.54
Average loss over 6633691 tokens: 2.780
Epoch: 9, train loss: 2.780, valid loss/error: 2.310 32.52
Average loss over 21144681 tokens: 2.775, valid loss/error: 2.312 32.51
Average loss over 21115496 tokens: 2.772, valid loss/error: 2.299 32.50
Average loss over 6654376 tokens: 2.791
Epoch: 10, train loss: 2.776, valid loss/error: 2.305 32.45
New best model saved
Average loss over 21116051 tokens: 2.769, valid loss/error: 2.326 32.47
Average loss over 21143666 tokens: 2.777, valid loss/error: 2.299 32.53
Average loss over 6649959 tokens: 2.787
Epoch: 11, train loss: 2.775, valid loss/error: 2.295 32.49
New best model saved
Average loss over 21118014 tokens: 2.768, valid loss/error: 2.295 32.48
Average loss over 21183616 tokens: 2.778, valid loss/error: 2.301 32.47
Average loss over 6627652 tokens: 2.750
Epoch: 12, train loss: 2.770, valid loss/error: 2.311 32.46
Average loss over 21113198 tokens: 2.768, valid loss/error: 2.305 32.45
Average loss over 21092092 tokens: 2.770, valid loss/error: 2.292 32.48
New best model saved
Average loss over 6674684 tokens: 2.765
Epoch: 13, train loss: 2.768, valid loss/error: 2.295 32.48
Average loss over 21148115 tokens: 2.762, valid loss/error: 2.290 32.50
New best model saved
Average loss over 21144158 tokens: 2.764, valid loss/error: 2.310 32.51
Average loss over 6618046 tokens: 2.764
Epoch: 14, train loss: 2.763, valid loss/error: 2.302 32.46
Average loss over 21138214 tokens: 2.761, valid loss/error: 2.305 32.47
Average loss over 21094965 tokens: 2.762, valid loss/error: 2.291 32.48
Average loss over 6674624 tokens: 2.740
Epoch: 15, train loss: 2.759, valid loss/error: 2.306 32.49
Average loss over 21127416 tokens: 2.756, valid loss/error: 2.299 32.48
Average loss over 21153822 tokens: 2.763, valid loss/error: 2.297 32.48
task_endeT2.sh: 第 6 行：  3664 段错误               （核心已转储） python ende920404_latest_2teacher_train_distill_sample_T_2.py
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Design models with seed: 666666
Load steacher model from: /home/yfguo/transformer_924/expm/wmt16cache_1div3_data/rs_low/base_morestep_finetuning_for_NBteacher/std_finetuning_moresteps/avg.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_ceshibase/std/checkpoint_12.h5
load student model from: /home/yfguo/transformer_924/expm/wmt16cache/rs/base_finetuning/std_finetuning_moresteps/avg.h5
Init lr: 1e-05, Dev Loss/Error: 3.874 32.67
free(): invalid next size (normal)
task_endeT2.sh: 第 6 行： 27571 已中止               （核心已转储） python ende920404_latest_2teacher_train_distill_sample_T_2.py
+ source /home/yfguo/scripts/init_conda.sh
+++ /home/yfguo/miniconda3/bin/conda shell.bash hook
++ __conda_setup='export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
++ '[' 0 -eq 0 ']'
++ eval 'export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\''

# Copyright (C) 2012 Anaconda, Inc
# SPDX-License-Identifier: BSD-3-Clause

__conda_exe() (
    "$CONDA_EXE" $_CE_M $_CE_CONDA "$@"
)

__conda_hashr() {
    if [ -n "${ZSH_VERSION:+x}" ]; then
        \rehash
    elif [ -n "${POSH_VERSION:+x}" ]; then
        :  # pass
    else
        \hash -r
    fi
}

__conda_activate() {
    if [ -n "${CONDA_PS1_BACKUP:+x}" ]; then
        # Handle transition from shell activated with conda <= 4.3 to a subsequent activation
        # after conda updated to >= 4.4. See issue #6173.
        PS1="$CONDA_PS1_BACKUP"
        \unset CONDA_PS1_BACKUP
    fi
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix "$@")" || \return
    \eval "$ask_conda"
    __conda_hashr
}

__conda_reactivate() {
    \local ask_conda
    ask_conda="$(PS1="${PS1:-}" __conda_exe shell.posix reactivate)" || \return
    \eval "$ask_conda"
    __conda_hashr
}

conda() {
    \local cmd="${1-__missing__}"
    case "$cmd" in
        activate|deactivate)
            __conda_activate "$@"
            ;;
        install|update|upgrade|remove|uninstall)
            __conda_exe "$@" || \return
            __conda_reactivate
            ;;
        *)
            __conda_exe "$@"
            ;;
    esac
}

if [ -z "${CONDA_SHLVL+x}" ]; then
    \export CONDA_SHLVL=0
    # In dev-mode CONDA_EXE is python.exe and on Windows
    # it is in a different relative location to condabin.
    if [ -n "${_CE_CONDA:+x}" ] && [ -n "${WINDIR+x}" ]; then
        PATH="$(\dirname "$CONDA_EXE")/condabin${PATH:+":${PATH}"}"
    else
        PATH="$(\dirname "$(\dirname "$CONDA_EXE")")/condabin${PATH:+":${PATH}"}"
    fi
    \export PATH

    # We'\''re not allowing PS1 to be unbound. It must at least be set.
    # However, we'\''re not exporting it, which can cause problems when starting a second shell
    # via a first shell (i.e. starting zsh from bash).
    if [ -z "${PS1+x}" ]; then
        PS1=
    fi
fi

conda activate base'
+++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /home/yfguo/miniconda3/bin/conda
++++ dirname /home/yfguo/miniconda3/bin
+++ PATH=/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
+++ conda activate base
+++ local cmd=activate
+++ case "$cmd" in
+++ __conda_activate activate base
+++ '[' -n '' ']'
+++ local ask_conda
++++ PS1=
++++ __conda_exe shell.posix activate base
++++ /home/yfguo/miniconda3/bin/conda shell.posix activate base
+++ ask_conda='PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+++ eval 'PS1='\''(base) '\''
export PATH='\''/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++++ PS1='(base) '
++++ export PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ PATH=/home/yfguo/miniconda3/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++++ export CONDA_PREFIX=/home/yfguo/miniconda3
++++ CONDA_PREFIX=/home/yfguo/miniconda3
++++ export CONDA_SHLVL=1
++++ CONDA_SHLVL=1
++++ export CONDA_DEFAULT_ENV=base
++++ CONDA_DEFAULT_ENV=base
++++ export 'CONDA_PROMPT_MODIFIER=(base) '
++++ CONDA_PROMPT_MODIFIER='(base) '
++++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++++ export _CE_M=
++++ _CE_M=
++++ export _CE_CONDA=
++++ _CE_CONDA=
++++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+++ __conda_hashr
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ hash -r
++ unset __conda_setup
+ conda activate Trans_base
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate Trans_base
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate Trans_base
++ /home/yfguo/miniconda3/bin/conda shell.posix activate Trans_base
+ ask_conda='PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
+ eval 'PS1='\''(Trans_base) '\''
export PATH='\''/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'\''
export CONDA_PREFIX='\''/home/yfguo/miniconda3/envs/Trans_base'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''Trans_base'\''
export CONDA_PROMPT_MODIFIER='\''(Trans_base) '\''
export CONDA_PREFIX_1='\''/home/yfguo/miniconda3'\''
export CONDA_EXE='\''/home/yfguo/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/home/yfguo/miniconda3/bin/python'\'''
++ PS1='(Trans_base) '
++ export PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ PATH=/home/yfguo/miniconda3/envs/Trans_base/bin:/home/yfguo/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
++ export CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ CONDA_PREFIX=/home/yfguo/miniconda3/envs/Trans_base
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=Trans_base
++ CONDA_DEFAULT_ENV=Trans_base
++ export 'CONDA_PROMPT_MODIFIER=(Trans_base) '
++ CONDA_PROMPT_MODIFIER='(Trans_base) '
++ export CONDA_PREFIX_1=/home/yfguo/miniconda3
++ CONDA_PREFIX_1=/home/yfguo/miniconda3
++ export CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ CONDA_EXE=/home/yfguo/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/home/yfguo/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python ende920404_latest_2teacher_train_distill_sample_T_2.py
Traceback (most recent call last):
  File "/home/yfguo/transformer_924/ende920404_latest_2teacher_train_distill_sample_T_2.py", line 290, in <module>
    low_td = h5File(cnfg.low_train_data, "r")
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 567, in __init__
    fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)
  File "/home/yfguo/miniconda3/envs/Trans_base/lib/python3.10/site-packages/h5py/_hl/files.py", line 231, in make_fid
    fid = h5f.open(name, flags, fapl=fapl)
  File "h5py/_objects.pyx", line 54, in h5py._objects.with_phil.wrapper
  File "h5py/_objects.pyx", line 55, in h5py._objects.with_phil.wrapper
  File "h5py/h5f.pyx", line 106, in h5py.h5f.open
FileNotFoundError: [Errno 2] Unable to open file (unable to open file: name = '/home/yfguo/4090data/Data_Cache/wmt16/wmt16cache_sample/rs_sample/low_train.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)
